Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     empty -> <empty>
Rule 3     stmt_list -> stmt_list statement
Rule 4     stmt_list -> statement
Rule 5     statement -> declaration_list NL
Rule 6     statement -> assignment NL
Rule 7     statement -> while NL
Rule 8     statement -> if NL
Rule 9     statement -> operator NL
Rule 10    statement -> function NL
Rule 11    statement -> function_call NL
Rule 12    statement -> RETURN NL
Rule 13    statement -> empty NL
Rule 14    declaration_list -> type vars_list
Rule 15    type -> INT
Rule 16    type -> CELL
Rule 17    type -> BOOL
Rule 18    type -> VAR
Rule 19    vars_list -> IDENT COMMA vars_list
Rule 20    vars_list -> assignment COMMA vars_list
Rule 21    vars_list -> IDENT
Rule 22    vars_list -> assignment
Rule 23    assignment -> variable ASSIGN expression
Rule 24    assignment -> variable ASSIGN array
Rule 25    array -> OSQBRACKET expr_list CSQBRACKET
Rule 26    expr_list -> expr_list COMMA expression
Rule 27    expr_list -> expression
Rule 28    variable -> IDENT OBRACKET expression CBRACKET
Rule 29    variable -> IDENT
Rule 30    expression -> variable
Rule 31    expression -> const
Rule 32    expression -> al_expression
Rule 33    expression -> function_call
Rule 34    expression -> operator
Rule 35    const -> INF
Rule 36    const -> MINUS_INF
Rule 37    const -> NAN
Rule 38    const -> TRUE
Rule 39    const -> FALSE
Rule 40    const -> UNDEF
Rule 41    const -> EMPTY
Rule 42    const -> WALL
Rule 43    const -> BOX
Rule 44    const -> EXIT
Rule 45    const -> DECIMAL
Rule 46    const -> HEXADECIMAL
Rule 47    al_expression -> expression PLUS expression
Rule 48    al_expression -> expression MINUS expression
Rule 49    al_expression -> MINUS expression
Rule 50    al_expression -> SHARP expression
Rule 51    al_expression -> expression CARET expression
Rule 52    al_expression -> expression GREATER expression
Rule 53    al_expression -> expression LESS expression
Rule 54    al_expression -> expression EQUAL expression
Rule 55    function_call -> IDENT OBRACKET variable CBRACKET
Rule 56    operator -> FORWARD expression
Rule 57    operator -> BACKWARD expression
Rule 58    operator -> LEFT
Rule 59    operator -> RIGHT
Rule 60    operator -> LOAD expression
Rule 61    operator -> DROP expression
Rule 62    operator -> LOOK
Rule 63    operator -> TEST
Rule 64    operator -> SIZEOF variable
Rule 65    while -> WHILE expression DO stmt_list DONE
Rule 66    while -> WHILE expression DO stmt_list FINISH stmt_list DONE
Rule 67    if -> IF expression DO stmt_list DONE
Rule 68    if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
Rule 69    if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
Rule 70    if -> IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
Rule 71    function -> FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
Rule 72    function -> FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE

Terminals, with rules where they appear

ASSIGN               : 23 24
BACKWARD             : 57
BOOL                 : 17
BOX                  : 43
CARET                : 51
CBRACKET             : 28 55 71 72
CELL                 : 16
COMMA                : 19 20 26
CSQBRACKET           : 25
DECIMAL              : 45
DO                   : 65 66 67 68 68 69 69 69 70 70 71 72
DONE                 : 65 66 67 68 68 69 69 69 70 70 71 72
DROP                 : 61
ELDEF                : 68 69
ELUND                : 69 70
EMPTY                : 41
EQUAL                : 54
EXIT                 : 44
FALSE                : 39
FINISH               : 66
FORWARD              : 56
FUNCTION             : 71 72
GREATER              : 52
HEXADECIMAL          : 46
IDENT                : 19 21 28 29 55 71 72 72
IF                   : 67 68 69 70
INF                  : 35
INT                  : 15
LEFT                 : 58
LESS                 : 53
LOAD                 : 60
LOOK                 : 62
MINUS                : 48 49
MINUS_INF            : 36
NAN                  : 37
NL                   : 5 6 7 8 9 10 11 12 13 68 69 69 70 72
OBRACKET             : 28 55 71 72
OSQBRACKET           : 25
PLUS                 : 47
RETURN               : 12
RIGHT                : 59
SHARP                : 50
SIZEOF               : 64
TEST                 : 63
TRUE                 : 38
UNDEF                : 40
VAR                  : 18
WALL                 : 42
WHILE                : 65 66
error                : 

Nonterminals, with rules where they appear

al_expression        : 32
array                : 24
assignment           : 6 20 22
const                : 31
declaration_list     : 5
empty                : 13
expr_list            : 25 26
expression           : 23 26 27 28 47 47 48 48 49 50 51 51 52 52 53 53 54 54 56 57 60 61 65 66 67 68 69 70
function             : 10
function_call        : 11 33
if                   : 8
operator             : 9 34
program              : 0
statement            : 3 4
stmt_list            : 1 3 65 66 66 67 68 68 69 69 69 70 70 71 72
type                 : 14
variable             : 23 24 30 55 64
vars_list            : 14 19 20
while                : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (24) assignment -> . variable ASSIGN array
    (65) while -> . WHILE expression DO stmt_list DONE
    (66) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (67) if -> . IF expression DO stmt_list DONE
    (68) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (69) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable
    (71) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (72) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25
    FUNCTION        shift and go to state 26
    IDENT           shift and go to state 27
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 28
    CELL            shift and go to state 29
    BOOL            shift and go to state 30
    VAR             shift and go to state 31

    program                        shift and go to state 1
    stmt_list                      shift and go to state 2
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> stmt_list .
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (24) assignment -> . variable ASSIGN array
    (65) while -> . WHILE expression DO stmt_list DONE
    (66) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (67) if -> . IF expression DO stmt_list DONE
    (68) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (69) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable
    (71) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (72) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    $end            reduce using rule 1 (program -> stmt_list .)
    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25
    FUNCTION        shift and go to state 26
    IDENT           shift and go to state 27
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 28
    CELL            shift and go to state 29
    BOOL            shift and go to state 30
    VAR             shift and go to state 31

    statement                      shift and go to state 32
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 3

    (4) stmt_list -> statement .

    RETURN          reduce using rule 4 (stmt_list -> statement .)
    WHILE           reduce using rule 4 (stmt_list -> statement .)
    IF              reduce using rule 4 (stmt_list -> statement .)
    FORWARD         reduce using rule 4 (stmt_list -> statement .)
    BACKWARD        reduce using rule 4 (stmt_list -> statement .)
    LEFT            reduce using rule 4 (stmt_list -> statement .)
    RIGHT           reduce using rule 4 (stmt_list -> statement .)
    LOAD            reduce using rule 4 (stmt_list -> statement .)
    DROP            reduce using rule 4 (stmt_list -> statement .)
    LOOK            reduce using rule 4 (stmt_list -> statement .)
    TEST            reduce using rule 4 (stmt_list -> statement .)
    SIZEOF          reduce using rule 4 (stmt_list -> statement .)
    FUNCTION        reduce using rule 4 (stmt_list -> statement .)
    IDENT           reduce using rule 4 (stmt_list -> statement .)
    INT             reduce using rule 4 (stmt_list -> statement .)
    CELL            reduce using rule 4 (stmt_list -> statement .)
    BOOL            reduce using rule 4 (stmt_list -> statement .)
    VAR             reduce using rule 4 (stmt_list -> statement .)
    NL              reduce using rule 4 (stmt_list -> statement .)
    $end            reduce using rule 4 (stmt_list -> statement .)
    DONE            reduce using rule 4 (stmt_list -> statement .)
    FINISH          reduce using rule 4 (stmt_list -> statement .)


state 4

    (5) statement -> declaration_list . NL

    NL              shift and go to state 33


state 5

    (6) statement -> assignment . NL

    NL              shift and go to state 34


state 6

    (7) statement -> while . NL

    NL              shift and go to state 35


state 7

    (8) statement -> if . NL

    NL              shift and go to state 36


state 8

    (9) statement -> operator . NL

    NL              shift and go to state 37


state 9

    (10) statement -> function . NL

    NL              shift and go to state 38


state 10

    (11) statement -> function_call . NL

    NL              shift and go to state 39


state 11

    (12) statement -> RETURN . NL

    NL              shift and go to state 40


state 12

    (13) statement -> empty . NL

    NL              shift and go to state 41


state 13

    (14) declaration_list -> type . vars_list
    (19) vars_list -> . IDENT COMMA vars_list
    (20) vars_list -> . assignment COMMA vars_list
    (21) vars_list -> . IDENT
    (22) vars_list -> . assignment
    (23) assignment -> . variable ASSIGN expression
    (24) assignment -> . variable ASSIGN array
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    IDENT           shift and go to state 43

    vars_list                      shift and go to state 42
    assignment                     shift and go to state 44
    variable                       shift and go to state 14

state 14

    (23) assignment -> variable . ASSIGN expression
    (24) assignment -> variable . ASSIGN array

    ASSIGN          shift and go to state 45


state 15

    (65) while -> WHILE . expression DO stmt_list DONE
    (66) while -> WHILE . expression DO stmt_list FINISH stmt_list DONE
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . al_expression
    (33) expression -> . function_call
    (34) expression -> . operator
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT
    (35) const -> . INF
    (36) const -> . MINUS_INF
    (37) const -> . NAN
    (38) const -> . TRUE
    (39) const -> . FALSE
    (40) const -> . UNDEF
    (41) const -> . EMPTY
    (42) const -> . WALL
    (43) const -> . BOX
    (44) const -> . EXIT
    (45) const -> . DECIMAL
    (46) const -> . HEXADECIMAL
    (47) al_expression -> . expression PLUS expression
    (48) al_expression -> . expression MINUS expression
    (49) al_expression -> . MINUS expression
    (50) al_expression -> . SHARP expression
    (51) al_expression -> . expression CARET expression
    (52) al_expression -> . expression GREATER expression
    (53) al_expression -> . expression LESS expression
    (54) al_expression -> . expression EQUAL expression
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable

    IDENT           shift and go to state 52
    INF             shift and go to state 53
    MINUS_INF       shift and go to state 54
    NAN             shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    UNDEF           shift and go to state 58
    EMPTY           shift and go to state 59
    WALL            shift and go to state 60
    BOX             shift and go to state 61
    EXIT            shift and go to state 62
    DECIMAL         shift and go to state 63
    HEXADECIMAL     shift and go to state 64
    MINUS           shift and go to state 65
    SHARP           shift and go to state 66
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25

    expression                     shift and go to state 46
    variable                       shift and go to state 47
    const                          shift and go to state 48
    al_expression                  shift and go to state 49
    function_call                  shift and go to state 50
    operator                       shift and go to state 51

state 16

    (67) if -> IF . expression DO stmt_list DONE
    (68) if -> IF . expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (69) if -> IF . expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> IF . expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . al_expression
    (33) expression -> . function_call
    (34) expression -> . operator
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT
    (35) const -> . INF
    (36) const -> . MINUS_INF
    (37) const -> . NAN
    (38) const -> . TRUE
    (39) const -> . FALSE
    (40) const -> . UNDEF
    (41) const -> . EMPTY
    (42) const -> . WALL
    (43) const -> . BOX
    (44) const -> . EXIT
    (45) const -> . DECIMAL
    (46) const -> . HEXADECIMAL
    (47) al_expression -> . expression PLUS expression
    (48) al_expression -> . expression MINUS expression
    (49) al_expression -> . MINUS expression
    (50) al_expression -> . SHARP expression
    (51) al_expression -> . expression CARET expression
    (52) al_expression -> . expression GREATER expression
    (53) al_expression -> . expression LESS expression
    (54) al_expression -> . expression EQUAL expression
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable

    IDENT           shift and go to state 52
    INF             shift and go to state 53
    MINUS_INF       shift and go to state 54
    NAN             shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    UNDEF           shift and go to state 58
    EMPTY           shift and go to state 59
    WALL            shift and go to state 60
    BOX             shift and go to state 61
    EXIT            shift and go to state 62
    DECIMAL         shift and go to state 63
    HEXADECIMAL     shift and go to state 64
    MINUS           shift and go to state 65
    SHARP           shift and go to state 66
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25

    expression                     shift and go to state 67
    variable                       shift and go to state 47
    const                          shift and go to state 48
    al_expression                  shift and go to state 49
    function_call                  shift and go to state 50
    operator                       shift and go to state 51

state 17

    (56) operator -> FORWARD . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . al_expression
    (33) expression -> . function_call
    (34) expression -> . operator
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT
    (35) const -> . INF
    (36) const -> . MINUS_INF
    (37) const -> . NAN
    (38) const -> . TRUE
    (39) const -> . FALSE
    (40) const -> . UNDEF
    (41) const -> . EMPTY
    (42) const -> . WALL
    (43) const -> . BOX
    (44) const -> . EXIT
    (45) const -> . DECIMAL
    (46) const -> . HEXADECIMAL
    (47) al_expression -> . expression PLUS expression
    (48) al_expression -> . expression MINUS expression
    (49) al_expression -> . MINUS expression
    (50) al_expression -> . SHARP expression
    (51) al_expression -> . expression CARET expression
    (52) al_expression -> . expression GREATER expression
    (53) al_expression -> . expression LESS expression
    (54) al_expression -> . expression EQUAL expression
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable

    IDENT           shift and go to state 52
    INF             shift and go to state 53
    MINUS_INF       shift and go to state 54
    NAN             shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    UNDEF           shift and go to state 58
    EMPTY           shift and go to state 59
    WALL            shift and go to state 60
    BOX             shift and go to state 61
    EXIT            shift and go to state 62
    DECIMAL         shift and go to state 63
    HEXADECIMAL     shift and go to state 64
    MINUS           shift and go to state 65
    SHARP           shift and go to state 66
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25

    expression                     shift and go to state 68
    variable                       shift and go to state 47
    const                          shift and go to state 48
    al_expression                  shift and go to state 49
    function_call                  shift and go to state 50
    operator                       shift and go to state 51

state 18

    (57) operator -> BACKWARD . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . al_expression
    (33) expression -> . function_call
    (34) expression -> . operator
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT
    (35) const -> . INF
    (36) const -> . MINUS_INF
    (37) const -> . NAN
    (38) const -> . TRUE
    (39) const -> . FALSE
    (40) const -> . UNDEF
    (41) const -> . EMPTY
    (42) const -> . WALL
    (43) const -> . BOX
    (44) const -> . EXIT
    (45) const -> . DECIMAL
    (46) const -> . HEXADECIMAL
    (47) al_expression -> . expression PLUS expression
    (48) al_expression -> . expression MINUS expression
    (49) al_expression -> . MINUS expression
    (50) al_expression -> . SHARP expression
    (51) al_expression -> . expression CARET expression
    (52) al_expression -> . expression GREATER expression
    (53) al_expression -> . expression LESS expression
    (54) al_expression -> . expression EQUAL expression
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable

    IDENT           shift and go to state 52
    INF             shift and go to state 53
    MINUS_INF       shift and go to state 54
    NAN             shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    UNDEF           shift and go to state 58
    EMPTY           shift and go to state 59
    WALL            shift and go to state 60
    BOX             shift and go to state 61
    EXIT            shift and go to state 62
    DECIMAL         shift and go to state 63
    HEXADECIMAL     shift and go to state 64
    MINUS           shift and go to state 65
    SHARP           shift and go to state 66
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25

    expression                     shift and go to state 69
    variable                       shift and go to state 47
    const                          shift and go to state 48
    al_expression                  shift and go to state 49
    function_call                  shift and go to state 50
    operator                       shift and go to state 51

state 19

    (58) operator -> LEFT .

    NL              reduce using rule 58 (operator -> LEFT .)
    DO              reduce using rule 58 (operator -> LEFT .)
    PLUS            reduce using rule 58 (operator -> LEFT .)
    MINUS           reduce using rule 58 (operator -> LEFT .)
    CARET           reduce using rule 58 (operator -> LEFT .)
    GREATER         reduce using rule 58 (operator -> LEFT .)
    LESS            reduce using rule 58 (operator -> LEFT .)
    EQUAL           reduce using rule 58 (operator -> LEFT .)
    COMMA           reduce using rule 58 (operator -> LEFT .)
    CBRACKET        reduce using rule 58 (operator -> LEFT .)
    CSQBRACKET      reduce using rule 58 (operator -> LEFT .)


state 20

    (59) operator -> RIGHT .

    NL              reduce using rule 59 (operator -> RIGHT .)
    DO              reduce using rule 59 (operator -> RIGHT .)
    PLUS            reduce using rule 59 (operator -> RIGHT .)
    MINUS           reduce using rule 59 (operator -> RIGHT .)
    CARET           reduce using rule 59 (operator -> RIGHT .)
    GREATER         reduce using rule 59 (operator -> RIGHT .)
    LESS            reduce using rule 59 (operator -> RIGHT .)
    EQUAL           reduce using rule 59 (operator -> RIGHT .)
    COMMA           reduce using rule 59 (operator -> RIGHT .)
    CBRACKET        reduce using rule 59 (operator -> RIGHT .)
    CSQBRACKET      reduce using rule 59 (operator -> RIGHT .)


state 21

    (60) operator -> LOAD . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . al_expression
    (33) expression -> . function_call
    (34) expression -> . operator
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT
    (35) const -> . INF
    (36) const -> . MINUS_INF
    (37) const -> . NAN
    (38) const -> . TRUE
    (39) const -> . FALSE
    (40) const -> . UNDEF
    (41) const -> . EMPTY
    (42) const -> . WALL
    (43) const -> . BOX
    (44) const -> . EXIT
    (45) const -> . DECIMAL
    (46) const -> . HEXADECIMAL
    (47) al_expression -> . expression PLUS expression
    (48) al_expression -> . expression MINUS expression
    (49) al_expression -> . MINUS expression
    (50) al_expression -> . SHARP expression
    (51) al_expression -> . expression CARET expression
    (52) al_expression -> . expression GREATER expression
    (53) al_expression -> . expression LESS expression
    (54) al_expression -> . expression EQUAL expression
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable

    IDENT           shift and go to state 52
    INF             shift and go to state 53
    MINUS_INF       shift and go to state 54
    NAN             shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    UNDEF           shift and go to state 58
    EMPTY           shift and go to state 59
    WALL            shift and go to state 60
    BOX             shift and go to state 61
    EXIT            shift and go to state 62
    DECIMAL         shift and go to state 63
    HEXADECIMAL     shift and go to state 64
    MINUS           shift and go to state 65
    SHARP           shift and go to state 66
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25

    expression                     shift and go to state 70
    variable                       shift and go to state 47
    const                          shift and go to state 48
    al_expression                  shift and go to state 49
    function_call                  shift and go to state 50
    operator                       shift and go to state 51

state 22

    (61) operator -> DROP . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . al_expression
    (33) expression -> . function_call
    (34) expression -> . operator
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT
    (35) const -> . INF
    (36) const -> . MINUS_INF
    (37) const -> . NAN
    (38) const -> . TRUE
    (39) const -> . FALSE
    (40) const -> . UNDEF
    (41) const -> . EMPTY
    (42) const -> . WALL
    (43) const -> . BOX
    (44) const -> . EXIT
    (45) const -> . DECIMAL
    (46) const -> . HEXADECIMAL
    (47) al_expression -> . expression PLUS expression
    (48) al_expression -> . expression MINUS expression
    (49) al_expression -> . MINUS expression
    (50) al_expression -> . SHARP expression
    (51) al_expression -> . expression CARET expression
    (52) al_expression -> . expression GREATER expression
    (53) al_expression -> . expression LESS expression
    (54) al_expression -> . expression EQUAL expression
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable

    IDENT           shift and go to state 52
    INF             shift and go to state 53
    MINUS_INF       shift and go to state 54
    NAN             shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    UNDEF           shift and go to state 58
    EMPTY           shift and go to state 59
    WALL            shift and go to state 60
    BOX             shift and go to state 61
    EXIT            shift and go to state 62
    DECIMAL         shift and go to state 63
    HEXADECIMAL     shift and go to state 64
    MINUS           shift and go to state 65
    SHARP           shift and go to state 66
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25

    expression                     shift and go to state 71
    variable                       shift and go to state 47
    const                          shift and go to state 48
    al_expression                  shift and go to state 49
    function_call                  shift and go to state 50
    operator                       shift and go to state 51

state 23

    (62) operator -> LOOK .

    NL              reduce using rule 62 (operator -> LOOK .)
    DO              reduce using rule 62 (operator -> LOOK .)
    PLUS            reduce using rule 62 (operator -> LOOK .)
    MINUS           reduce using rule 62 (operator -> LOOK .)
    CARET           reduce using rule 62 (operator -> LOOK .)
    GREATER         reduce using rule 62 (operator -> LOOK .)
    LESS            reduce using rule 62 (operator -> LOOK .)
    EQUAL           reduce using rule 62 (operator -> LOOK .)
    COMMA           reduce using rule 62 (operator -> LOOK .)
    CBRACKET        reduce using rule 62 (operator -> LOOK .)
    CSQBRACKET      reduce using rule 62 (operator -> LOOK .)


state 24

    (63) operator -> TEST .

    NL              reduce using rule 63 (operator -> TEST .)
    DO              reduce using rule 63 (operator -> TEST .)
    PLUS            reduce using rule 63 (operator -> TEST .)
    MINUS           reduce using rule 63 (operator -> TEST .)
    CARET           reduce using rule 63 (operator -> TEST .)
    GREATER         reduce using rule 63 (operator -> TEST .)
    LESS            reduce using rule 63 (operator -> TEST .)
    EQUAL           reduce using rule 63 (operator -> TEST .)
    COMMA           reduce using rule 63 (operator -> TEST .)
    CBRACKET        reduce using rule 63 (operator -> TEST .)
    CSQBRACKET      reduce using rule 63 (operator -> TEST .)


state 25

    (64) operator -> SIZEOF . variable
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    IDENT           shift and go to state 73

    variable                       shift and go to state 72

state 26

    (71) function -> FUNCTION . OBRACKET IDENT CBRACKET DO stmt_list DONE
    (72) function -> FUNCTION . IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE

    OBRACKET        shift and go to state 74
    IDENT           shift and go to state 75


state 27

    (55) function_call -> IDENT . OBRACKET variable CBRACKET
    (28) variable -> IDENT . OBRACKET expression CBRACKET
    (29) variable -> IDENT .

    OBRACKET        shift and go to state 76
    ASSIGN          reduce using rule 29 (variable -> IDENT .)


state 28

    (15) type -> INT .

    IDENT           reduce using rule 15 (type -> INT .)


state 29

    (16) type -> CELL .

    IDENT           reduce using rule 16 (type -> CELL .)


state 30

    (17) type -> BOOL .

    IDENT           reduce using rule 17 (type -> BOOL .)


state 31

    (18) type -> VAR .

    IDENT           reduce using rule 18 (type -> VAR .)


state 32

    (3) stmt_list -> stmt_list statement .

    RETURN          reduce using rule 3 (stmt_list -> stmt_list statement .)
    WHILE           reduce using rule 3 (stmt_list -> stmt_list statement .)
    IF              reduce using rule 3 (stmt_list -> stmt_list statement .)
    FORWARD         reduce using rule 3 (stmt_list -> stmt_list statement .)
    BACKWARD        reduce using rule 3 (stmt_list -> stmt_list statement .)
    LEFT            reduce using rule 3 (stmt_list -> stmt_list statement .)
    RIGHT           reduce using rule 3 (stmt_list -> stmt_list statement .)
    LOAD            reduce using rule 3 (stmt_list -> stmt_list statement .)
    DROP            reduce using rule 3 (stmt_list -> stmt_list statement .)
    LOOK            reduce using rule 3 (stmt_list -> stmt_list statement .)
    TEST            reduce using rule 3 (stmt_list -> stmt_list statement .)
    SIZEOF          reduce using rule 3 (stmt_list -> stmt_list statement .)
    FUNCTION        reduce using rule 3 (stmt_list -> stmt_list statement .)
    IDENT           reduce using rule 3 (stmt_list -> stmt_list statement .)
    INT             reduce using rule 3 (stmt_list -> stmt_list statement .)
    CELL            reduce using rule 3 (stmt_list -> stmt_list statement .)
    BOOL            reduce using rule 3 (stmt_list -> stmt_list statement .)
    VAR             reduce using rule 3 (stmt_list -> stmt_list statement .)
    NL              reduce using rule 3 (stmt_list -> stmt_list statement .)
    $end            reduce using rule 3 (stmt_list -> stmt_list statement .)
    DONE            reduce using rule 3 (stmt_list -> stmt_list statement .)
    FINISH          reduce using rule 3 (stmt_list -> stmt_list statement .)


state 33

    (5) statement -> declaration_list NL .

    RETURN          reduce using rule 5 (statement -> declaration_list NL .)
    WHILE           reduce using rule 5 (statement -> declaration_list NL .)
    IF              reduce using rule 5 (statement -> declaration_list NL .)
    FORWARD         reduce using rule 5 (statement -> declaration_list NL .)
    BACKWARD        reduce using rule 5 (statement -> declaration_list NL .)
    LEFT            reduce using rule 5 (statement -> declaration_list NL .)
    RIGHT           reduce using rule 5 (statement -> declaration_list NL .)
    LOAD            reduce using rule 5 (statement -> declaration_list NL .)
    DROP            reduce using rule 5 (statement -> declaration_list NL .)
    LOOK            reduce using rule 5 (statement -> declaration_list NL .)
    TEST            reduce using rule 5 (statement -> declaration_list NL .)
    SIZEOF          reduce using rule 5 (statement -> declaration_list NL .)
    FUNCTION        reduce using rule 5 (statement -> declaration_list NL .)
    IDENT           reduce using rule 5 (statement -> declaration_list NL .)
    INT             reduce using rule 5 (statement -> declaration_list NL .)
    CELL            reduce using rule 5 (statement -> declaration_list NL .)
    BOOL            reduce using rule 5 (statement -> declaration_list NL .)
    VAR             reduce using rule 5 (statement -> declaration_list NL .)
    NL              reduce using rule 5 (statement -> declaration_list NL .)
    $end            reduce using rule 5 (statement -> declaration_list NL .)
    DONE            reduce using rule 5 (statement -> declaration_list NL .)
    FINISH          reduce using rule 5 (statement -> declaration_list NL .)


state 34

    (6) statement -> assignment NL .

    RETURN          reduce using rule 6 (statement -> assignment NL .)
    WHILE           reduce using rule 6 (statement -> assignment NL .)
    IF              reduce using rule 6 (statement -> assignment NL .)
    FORWARD         reduce using rule 6 (statement -> assignment NL .)
    BACKWARD        reduce using rule 6 (statement -> assignment NL .)
    LEFT            reduce using rule 6 (statement -> assignment NL .)
    RIGHT           reduce using rule 6 (statement -> assignment NL .)
    LOAD            reduce using rule 6 (statement -> assignment NL .)
    DROP            reduce using rule 6 (statement -> assignment NL .)
    LOOK            reduce using rule 6 (statement -> assignment NL .)
    TEST            reduce using rule 6 (statement -> assignment NL .)
    SIZEOF          reduce using rule 6 (statement -> assignment NL .)
    FUNCTION        reduce using rule 6 (statement -> assignment NL .)
    IDENT           reduce using rule 6 (statement -> assignment NL .)
    INT             reduce using rule 6 (statement -> assignment NL .)
    CELL            reduce using rule 6 (statement -> assignment NL .)
    BOOL            reduce using rule 6 (statement -> assignment NL .)
    VAR             reduce using rule 6 (statement -> assignment NL .)
    NL              reduce using rule 6 (statement -> assignment NL .)
    $end            reduce using rule 6 (statement -> assignment NL .)
    DONE            reduce using rule 6 (statement -> assignment NL .)
    FINISH          reduce using rule 6 (statement -> assignment NL .)


state 35

    (7) statement -> while NL .

    RETURN          reduce using rule 7 (statement -> while NL .)
    WHILE           reduce using rule 7 (statement -> while NL .)
    IF              reduce using rule 7 (statement -> while NL .)
    FORWARD         reduce using rule 7 (statement -> while NL .)
    BACKWARD        reduce using rule 7 (statement -> while NL .)
    LEFT            reduce using rule 7 (statement -> while NL .)
    RIGHT           reduce using rule 7 (statement -> while NL .)
    LOAD            reduce using rule 7 (statement -> while NL .)
    DROP            reduce using rule 7 (statement -> while NL .)
    LOOK            reduce using rule 7 (statement -> while NL .)
    TEST            reduce using rule 7 (statement -> while NL .)
    SIZEOF          reduce using rule 7 (statement -> while NL .)
    FUNCTION        reduce using rule 7 (statement -> while NL .)
    IDENT           reduce using rule 7 (statement -> while NL .)
    INT             reduce using rule 7 (statement -> while NL .)
    CELL            reduce using rule 7 (statement -> while NL .)
    BOOL            reduce using rule 7 (statement -> while NL .)
    VAR             reduce using rule 7 (statement -> while NL .)
    NL              reduce using rule 7 (statement -> while NL .)
    $end            reduce using rule 7 (statement -> while NL .)
    DONE            reduce using rule 7 (statement -> while NL .)
    FINISH          reduce using rule 7 (statement -> while NL .)


state 36

    (8) statement -> if NL .

    RETURN          reduce using rule 8 (statement -> if NL .)
    WHILE           reduce using rule 8 (statement -> if NL .)
    IF              reduce using rule 8 (statement -> if NL .)
    FORWARD         reduce using rule 8 (statement -> if NL .)
    BACKWARD        reduce using rule 8 (statement -> if NL .)
    LEFT            reduce using rule 8 (statement -> if NL .)
    RIGHT           reduce using rule 8 (statement -> if NL .)
    LOAD            reduce using rule 8 (statement -> if NL .)
    DROP            reduce using rule 8 (statement -> if NL .)
    LOOK            reduce using rule 8 (statement -> if NL .)
    TEST            reduce using rule 8 (statement -> if NL .)
    SIZEOF          reduce using rule 8 (statement -> if NL .)
    FUNCTION        reduce using rule 8 (statement -> if NL .)
    IDENT           reduce using rule 8 (statement -> if NL .)
    INT             reduce using rule 8 (statement -> if NL .)
    CELL            reduce using rule 8 (statement -> if NL .)
    BOOL            reduce using rule 8 (statement -> if NL .)
    VAR             reduce using rule 8 (statement -> if NL .)
    NL              reduce using rule 8 (statement -> if NL .)
    $end            reduce using rule 8 (statement -> if NL .)
    DONE            reduce using rule 8 (statement -> if NL .)
    FINISH          reduce using rule 8 (statement -> if NL .)


state 37

    (9) statement -> operator NL .

    RETURN          reduce using rule 9 (statement -> operator NL .)
    WHILE           reduce using rule 9 (statement -> operator NL .)
    IF              reduce using rule 9 (statement -> operator NL .)
    FORWARD         reduce using rule 9 (statement -> operator NL .)
    BACKWARD        reduce using rule 9 (statement -> operator NL .)
    LEFT            reduce using rule 9 (statement -> operator NL .)
    RIGHT           reduce using rule 9 (statement -> operator NL .)
    LOAD            reduce using rule 9 (statement -> operator NL .)
    DROP            reduce using rule 9 (statement -> operator NL .)
    LOOK            reduce using rule 9 (statement -> operator NL .)
    TEST            reduce using rule 9 (statement -> operator NL .)
    SIZEOF          reduce using rule 9 (statement -> operator NL .)
    FUNCTION        reduce using rule 9 (statement -> operator NL .)
    IDENT           reduce using rule 9 (statement -> operator NL .)
    INT             reduce using rule 9 (statement -> operator NL .)
    CELL            reduce using rule 9 (statement -> operator NL .)
    BOOL            reduce using rule 9 (statement -> operator NL .)
    VAR             reduce using rule 9 (statement -> operator NL .)
    NL              reduce using rule 9 (statement -> operator NL .)
    $end            reduce using rule 9 (statement -> operator NL .)
    DONE            reduce using rule 9 (statement -> operator NL .)
    FINISH          reduce using rule 9 (statement -> operator NL .)


state 38

    (10) statement -> function NL .

    RETURN          reduce using rule 10 (statement -> function NL .)
    WHILE           reduce using rule 10 (statement -> function NL .)
    IF              reduce using rule 10 (statement -> function NL .)
    FORWARD         reduce using rule 10 (statement -> function NL .)
    BACKWARD        reduce using rule 10 (statement -> function NL .)
    LEFT            reduce using rule 10 (statement -> function NL .)
    RIGHT           reduce using rule 10 (statement -> function NL .)
    LOAD            reduce using rule 10 (statement -> function NL .)
    DROP            reduce using rule 10 (statement -> function NL .)
    LOOK            reduce using rule 10 (statement -> function NL .)
    TEST            reduce using rule 10 (statement -> function NL .)
    SIZEOF          reduce using rule 10 (statement -> function NL .)
    FUNCTION        reduce using rule 10 (statement -> function NL .)
    IDENT           reduce using rule 10 (statement -> function NL .)
    INT             reduce using rule 10 (statement -> function NL .)
    CELL            reduce using rule 10 (statement -> function NL .)
    BOOL            reduce using rule 10 (statement -> function NL .)
    VAR             reduce using rule 10 (statement -> function NL .)
    NL              reduce using rule 10 (statement -> function NL .)
    $end            reduce using rule 10 (statement -> function NL .)
    DONE            reduce using rule 10 (statement -> function NL .)
    FINISH          reduce using rule 10 (statement -> function NL .)


state 39

    (11) statement -> function_call NL .

    RETURN          reduce using rule 11 (statement -> function_call NL .)
    WHILE           reduce using rule 11 (statement -> function_call NL .)
    IF              reduce using rule 11 (statement -> function_call NL .)
    FORWARD         reduce using rule 11 (statement -> function_call NL .)
    BACKWARD        reduce using rule 11 (statement -> function_call NL .)
    LEFT            reduce using rule 11 (statement -> function_call NL .)
    RIGHT           reduce using rule 11 (statement -> function_call NL .)
    LOAD            reduce using rule 11 (statement -> function_call NL .)
    DROP            reduce using rule 11 (statement -> function_call NL .)
    LOOK            reduce using rule 11 (statement -> function_call NL .)
    TEST            reduce using rule 11 (statement -> function_call NL .)
    SIZEOF          reduce using rule 11 (statement -> function_call NL .)
    FUNCTION        reduce using rule 11 (statement -> function_call NL .)
    IDENT           reduce using rule 11 (statement -> function_call NL .)
    INT             reduce using rule 11 (statement -> function_call NL .)
    CELL            reduce using rule 11 (statement -> function_call NL .)
    BOOL            reduce using rule 11 (statement -> function_call NL .)
    VAR             reduce using rule 11 (statement -> function_call NL .)
    NL              reduce using rule 11 (statement -> function_call NL .)
    $end            reduce using rule 11 (statement -> function_call NL .)
    DONE            reduce using rule 11 (statement -> function_call NL .)
    FINISH          reduce using rule 11 (statement -> function_call NL .)


state 40

    (12) statement -> RETURN NL .

    RETURN          reduce using rule 12 (statement -> RETURN NL .)
    WHILE           reduce using rule 12 (statement -> RETURN NL .)
    IF              reduce using rule 12 (statement -> RETURN NL .)
    FORWARD         reduce using rule 12 (statement -> RETURN NL .)
    BACKWARD        reduce using rule 12 (statement -> RETURN NL .)
    LEFT            reduce using rule 12 (statement -> RETURN NL .)
    RIGHT           reduce using rule 12 (statement -> RETURN NL .)
    LOAD            reduce using rule 12 (statement -> RETURN NL .)
    DROP            reduce using rule 12 (statement -> RETURN NL .)
    LOOK            reduce using rule 12 (statement -> RETURN NL .)
    TEST            reduce using rule 12 (statement -> RETURN NL .)
    SIZEOF          reduce using rule 12 (statement -> RETURN NL .)
    FUNCTION        reduce using rule 12 (statement -> RETURN NL .)
    IDENT           reduce using rule 12 (statement -> RETURN NL .)
    INT             reduce using rule 12 (statement -> RETURN NL .)
    CELL            reduce using rule 12 (statement -> RETURN NL .)
    BOOL            reduce using rule 12 (statement -> RETURN NL .)
    VAR             reduce using rule 12 (statement -> RETURN NL .)
    NL              reduce using rule 12 (statement -> RETURN NL .)
    $end            reduce using rule 12 (statement -> RETURN NL .)
    DONE            reduce using rule 12 (statement -> RETURN NL .)
    FINISH          reduce using rule 12 (statement -> RETURN NL .)


state 41

    (13) statement -> empty NL .

    RETURN          reduce using rule 13 (statement -> empty NL .)
    WHILE           reduce using rule 13 (statement -> empty NL .)
    IF              reduce using rule 13 (statement -> empty NL .)
    FORWARD         reduce using rule 13 (statement -> empty NL .)
    BACKWARD        reduce using rule 13 (statement -> empty NL .)
    LEFT            reduce using rule 13 (statement -> empty NL .)
    RIGHT           reduce using rule 13 (statement -> empty NL .)
    LOAD            reduce using rule 13 (statement -> empty NL .)
    DROP            reduce using rule 13 (statement -> empty NL .)
    LOOK            reduce using rule 13 (statement -> empty NL .)
    TEST            reduce using rule 13 (statement -> empty NL .)
    SIZEOF          reduce using rule 13 (statement -> empty NL .)
    FUNCTION        reduce using rule 13 (statement -> empty NL .)
    IDENT           reduce using rule 13 (statement -> empty NL .)
    INT             reduce using rule 13 (statement -> empty NL .)
    CELL            reduce using rule 13 (statement -> empty NL .)
    BOOL            reduce using rule 13 (statement -> empty NL .)
    VAR             reduce using rule 13 (statement -> empty NL .)
    NL              reduce using rule 13 (statement -> empty NL .)
    $end            reduce using rule 13 (statement -> empty NL .)
    DONE            reduce using rule 13 (statement -> empty NL .)
    FINISH          reduce using rule 13 (statement -> empty NL .)


state 42

    (14) declaration_list -> type vars_list .

    NL              reduce using rule 14 (declaration_list -> type vars_list .)


state 43

    (19) vars_list -> IDENT . COMMA vars_list
    (21) vars_list -> IDENT .
    (28) variable -> IDENT . OBRACKET expression CBRACKET
    (29) variable -> IDENT .

    COMMA           shift and go to state 77
    NL              reduce using rule 21 (vars_list -> IDENT .)
    OBRACKET        shift and go to state 78
    ASSIGN          reduce using rule 29 (variable -> IDENT .)


state 44

    (20) vars_list -> assignment . COMMA vars_list
    (22) vars_list -> assignment .

    COMMA           shift and go to state 79
    NL              reduce using rule 22 (vars_list -> assignment .)


state 45

    (23) assignment -> variable ASSIGN . expression
    (24) assignment -> variable ASSIGN . array
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . al_expression
    (33) expression -> . function_call
    (34) expression -> . operator
    (25) array -> . OSQBRACKET expr_list CSQBRACKET
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT
    (35) const -> . INF
    (36) const -> . MINUS_INF
    (37) const -> . NAN
    (38) const -> . TRUE
    (39) const -> . FALSE
    (40) const -> . UNDEF
    (41) const -> . EMPTY
    (42) const -> . WALL
    (43) const -> . BOX
    (44) const -> . EXIT
    (45) const -> . DECIMAL
    (46) const -> . HEXADECIMAL
    (47) al_expression -> . expression PLUS expression
    (48) al_expression -> . expression MINUS expression
    (49) al_expression -> . MINUS expression
    (50) al_expression -> . SHARP expression
    (51) al_expression -> . expression CARET expression
    (52) al_expression -> . expression GREATER expression
    (53) al_expression -> . expression LESS expression
    (54) al_expression -> . expression EQUAL expression
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable

    OSQBRACKET      shift and go to state 82
    IDENT           shift and go to state 52
    INF             shift and go to state 53
    MINUS_INF       shift and go to state 54
    NAN             shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    UNDEF           shift and go to state 58
    EMPTY           shift and go to state 59
    WALL            shift and go to state 60
    BOX             shift and go to state 61
    EXIT            shift and go to state 62
    DECIMAL         shift and go to state 63
    HEXADECIMAL     shift and go to state 64
    MINUS           shift and go to state 65
    SHARP           shift and go to state 66
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25

    variable                       shift and go to state 47
    expression                     shift and go to state 80
    array                          shift and go to state 81
    const                          shift and go to state 48
    al_expression                  shift and go to state 49
    function_call                  shift and go to state 50
    operator                       shift and go to state 51

state 46

    (65) while -> WHILE expression . DO stmt_list DONE
    (66) while -> WHILE expression . DO stmt_list FINISH stmt_list DONE
    (47) al_expression -> expression . PLUS expression
    (48) al_expression -> expression . MINUS expression
    (51) al_expression -> expression . CARET expression
    (52) al_expression -> expression . GREATER expression
    (53) al_expression -> expression . LESS expression
    (54) al_expression -> expression . EQUAL expression

    DO              shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    CARET           shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    EQUAL           shift and go to state 89


state 47

    (30) expression -> variable .

    DO              reduce using rule 30 (expression -> variable .)
    PLUS            reduce using rule 30 (expression -> variable .)
    MINUS           reduce using rule 30 (expression -> variable .)
    CARET           reduce using rule 30 (expression -> variable .)
    GREATER         reduce using rule 30 (expression -> variable .)
    LESS            reduce using rule 30 (expression -> variable .)
    EQUAL           reduce using rule 30 (expression -> variable .)
    NL              reduce using rule 30 (expression -> variable .)
    COMMA           reduce using rule 30 (expression -> variable .)
    CBRACKET        reduce using rule 30 (expression -> variable .)
    CSQBRACKET      reduce using rule 30 (expression -> variable .)


state 48

    (31) expression -> const .

    DO              reduce using rule 31 (expression -> const .)
    PLUS            reduce using rule 31 (expression -> const .)
    MINUS           reduce using rule 31 (expression -> const .)
    CARET           reduce using rule 31 (expression -> const .)
    GREATER         reduce using rule 31 (expression -> const .)
    LESS            reduce using rule 31 (expression -> const .)
    EQUAL           reduce using rule 31 (expression -> const .)
    NL              reduce using rule 31 (expression -> const .)
    COMMA           reduce using rule 31 (expression -> const .)
    CBRACKET        reduce using rule 31 (expression -> const .)
    CSQBRACKET      reduce using rule 31 (expression -> const .)


state 49

    (32) expression -> al_expression .

    DO              reduce using rule 32 (expression -> al_expression .)
    PLUS            reduce using rule 32 (expression -> al_expression .)
    MINUS           reduce using rule 32 (expression -> al_expression .)
    CARET           reduce using rule 32 (expression -> al_expression .)
    GREATER         reduce using rule 32 (expression -> al_expression .)
    LESS            reduce using rule 32 (expression -> al_expression .)
    EQUAL           reduce using rule 32 (expression -> al_expression .)
    NL              reduce using rule 32 (expression -> al_expression .)
    COMMA           reduce using rule 32 (expression -> al_expression .)
    CBRACKET        reduce using rule 32 (expression -> al_expression .)
    CSQBRACKET      reduce using rule 32 (expression -> al_expression .)


state 50

    (33) expression -> function_call .

    DO              reduce using rule 33 (expression -> function_call .)
    PLUS            reduce using rule 33 (expression -> function_call .)
    MINUS           reduce using rule 33 (expression -> function_call .)
    CARET           reduce using rule 33 (expression -> function_call .)
    GREATER         reduce using rule 33 (expression -> function_call .)
    LESS            reduce using rule 33 (expression -> function_call .)
    EQUAL           reduce using rule 33 (expression -> function_call .)
    NL              reduce using rule 33 (expression -> function_call .)
    COMMA           reduce using rule 33 (expression -> function_call .)
    CBRACKET        reduce using rule 33 (expression -> function_call .)
    CSQBRACKET      reduce using rule 33 (expression -> function_call .)


state 51

    (34) expression -> operator .

    DO              reduce using rule 34 (expression -> operator .)
    PLUS            reduce using rule 34 (expression -> operator .)
    MINUS           reduce using rule 34 (expression -> operator .)
    CARET           reduce using rule 34 (expression -> operator .)
    GREATER         reduce using rule 34 (expression -> operator .)
    LESS            reduce using rule 34 (expression -> operator .)
    EQUAL           reduce using rule 34 (expression -> operator .)
    NL              reduce using rule 34 (expression -> operator .)
    COMMA           reduce using rule 34 (expression -> operator .)
    CBRACKET        reduce using rule 34 (expression -> operator .)
    CSQBRACKET      reduce using rule 34 (expression -> operator .)


state 52

    (28) variable -> IDENT . OBRACKET expression CBRACKET
    (29) variable -> IDENT .
    (55) function_call -> IDENT . OBRACKET variable CBRACKET

    OBRACKET        shift and go to state 90
    DO              reduce using rule 29 (variable -> IDENT .)
    PLUS            reduce using rule 29 (variable -> IDENT .)
    MINUS           reduce using rule 29 (variable -> IDENT .)
    CARET           reduce using rule 29 (variable -> IDENT .)
    GREATER         reduce using rule 29 (variable -> IDENT .)
    LESS            reduce using rule 29 (variable -> IDENT .)
    EQUAL           reduce using rule 29 (variable -> IDENT .)
    NL              reduce using rule 29 (variable -> IDENT .)
    COMMA           reduce using rule 29 (variable -> IDENT .)
    CBRACKET        reduce using rule 29 (variable -> IDENT .)
    CSQBRACKET      reduce using rule 29 (variable -> IDENT .)


state 53

    (35) const -> INF .

    DO              reduce using rule 35 (const -> INF .)
    PLUS            reduce using rule 35 (const -> INF .)
    MINUS           reduce using rule 35 (const -> INF .)
    CARET           reduce using rule 35 (const -> INF .)
    GREATER         reduce using rule 35 (const -> INF .)
    LESS            reduce using rule 35 (const -> INF .)
    EQUAL           reduce using rule 35 (const -> INF .)
    NL              reduce using rule 35 (const -> INF .)
    COMMA           reduce using rule 35 (const -> INF .)
    CBRACKET        reduce using rule 35 (const -> INF .)
    CSQBRACKET      reduce using rule 35 (const -> INF .)


state 54

    (36) const -> MINUS_INF .

    DO              reduce using rule 36 (const -> MINUS_INF .)
    PLUS            reduce using rule 36 (const -> MINUS_INF .)
    MINUS           reduce using rule 36 (const -> MINUS_INF .)
    CARET           reduce using rule 36 (const -> MINUS_INF .)
    GREATER         reduce using rule 36 (const -> MINUS_INF .)
    LESS            reduce using rule 36 (const -> MINUS_INF .)
    EQUAL           reduce using rule 36 (const -> MINUS_INF .)
    NL              reduce using rule 36 (const -> MINUS_INF .)
    COMMA           reduce using rule 36 (const -> MINUS_INF .)
    CBRACKET        reduce using rule 36 (const -> MINUS_INF .)
    CSQBRACKET      reduce using rule 36 (const -> MINUS_INF .)


state 55

    (37) const -> NAN .

    DO              reduce using rule 37 (const -> NAN .)
    PLUS            reduce using rule 37 (const -> NAN .)
    MINUS           reduce using rule 37 (const -> NAN .)
    CARET           reduce using rule 37 (const -> NAN .)
    GREATER         reduce using rule 37 (const -> NAN .)
    LESS            reduce using rule 37 (const -> NAN .)
    EQUAL           reduce using rule 37 (const -> NAN .)
    NL              reduce using rule 37 (const -> NAN .)
    COMMA           reduce using rule 37 (const -> NAN .)
    CBRACKET        reduce using rule 37 (const -> NAN .)
    CSQBRACKET      reduce using rule 37 (const -> NAN .)


state 56

    (38) const -> TRUE .

    DO              reduce using rule 38 (const -> TRUE .)
    PLUS            reduce using rule 38 (const -> TRUE .)
    MINUS           reduce using rule 38 (const -> TRUE .)
    CARET           reduce using rule 38 (const -> TRUE .)
    GREATER         reduce using rule 38 (const -> TRUE .)
    LESS            reduce using rule 38 (const -> TRUE .)
    EQUAL           reduce using rule 38 (const -> TRUE .)
    NL              reduce using rule 38 (const -> TRUE .)
    COMMA           reduce using rule 38 (const -> TRUE .)
    CBRACKET        reduce using rule 38 (const -> TRUE .)
    CSQBRACKET      reduce using rule 38 (const -> TRUE .)


state 57

    (39) const -> FALSE .

    DO              reduce using rule 39 (const -> FALSE .)
    PLUS            reduce using rule 39 (const -> FALSE .)
    MINUS           reduce using rule 39 (const -> FALSE .)
    CARET           reduce using rule 39 (const -> FALSE .)
    GREATER         reduce using rule 39 (const -> FALSE .)
    LESS            reduce using rule 39 (const -> FALSE .)
    EQUAL           reduce using rule 39 (const -> FALSE .)
    NL              reduce using rule 39 (const -> FALSE .)
    COMMA           reduce using rule 39 (const -> FALSE .)
    CBRACKET        reduce using rule 39 (const -> FALSE .)
    CSQBRACKET      reduce using rule 39 (const -> FALSE .)


state 58

    (40) const -> UNDEF .

    DO              reduce using rule 40 (const -> UNDEF .)
    PLUS            reduce using rule 40 (const -> UNDEF .)
    MINUS           reduce using rule 40 (const -> UNDEF .)
    CARET           reduce using rule 40 (const -> UNDEF .)
    GREATER         reduce using rule 40 (const -> UNDEF .)
    LESS            reduce using rule 40 (const -> UNDEF .)
    EQUAL           reduce using rule 40 (const -> UNDEF .)
    NL              reduce using rule 40 (const -> UNDEF .)
    COMMA           reduce using rule 40 (const -> UNDEF .)
    CBRACKET        reduce using rule 40 (const -> UNDEF .)
    CSQBRACKET      reduce using rule 40 (const -> UNDEF .)


state 59

    (41) const -> EMPTY .

    DO              reduce using rule 41 (const -> EMPTY .)
    PLUS            reduce using rule 41 (const -> EMPTY .)
    MINUS           reduce using rule 41 (const -> EMPTY .)
    CARET           reduce using rule 41 (const -> EMPTY .)
    GREATER         reduce using rule 41 (const -> EMPTY .)
    LESS            reduce using rule 41 (const -> EMPTY .)
    EQUAL           reduce using rule 41 (const -> EMPTY .)
    NL              reduce using rule 41 (const -> EMPTY .)
    COMMA           reduce using rule 41 (const -> EMPTY .)
    CBRACKET        reduce using rule 41 (const -> EMPTY .)
    CSQBRACKET      reduce using rule 41 (const -> EMPTY .)


state 60

    (42) const -> WALL .

    DO              reduce using rule 42 (const -> WALL .)
    PLUS            reduce using rule 42 (const -> WALL .)
    MINUS           reduce using rule 42 (const -> WALL .)
    CARET           reduce using rule 42 (const -> WALL .)
    GREATER         reduce using rule 42 (const -> WALL .)
    LESS            reduce using rule 42 (const -> WALL .)
    EQUAL           reduce using rule 42 (const -> WALL .)
    NL              reduce using rule 42 (const -> WALL .)
    COMMA           reduce using rule 42 (const -> WALL .)
    CBRACKET        reduce using rule 42 (const -> WALL .)
    CSQBRACKET      reduce using rule 42 (const -> WALL .)


state 61

    (43) const -> BOX .

    DO              reduce using rule 43 (const -> BOX .)
    PLUS            reduce using rule 43 (const -> BOX .)
    MINUS           reduce using rule 43 (const -> BOX .)
    CARET           reduce using rule 43 (const -> BOX .)
    GREATER         reduce using rule 43 (const -> BOX .)
    LESS            reduce using rule 43 (const -> BOX .)
    EQUAL           reduce using rule 43 (const -> BOX .)
    NL              reduce using rule 43 (const -> BOX .)
    COMMA           reduce using rule 43 (const -> BOX .)
    CBRACKET        reduce using rule 43 (const -> BOX .)
    CSQBRACKET      reduce using rule 43 (const -> BOX .)


state 62

    (44) const -> EXIT .

    DO              reduce using rule 44 (const -> EXIT .)
    PLUS            reduce using rule 44 (const -> EXIT .)
    MINUS           reduce using rule 44 (const -> EXIT .)
    CARET           reduce using rule 44 (const -> EXIT .)
    GREATER         reduce using rule 44 (const -> EXIT .)
    LESS            reduce using rule 44 (const -> EXIT .)
    EQUAL           reduce using rule 44 (const -> EXIT .)
    NL              reduce using rule 44 (const -> EXIT .)
    COMMA           reduce using rule 44 (const -> EXIT .)
    CBRACKET        reduce using rule 44 (const -> EXIT .)
    CSQBRACKET      reduce using rule 44 (const -> EXIT .)


state 63

    (45) const -> DECIMAL .

    DO              reduce using rule 45 (const -> DECIMAL .)
    PLUS            reduce using rule 45 (const -> DECIMAL .)
    MINUS           reduce using rule 45 (const -> DECIMAL .)
    CARET           reduce using rule 45 (const -> DECIMAL .)
    GREATER         reduce using rule 45 (const -> DECIMAL .)
    LESS            reduce using rule 45 (const -> DECIMAL .)
    EQUAL           reduce using rule 45 (const -> DECIMAL .)
    NL              reduce using rule 45 (const -> DECIMAL .)
    COMMA           reduce using rule 45 (const -> DECIMAL .)
    CBRACKET        reduce using rule 45 (const -> DECIMAL .)
    CSQBRACKET      reduce using rule 45 (const -> DECIMAL .)


state 64

    (46) const -> HEXADECIMAL .

    DO              reduce using rule 46 (const -> HEXADECIMAL .)
    PLUS            reduce using rule 46 (const -> HEXADECIMAL .)
    MINUS           reduce using rule 46 (const -> HEXADECIMAL .)
    CARET           reduce using rule 46 (const -> HEXADECIMAL .)
    GREATER         reduce using rule 46 (const -> HEXADECIMAL .)
    LESS            reduce using rule 46 (const -> HEXADECIMAL .)
    EQUAL           reduce using rule 46 (const -> HEXADECIMAL .)
    NL              reduce using rule 46 (const -> HEXADECIMAL .)
    COMMA           reduce using rule 46 (const -> HEXADECIMAL .)
    CBRACKET        reduce using rule 46 (const -> HEXADECIMAL .)
    CSQBRACKET      reduce using rule 46 (const -> HEXADECIMAL .)


state 65

    (49) al_expression -> MINUS . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . al_expression
    (33) expression -> . function_call
    (34) expression -> . operator
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT
    (35) const -> . INF
    (36) const -> . MINUS_INF
    (37) const -> . NAN
    (38) const -> . TRUE
    (39) const -> . FALSE
    (40) const -> . UNDEF
    (41) const -> . EMPTY
    (42) const -> . WALL
    (43) const -> . BOX
    (44) const -> . EXIT
    (45) const -> . DECIMAL
    (46) const -> . HEXADECIMAL
    (47) al_expression -> . expression PLUS expression
    (48) al_expression -> . expression MINUS expression
    (49) al_expression -> . MINUS expression
    (50) al_expression -> . SHARP expression
    (51) al_expression -> . expression CARET expression
    (52) al_expression -> . expression GREATER expression
    (53) al_expression -> . expression LESS expression
    (54) al_expression -> . expression EQUAL expression
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable

    IDENT           shift and go to state 52
    INF             shift and go to state 53
    MINUS_INF       shift and go to state 54
    NAN             shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    UNDEF           shift and go to state 58
    EMPTY           shift and go to state 59
    WALL            shift and go to state 60
    BOX             shift and go to state 61
    EXIT            shift and go to state 62
    DECIMAL         shift and go to state 63
    HEXADECIMAL     shift and go to state 64
    MINUS           shift and go to state 65
    SHARP           shift and go to state 66
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25

    expression                     shift and go to state 91
    variable                       shift and go to state 47
    const                          shift and go to state 48
    al_expression                  shift and go to state 49
    function_call                  shift and go to state 50
    operator                       shift and go to state 51

state 66

    (50) al_expression -> SHARP . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . al_expression
    (33) expression -> . function_call
    (34) expression -> . operator
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT
    (35) const -> . INF
    (36) const -> . MINUS_INF
    (37) const -> . NAN
    (38) const -> . TRUE
    (39) const -> . FALSE
    (40) const -> . UNDEF
    (41) const -> . EMPTY
    (42) const -> . WALL
    (43) const -> . BOX
    (44) const -> . EXIT
    (45) const -> . DECIMAL
    (46) const -> . HEXADECIMAL
    (47) al_expression -> . expression PLUS expression
    (48) al_expression -> . expression MINUS expression
    (49) al_expression -> . MINUS expression
    (50) al_expression -> . SHARP expression
    (51) al_expression -> . expression CARET expression
    (52) al_expression -> . expression GREATER expression
    (53) al_expression -> . expression LESS expression
    (54) al_expression -> . expression EQUAL expression
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable

    IDENT           shift and go to state 52
    INF             shift and go to state 53
    MINUS_INF       shift and go to state 54
    NAN             shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    UNDEF           shift and go to state 58
    EMPTY           shift and go to state 59
    WALL            shift and go to state 60
    BOX             shift and go to state 61
    EXIT            shift and go to state 62
    DECIMAL         shift and go to state 63
    HEXADECIMAL     shift and go to state 64
    MINUS           shift and go to state 65
    SHARP           shift and go to state 66
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25

    expression                     shift and go to state 92
    variable                       shift and go to state 47
    const                          shift and go to state 48
    al_expression                  shift and go to state 49
    function_call                  shift and go to state 50
    operator                       shift and go to state 51

state 67

    (67) if -> IF expression . DO stmt_list DONE
    (68) if -> IF expression . DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (69) if -> IF expression . DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> IF expression . DO stmt_list DONE NL ELUND DO stmt_list DONE
    (47) al_expression -> expression . PLUS expression
    (48) al_expression -> expression . MINUS expression
    (51) al_expression -> expression . CARET expression
    (52) al_expression -> expression . GREATER expression
    (53) al_expression -> expression . LESS expression
    (54) al_expression -> expression . EQUAL expression

    DO              shift and go to state 93
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    CARET           shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    EQUAL           shift and go to state 89


state 68

    (56) operator -> FORWARD expression .
    (47) al_expression -> expression . PLUS expression
    (48) al_expression -> expression . MINUS expression
    (51) al_expression -> expression . CARET expression
    (52) al_expression -> expression . GREATER expression
    (53) al_expression -> expression . LESS expression
    (54) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    NL              reduce using rule 56 (operator -> FORWARD expression .)
    DO              reduce using rule 56 (operator -> FORWARD expression .)
    COMMA           reduce using rule 56 (operator -> FORWARD expression .)
    CBRACKET        reduce using rule 56 (operator -> FORWARD expression .)
    CSQBRACKET      reduce using rule 56 (operator -> FORWARD expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    CARET           shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    EQUAL           shift and go to state 89

  ! PLUS            [ reduce using rule 56 (operator -> FORWARD expression .) ]
  ! MINUS           [ reduce using rule 56 (operator -> FORWARD expression .) ]
  ! CARET           [ reduce using rule 56 (operator -> FORWARD expression .) ]
  ! GREATER         [ reduce using rule 56 (operator -> FORWARD expression .) ]
  ! LESS            [ reduce using rule 56 (operator -> FORWARD expression .) ]
  ! EQUAL           [ reduce using rule 56 (operator -> FORWARD expression .) ]


state 69

    (57) operator -> BACKWARD expression .
    (47) al_expression -> expression . PLUS expression
    (48) al_expression -> expression . MINUS expression
    (51) al_expression -> expression . CARET expression
    (52) al_expression -> expression . GREATER expression
    (53) al_expression -> expression . LESS expression
    (54) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    NL              reduce using rule 57 (operator -> BACKWARD expression .)
    DO              reduce using rule 57 (operator -> BACKWARD expression .)
    COMMA           reduce using rule 57 (operator -> BACKWARD expression .)
    CBRACKET        reduce using rule 57 (operator -> BACKWARD expression .)
    CSQBRACKET      reduce using rule 57 (operator -> BACKWARD expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    CARET           shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    EQUAL           shift and go to state 89

  ! PLUS            [ reduce using rule 57 (operator -> BACKWARD expression .) ]
  ! MINUS           [ reduce using rule 57 (operator -> BACKWARD expression .) ]
  ! CARET           [ reduce using rule 57 (operator -> BACKWARD expression .) ]
  ! GREATER         [ reduce using rule 57 (operator -> BACKWARD expression .) ]
  ! LESS            [ reduce using rule 57 (operator -> BACKWARD expression .) ]
  ! EQUAL           [ reduce using rule 57 (operator -> BACKWARD expression .) ]


state 70

    (60) operator -> LOAD expression .
    (47) al_expression -> expression . PLUS expression
    (48) al_expression -> expression . MINUS expression
    (51) al_expression -> expression . CARET expression
    (52) al_expression -> expression . GREATER expression
    (53) al_expression -> expression . LESS expression
    (54) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    NL              reduce using rule 60 (operator -> LOAD expression .)
    DO              reduce using rule 60 (operator -> LOAD expression .)
    COMMA           reduce using rule 60 (operator -> LOAD expression .)
    CBRACKET        reduce using rule 60 (operator -> LOAD expression .)
    CSQBRACKET      reduce using rule 60 (operator -> LOAD expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    CARET           shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    EQUAL           shift and go to state 89

  ! PLUS            [ reduce using rule 60 (operator -> LOAD expression .) ]
  ! MINUS           [ reduce using rule 60 (operator -> LOAD expression .) ]
  ! CARET           [ reduce using rule 60 (operator -> LOAD expression .) ]
  ! GREATER         [ reduce using rule 60 (operator -> LOAD expression .) ]
  ! LESS            [ reduce using rule 60 (operator -> LOAD expression .) ]
  ! EQUAL           [ reduce using rule 60 (operator -> LOAD expression .) ]


state 71

    (61) operator -> DROP expression .
    (47) al_expression -> expression . PLUS expression
    (48) al_expression -> expression . MINUS expression
    (51) al_expression -> expression . CARET expression
    (52) al_expression -> expression . GREATER expression
    (53) al_expression -> expression . LESS expression
    (54) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    NL              reduce using rule 61 (operator -> DROP expression .)
    DO              reduce using rule 61 (operator -> DROP expression .)
    COMMA           reduce using rule 61 (operator -> DROP expression .)
    CBRACKET        reduce using rule 61 (operator -> DROP expression .)
    CSQBRACKET      reduce using rule 61 (operator -> DROP expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    CARET           shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    EQUAL           shift and go to state 89

  ! PLUS            [ reduce using rule 61 (operator -> DROP expression .) ]
  ! MINUS           [ reduce using rule 61 (operator -> DROP expression .) ]
  ! CARET           [ reduce using rule 61 (operator -> DROP expression .) ]
  ! GREATER         [ reduce using rule 61 (operator -> DROP expression .) ]
  ! LESS            [ reduce using rule 61 (operator -> DROP expression .) ]
  ! EQUAL           [ reduce using rule 61 (operator -> DROP expression .) ]


state 72

    (64) operator -> SIZEOF variable .

    NL              reduce using rule 64 (operator -> SIZEOF variable .)
    DO              reduce using rule 64 (operator -> SIZEOF variable .)
    PLUS            reduce using rule 64 (operator -> SIZEOF variable .)
    MINUS           reduce using rule 64 (operator -> SIZEOF variable .)
    CARET           reduce using rule 64 (operator -> SIZEOF variable .)
    GREATER         reduce using rule 64 (operator -> SIZEOF variable .)
    LESS            reduce using rule 64 (operator -> SIZEOF variable .)
    EQUAL           reduce using rule 64 (operator -> SIZEOF variable .)
    COMMA           reduce using rule 64 (operator -> SIZEOF variable .)
    CBRACKET        reduce using rule 64 (operator -> SIZEOF variable .)
    CSQBRACKET      reduce using rule 64 (operator -> SIZEOF variable .)


state 73

    (28) variable -> IDENT . OBRACKET expression CBRACKET
    (29) variable -> IDENT .

    OBRACKET        shift and go to state 78
    NL              reduce using rule 29 (variable -> IDENT .)
    DO              reduce using rule 29 (variable -> IDENT .)
    PLUS            reduce using rule 29 (variable -> IDENT .)
    MINUS           reduce using rule 29 (variable -> IDENT .)
    CARET           reduce using rule 29 (variable -> IDENT .)
    GREATER         reduce using rule 29 (variable -> IDENT .)
    LESS            reduce using rule 29 (variable -> IDENT .)
    EQUAL           reduce using rule 29 (variable -> IDENT .)
    COMMA           reduce using rule 29 (variable -> IDENT .)
    CBRACKET        reduce using rule 29 (variable -> IDENT .)
    CSQBRACKET      reduce using rule 29 (variable -> IDENT .)


state 74

    (71) function -> FUNCTION OBRACKET . IDENT CBRACKET DO stmt_list DONE

    IDENT           shift and go to state 94


state 75

    (72) function -> FUNCTION IDENT . OBRACKET IDENT CBRACKET DO NL stmt_list DONE

    OBRACKET        shift and go to state 95


state 76

    (55) function_call -> IDENT OBRACKET . variable CBRACKET
    (28) variable -> IDENT OBRACKET . expression CBRACKET
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . al_expression
    (33) expression -> . function_call
    (34) expression -> . operator
    (35) const -> . INF
    (36) const -> . MINUS_INF
    (37) const -> . NAN
    (38) const -> . TRUE
    (39) const -> . FALSE
    (40) const -> . UNDEF
    (41) const -> . EMPTY
    (42) const -> . WALL
    (43) const -> . BOX
    (44) const -> . EXIT
    (45) const -> . DECIMAL
    (46) const -> . HEXADECIMAL
    (47) al_expression -> . expression PLUS expression
    (48) al_expression -> . expression MINUS expression
    (49) al_expression -> . MINUS expression
    (50) al_expression -> . SHARP expression
    (51) al_expression -> . expression CARET expression
    (52) al_expression -> . expression GREATER expression
    (53) al_expression -> . expression LESS expression
    (54) al_expression -> . expression EQUAL expression
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable

    IDENT           shift and go to state 52
    INF             shift and go to state 53
    MINUS_INF       shift and go to state 54
    NAN             shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    UNDEF           shift and go to state 58
    EMPTY           shift and go to state 59
    WALL            shift and go to state 60
    BOX             shift and go to state 61
    EXIT            shift and go to state 62
    DECIMAL         shift and go to state 63
    HEXADECIMAL     shift and go to state 64
    MINUS           shift and go to state 65
    SHARP           shift and go to state 66
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25

    variable                       shift and go to state 96
    expression                     shift and go to state 97
    const                          shift and go to state 48
    al_expression                  shift and go to state 49
    function_call                  shift and go to state 50
    operator                       shift and go to state 51

state 77

    (19) vars_list -> IDENT COMMA . vars_list
    (19) vars_list -> . IDENT COMMA vars_list
    (20) vars_list -> . assignment COMMA vars_list
    (21) vars_list -> . IDENT
    (22) vars_list -> . assignment
    (23) assignment -> . variable ASSIGN expression
    (24) assignment -> . variable ASSIGN array
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    IDENT           shift and go to state 43

    vars_list                      shift and go to state 98
    assignment                     shift and go to state 44
    variable                       shift and go to state 14

state 78

    (28) variable -> IDENT OBRACKET . expression CBRACKET
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . al_expression
    (33) expression -> . function_call
    (34) expression -> . operator
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT
    (35) const -> . INF
    (36) const -> . MINUS_INF
    (37) const -> . NAN
    (38) const -> . TRUE
    (39) const -> . FALSE
    (40) const -> . UNDEF
    (41) const -> . EMPTY
    (42) const -> . WALL
    (43) const -> . BOX
    (44) const -> . EXIT
    (45) const -> . DECIMAL
    (46) const -> . HEXADECIMAL
    (47) al_expression -> . expression PLUS expression
    (48) al_expression -> . expression MINUS expression
    (49) al_expression -> . MINUS expression
    (50) al_expression -> . SHARP expression
    (51) al_expression -> . expression CARET expression
    (52) al_expression -> . expression GREATER expression
    (53) al_expression -> . expression LESS expression
    (54) al_expression -> . expression EQUAL expression
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable

    IDENT           shift and go to state 52
    INF             shift and go to state 53
    MINUS_INF       shift and go to state 54
    NAN             shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    UNDEF           shift and go to state 58
    EMPTY           shift and go to state 59
    WALL            shift and go to state 60
    BOX             shift and go to state 61
    EXIT            shift and go to state 62
    DECIMAL         shift and go to state 63
    HEXADECIMAL     shift and go to state 64
    MINUS           shift and go to state 65
    SHARP           shift and go to state 66
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25

    expression                     shift and go to state 97
    variable                       shift and go to state 47
    const                          shift and go to state 48
    al_expression                  shift and go to state 49
    function_call                  shift and go to state 50
    operator                       shift and go to state 51

state 79

    (20) vars_list -> assignment COMMA . vars_list
    (19) vars_list -> . IDENT COMMA vars_list
    (20) vars_list -> . assignment COMMA vars_list
    (21) vars_list -> . IDENT
    (22) vars_list -> . assignment
    (23) assignment -> . variable ASSIGN expression
    (24) assignment -> . variable ASSIGN array
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    IDENT           shift and go to state 43

    assignment                     shift and go to state 44
    vars_list                      shift and go to state 99
    variable                       shift and go to state 14

state 80

    (23) assignment -> variable ASSIGN expression .
    (47) al_expression -> expression . PLUS expression
    (48) al_expression -> expression . MINUS expression
    (51) al_expression -> expression . CARET expression
    (52) al_expression -> expression . GREATER expression
    (53) al_expression -> expression . LESS expression
    (54) al_expression -> expression . EQUAL expression

    NL              reduce using rule 23 (assignment -> variable ASSIGN expression .)
    COMMA           reduce using rule 23 (assignment -> variable ASSIGN expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    CARET           shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    EQUAL           shift and go to state 89


state 81

    (24) assignment -> variable ASSIGN array .

    NL              reduce using rule 24 (assignment -> variable ASSIGN array .)
    COMMA           reduce using rule 24 (assignment -> variable ASSIGN array .)


state 82

    (25) array -> OSQBRACKET . expr_list CSQBRACKET
    (26) expr_list -> . expr_list COMMA expression
    (27) expr_list -> . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . al_expression
    (33) expression -> . function_call
    (34) expression -> . operator
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT
    (35) const -> . INF
    (36) const -> . MINUS_INF
    (37) const -> . NAN
    (38) const -> . TRUE
    (39) const -> . FALSE
    (40) const -> . UNDEF
    (41) const -> . EMPTY
    (42) const -> . WALL
    (43) const -> . BOX
    (44) const -> . EXIT
    (45) const -> . DECIMAL
    (46) const -> . HEXADECIMAL
    (47) al_expression -> . expression PLUS expression
    (48) al_expression -> . expression MINUS expression
    (49) al_expression -> . MINUS expression
    (50) al_expression -> . SHARP expression
    (51) al_expression -> . expression CARET expression
    (52) al_expression -> . expression GREATER expression
    (53) al_expression -> . expression LESS expression
    (54) al_expression -> . expression EQUAL expression
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable

    IDENT           shift and go to state 52
    INF             shift and go to state 53
    MINUS_INF       shift and go to state 54
    NAN             shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    UNDEF           shift and go to state 58
    EMPTY           shift and go to state 59
    WALL            shift and go to state 60
    BOX             shift and go to state 61
    EXIT            shift and go to state 62
    DECIMAL         shift and go to state 63
    HEXADECIMAL     shift and go to state 64
    MINUS           shift and go to state 65
    SHARP           shift and go to state 66
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25

    expr_list                      shift and go to state 100
    expression                     shift and go to state 101
    variable                       shift and go to state 47
    const                          shift and go to state 48
    al_expression                  shift and go to state 49
    function_call                  shift and go to state 50
    operator                       shift and go to state 51

state 83

    (65) while -> WHILE expression DO . stmt_list DONE
    (66) while -> WHILE expression DO . stmt_list FINISH stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (24) assignment -> . variable ASSIGN array
    (65) while -> . WHILE expression DO stmt_list DONE
    (66) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (67) if -> . IF expression DO stmt_list DONE
    (68) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (69) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable
    (71) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (72) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25
    FUNCTION        shift and go to state 26
    IDENT           shift and go to state 27
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 28
    CELL            shift and go to state 29
    BOOL            shift and go to state 30
    VAR             shift and go to state 31

    stmt_list                      shift and go to state 102
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 84

    (47) al_expression -> expression PLUS . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . al_expression
    (33) expression -> . function_call
    (34) expression -> . operator
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT
    (35) const -> . INF
    (36) const -> . MINUS_INF
    (37) const -> . NAN
    (38) const -> . TRUE
    (39) const -> . FALSE
    (40) const -> . UNDEF
    (41) const -> . EMPTY
    (42) const -> . WALL
    (43) const -> . BOX
    (44) const -> . EXIT
    (45) const -> . DECIMAL
    (46) const -> . HEXADECIMAL
    (47) al_expression -> . expression PLUS expression
    (48) al_expression -> . expression MINUS expression
    (49) al_expression -> . MINUS expression
    (50) al_expression -> . SHARP expression
    (51) al_expression -> . expression CARET expression
    (52) al_expression -> . expression GREATER expression
    (53) al_expression -> . expression LESS expression
    (54) al_expression -> . expression EQUAL expression
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable

    IDENT           shift and go to state 52
    INF             shift and go to state 53
    MINUS_INF       shift and go to state 54
    NAN             shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    UNDEF           shift and go to state 58
    EMPTY           shift and go to state 59
    WALL            shift and go to state 60
    BOX             shift and go to state 61
    EXIT            shift and go to state 62
    DECIMAL         shift and go to state 63
    HEXADECIMAL     shift and go to state 64
    MINUS           shift and go to state 65
    SHARP           shift and go to state 66
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25

    expression                     shift and go to state 103
    variable                       shift and go to state 47
    const                          shift and go to state 48
    al_expression                  shift and go to state 49
    function_call                  shift and go to state 50
    operator                       shift and go to state 51

state 85

    (48) al_expression -> expression MINUS . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . al_expression
    (33) expression -> . function_call
    (34) expression -> . operator
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT
    (35) const -> . INF
    (36) const -> . MINUS_INF
    (37) const -> . NAN
    (38) const -> . TRUE
    (39) const -> . FALSE
    (40) const -> . UNDEF
    (41) const -> . EMPTY
    (42) const -> . WALL
    (43) const -> . BOX
    (44) const -> . EXIT
    (45) const -> . DECIMAL
    (46) const -> . HEXADECIMAL
    (47) al_expression -> . expression PLUS expression
    (48) al_expression -> . expression MINUS expression
    (49) al_expression -> . MINUS expression
    (50) al_expression -> . SHARP expression
    (51) al_expression -> . expression CARET expression
    (52) al_expression -> . expression GREATER expression
    (53) al_expression -> . expression LESS expression
    (54) al_expression -> . expression EQUAL expression
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable

    IDENT           shift and go to state 52
    INF             shift and go to state 53
    MINUS_INF       shift and go to state 54
    NAN             shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    UNDEF           shift and go to state 58
    EMPTY           shift and go to state 59
    WALL            shift and go to state 60
    BOX             shift and go to state 61
    EXIT            shift and go to state 62
    DECIMAL         shift and go to state 63
    HEXADECIMAL     shift and go to state 64
    MINUS           shift and go to state 65
    SHARP           shift and go to state 66
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25

    expression                     shift and go to state 104
    variable                       shift and go to state 47
    const                          shift and go to state 48
    al_expression                  shift and go to state 49
    function_call                  shift and go to state 50
    operator                       shift and go to state 51

state 86

    (51) al_expression -> expression CARET . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . al_expression
    (33) expression -> . function_call
    (34) expression -> . operator
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT
    (35) const -> . INF
    (36) const -> . MINUS_INF
    (37) const -> . NAN
    (38) const -> . TRUE
    (39) const -> . FALSE
    (40) const -> . UNDEF
    (41) const -> . EMPTY
    (42) const -> . WALL
    (43) const -> . BOX
    (44) const -> . EXIT
    (45) const -> . DECIMAL
    (46) const -> . HEXADECIMAL
    (47) al_expression -> . expression PLUS expression
    (48) al_expression -> . expression MINUS expression
    (49) al_expression -> . MINUS expression
    (50) al_expression -> . SHARP expression
    (51) al_expression -> . expression CARET expression
    (52) al_expression -> . expression GREATER expression
    (53) al_expression -> . expression LESS expression
    (54) al_expression -> . expression EQUAL expression
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable

    IDENT           shift and go to state 52
    INF             shift and go to state 53
    MINUS_INF       shift and go to state 54
    NAN             shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    UNDEF           shift and go to state 58
    EMPTY           shift and go to state 59
    WALL            shift and go to state 60
    BOX             shift and go to state 61
    EXIT            shift and go to state 62
    DECIMAL         shift and go to state 63
    HEXADECIMAL     shift and go to state 64
    MINUS           shift and go to state 65
    SHARP           shift and go to state 66
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25

    expression                     shift and go to state 105
    variable                       shift and go to state 47
    const                          shift and go to state 48
    al_expression                  shift and go to state 49
    function_call                  shift and go to state 50
    operator                       shift and go to state 51

state 87

    (52) al_expression -> expression GREATER . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . al_expression
    (33) expression -> . function_call
    (34) expression -> . operator
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT
    (35) const -> . INF
    (36) const -> . MINUS_INF
    (37) const -> . NAN
    (38) const -> . TRUE
    (39) const -> . FALSE
    (40) const -> . UNDEF
    (41) const -> . EMPTY
    (42) const -> . WALL
    (43) const -> . BOX
    (44) const -> . EXIT
    (45) const -> . DECIMAL
    (46) const -> . HEXADECIMAL
    (47) al_expression -> . expression PLUS expression
    (48) al_expression -> . expression MINUS expression
    (49) al_expression -> . MINUS expression
    (50) al_expression -> . SHARP expression
    (51) al_expression -> . expression CARET expression
    (52) al_expression -> . expression GREATER expression
    (53) al_expression -> . expression LESS expression
    (54) al_expression -> . expression EQUAL expression
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable

    IDENT           shift and go to state 52
    INF             shift and go to state 53
    MINUS_INF       shift and go to state 54
    NAN             shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    UNDEF           shift and go to state 58
    EMPTY           shift and go to state 59
    WALL            shift and go to state 60
    BOX             shift and go to state 61
    EXIT            shift and go to state 62
    DECIMAL         shift and go to state 63
    HEXADECIMAL     shift and go to state 64
    MINUS           shift and go to state 65
    SHARP           shift and go to state 66
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25

    expression                     shift and go to state 106
    variable                       shift and go to state 47
    const                          shift and go to state 48
    al_expression                  shift and go to state 49
    function_call                  shift and go to state 50
    operator                       shift and go to state 51

state 88

    (53) al_expression -> expression LESS . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . al_expression
    (33) expression -> . function_call
    (34) expression -> . operator
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT
    (35) const -> . INF
    (36) const -> . MINUS_INF
    (37) const -> . NAN
    (38) const -> . TRUE
    (39) const -> . FALSE
    (40) const -> . UNDEF
    (41) const -> . EMPTY
    (42) const -> . WALL
    (43) const -> . BOX
    (44) const -> . EXIT
    (45) const -> . DECIMAL
    (46) const -> . HEXADECIMAL
    (47) al_expression -> . expression PLUS expression
    (48) al_expression -> . expression MINUS expression
    (49) al_expression -> . MINUS expression
    (50) al_expression -> . SHARP expression
    (51) al_expression -> . expression CARET expression
    (52) al_expression -> . expression GREATER expression
    (53) al_expression -> . expression LESS expression
    (54) al_expression -> . expression EQUAL expression
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable

    IDENT           shift and go to state 52
    INF             shift and go to state 53
    MINUS_INF       shift and go to state 54
    NAN             shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    UNDEF           shift and go to state 58
    EMPTY           shift and go to state 59
    WALL            shift and go to state 60
    BOX             shift and go to state 61
    EXIT            shift and go to state 62
    DECIMAL         shift and go to state 63
    HEXADECIMAL     shift and go to state 64
    MINUS           shift and go to state 65
    SHARP           shift and go to state 66
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25

    expression                     shift and go to state 107
    variable                       shift and go to state 47
    const                          shift and go to state 48
    al_expression                  shift and go to state 49
    function_call                  shift and go to state 50
    operator                       shift and go to state 51

state 89

    (54) al_expression -> expression EQUAL . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . al_expression
    (33) expression -> . function_call
    (34) expression -> . operator
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT
    (35) const -> . INF
    (36) const -> . MINUS_INF
    (37) const -> . NAN
    (38) const -> . TRUE
    (39) const -> . FALSE
    (40) const -> . UNDEF
    (41) const -> . EMPTY
    (42) const -> . WALL
    (43) const -> . BOX
    (44) const -> . EXIT
    (45) const -> . DECIMAL
    (46) const -> . HEXADECIMAL
    (47) al_expression -> . expression PLUS expression
    (48) al_expression -> . expression MINUS expression
    (49) al_expression -> . MINUS expression
    (50) al_expression -> . SHARP expression
    (51) al_expression -> . expression CARET expression
    (52) al_expression -> . expression GREATER expression
    (53) al_expression -> . expression LESS expression
    (54) al_expression -> . expression EQUAL expression
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable

    IDENT           shift and go to state 52
    INF             shift and go to state 53
    MINUS_INF       shift and go to state 54
    NAN             shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    UNDEF           shift and go to state 58
    EMPTY           shift and go to state 59
    WALL            shift and go to state 60
    BOX             shift and go to state 61
    EXIT            shift and go to state 62
    DECIMAL         shift and go to state 63
    HEXADECIMAL     shift and go to state 64
    MINUS           shift and go to state 65
    SHARP           shift and go to state 66
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25

    expression                     shift and go to state 108
    variable                       shift and go to state 47
    const                          shift and go to state 48
    al_expression                  shift and go to state 49
    function_call                  shift and go to state 50
    operator                       shift and go to state 51

state 90

    (28) variable -> IDENT OBRACKET . expression CBRACKET
    (55) function_call -> IDENT OBRACKET . variable CBRACKET
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . al_expression
    (33) expression -> . function_call
    (34) expression -> . operator
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT
    (35) const -> . INF
    (36) const -> . MINUS_INF
    (37) const -> . NAN
    (38) const -> . TRUE
    (39) const -> . FALSE
    (40) const -> . UNDEF
    (41) const -> . EMPTY
    (42) const -> . WALL
    (43) const -> . BOX
    (44) const -> . EXIT
    (45) const -> . DECIMAL
    (46) const -> . HEXADECIMAL
    (47) al_expression -> . expression PLUS expression
    (48) al_expression -> . expression MINUS expression
    (49) al_expression -> . MINUS expression
    (50) al_expression -> . SHARP expression
    (51) al_expression -> . expression CARET expression
    (52) al_expression -> . expression GREATER expression
    (53) al_expression -> . expression LESS expression
    (54) al_expression -> . expression EQUAL expression
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable

    IDENT           shift and go to state 52
    INF             shift and go to state 53
    MINUS_INF       shift and go to state 54
    NAN             shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    UNDEF           shift and go to state 58
    EMPTY           shift and go to state 59
    WALL            shift and go to state 60
    BOX             shift and go to state 61
    EXIT            shift and go to state 62
    DECIMAL         shift and go to state 63
    HEXADECIMAL     shift and go to state 64
    MINUS           shift and go to state 65
    SHARP           shift and go to state 66
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25

    expression                     shift and go to state 97
    variable                       shift and go to state 96
    const                          shift and go to state 48
    al_expression                  shift and go to state 49
    function_call                  shift and go to state 50
    operator                       shift and go to state 51

state 91

    (49) al_expression -> MINUS expression .
    (47) al_expression -> expression . PLUS expression
    (48) al_expression -> expression . MINUS expression
    (51) al_expression -> expression . CARET expression
    (52) al_expression -> expression . GREATER expression
    (53) al_expression -> expression . LESS expression
    (54) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 49 (al_expression -> MINUS expression .)
    NL              reduce using rule 49 (al_expression -> MINUS expression .)
    COMMA           reduce using rule 49 (al_expression -> MINUS expression .)
    CBRACKET        reduce using rule 49 (al_expression -> MINUS expression .)
    CSQBRACKET      reduce using rule 49 (al_expression -> MINUS expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    CARET           shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    EQUAL           shift and go to state 89

  ! PLUS            [ reduce using rule 49 (al_expression -> MINUS expression .) ]
  ! MINUS           [ reduce using rule 49 (al_expression -> MINUS expression .) ]
  ! CARET           [ reduce using rule 49 (al_expression -> MINUS expression .) ]
  ! GREATER         [ reduce using rule 49 (al_expression -> MINUS expression .) ]
  ! LESS            [ reduce using rule 49 (al_expression -> MINUS expression .) ]
  ! EQUAL           [ reduce using rule 49 (al_expression -> MINUS expression .) ]


state 92

    (50) al_expression -> SHARP expression .
    (47) al_expression -> expression . PLUS expression
    (48) al_expression -> expression . MINUS expression
    (51) al_expression -> expression . CARET expression
    (52) al_expression -> expression . GREATER expression
    (53) al_expression -> expression . LESS expression
    (54) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 50 (al_expression -> SHARP expression .)
    NL              reduce using rule 50 (al_expression -> SHARP expression .)
    COMMA           reduce using rule 50 (al_expression -> SHARP expression .)
    CBRACKET        reduce using rule 50 (al_expression -> SHARP expression .)
    CSQBRACKET      reduce using rule 50 (al_expression -> SHARP expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    CARET           shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    EQUAL           shift and go to state 89

  ! PLUS            [ reduce using rule 50 (al_expression -> SHARP expression .) ]
  ! MINUS           [ reduce using rule 50 (al_expression -> SHARP expression .) ]
  ! CARET           [ reduce using rule 50 (al_expression -> SHARP expression .) ]
  ! GREATER         [ reduce using rule 50 (al_expression -> SHARP expression .) ]
  ! LESS            [ reduce using rule 50 (al_expression -> SHARP expression .) ]
  ! EQUAL           [ reduce using rule 50 (al_expression -> SHARP expression .) ]


state 93

    (67) if -> IF expression DO . stmt_list DONE
    (68) if -> IF expression DO . stmt_list DONE NL ELDEF DO stmt_list DONE
    (69) if -> IF expression DO . stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> IF expression DO . stmt_list DONE NL ELUND DO stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (24) assignment -> . variable ASSIGN array
    (65) while -> . WHILE expression DO stmt_list DONE
    (66) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (67) if -> . IF expression DO stmt_list DONE
    (68) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (69) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable
    (71) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (72) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25
    FUNCTION        shift and go to state 26
    IDENT           shift and go to state 27
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 28
    CELL            shift and go to state 29
    BOOL            shift and go to state 30
    VAR             shift and go to state 31

    stmt_list                      shift and go to state 109
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 94

    (71) function -> FUNCTION OBRACKET IDENT . CBRACKET DO stmt_list DONE

    CBRACKET        shift and go to state 110


state 95

    (72) function -> FUNCTION IDENT OBRACKET . IDENT CBRACKET DO NL stmt_list DONE

    IDENT           shift and go to state 111


state 96

    (55) function_call -> IDENT OBRACKET variable . CBRACKET
    (30) expression -> variable .

  ! shift/reduce conflict for CBRACKET resolved as shift
    CBRACKET        shift and go to state 112
    PLUS            reduce using rule 30 (expression -> variable .)
    MINUS           reduce using rule 30 (expression -> variable .)
    CARET           reduce using rule 30 (expression -> variable .)
    GREATER         reduce using rule 30 (expression -> variable .)
    LESS            reduce using rule 30 (expression -> variable .)
    EQUAL           reduce using rule 30 (expression -> variable .)

  ! CBRACKET        [ reduce using rule 30 (expression -> variable .) ]


state 97

    (28) variable -> IDENT OBRACKET expression . CBRACKET
    (47) al_expression -> expression . PLUS expression
    (48) al_expression -> expression . MINUS expression
    (51) al_expression -> expression . CARET expression
    (52) al_expression -> expression . GREATER expression
    (53) al_expression -> expression . LESS expression
    (54) al_expression -> expression . EQUAL expression

    CBRACKET        shift and go to state 113
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    CARET           shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    EQUAL           shift and go to state 89


state 98

    (19) vars_list -> IDENT COMMA vars_list .

    NL              reduce using rule 19 (vars_list -> IDENT COMMA vars_list .)


state 99

    (20) vars_list -> assignment COMMA vars_list .

    NL              reduce using rule 20 (vars_list -> assignment COMMA vars_list .)


state 100

    (25) array -> OSQBRACKET expr_list . CSQBRACKET
    (26) expr_list -> expr_list . COMMA expression

    CSQBRACKET      shift and go to state 114
    COMMA           shift and go to state 115


state 101

    (27) expr_list -> expression .
    (47) al_expression -> expression . PLUS expression
    (48) al_expression -> expression . MINUS expression
    (51) al_expression -> expression . CARET expression
    (52) al_expression -> expression . GREATER expression
    (53) al_expression -> expression . LESS expression
    (54) al_expression -> expression . EQUAL expression

    CSQBRACKET      reduce using rule 27 (expr_list -> expression .)
    COMMA           reduce using rule 27 (expr_list -> expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    CARET           shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    EQUAL           shift and go to state 89


state 102

    (65) while -> WHILE expression DO stmt_list . DONE
    (66) while -> WHILE expression DO stmt_list . FINISH stmt_list DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (24) assignment -> . variable ASSIGN array
    (65) while -> . WHILE expression DO stmt_list DONE
    (66) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (67) if -> . IF expression DO stmt_list DONE
    (68) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (69) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable
    (71) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (72) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    DONE            shift and go to state 116
    FINISH          shift and go to state 117
    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25
    FUNCTION        shift and go to state 26
    IDENT           shift and go to state 27
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 28
    CELL            shift and go to state 29
    BOOL            shift and go to state 30
    VAR             shift and go to state 31

    statement                      shift and go to state 32
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 103

    (47) al_expression -> expression PLUS expression .
    (47) al_expression -> expression . PLUS expression
    (48) al_expression -> expression . MINUS expression
    (51) al_expression -> expression . CARET expression
    (52) al_expression -> expression . GREATER expression
    (53) al_expression -> expression . LESS expression
    (54) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 47 (al_expression -> expression PLUS expression .)
    NL              reduce using rule 47 (al_expression -> expression PLUS expression .)
    COMMA           reduce using rule 47 (al_expression -> expression PLUS expression .)
    CBRACKET        reduce using rule 47 (al_expression -> expression PLUS expression .)
    CSQBRACKET      reduce using rule 47 (al_expression -> expression PLUS expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    CARET           shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    EQUAL           shift and go to state 89

  ! PLUS            [ reduce using rule 47 (al_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 47 (al_expression -> expression PLUS expression .) ]
  ! CARET           [ reduce using rule 47 (al_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 47 (al_expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 47 (al_expression -> expression PLUS expression .) ]
  ! EQUAL           [ reduce using rule 47 (al_expression -> expression PLUS expression .) ]


state 104

    (48) al_expression -> expression MINUS expression .
    (47) al_expression -> expression . PLUS expression
    (48) al_expression -> expression . MINUS expression
    (51) al_expression -> expression . CARET expression
    (52) al_expression -> expression . GREATER expression
    (53) al_expression -> expression . LESS expression
    (54) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 48 (al_expression -> expression MINUS expression .)
    NL              reduce using rule 48 (al_expression -> expression MINUS expression .)
    COMMA           reduce using rule 48 (al_expression -> expression MINUS expression .)
    CBRACKET        reduce using rule 48 (al_expression -> expression MINUS expression .)
    CSQBRACKET      reduce using rule 48 (al_expression -> expression MINUS expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    CARET           shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    EQUAL           shift and go to state 89

  ! PLUS            [ reduce using rule 48 (al_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 48 (al_expression -> expression MINUS expression .) ]
  ! CARET           [ reduce using rule 48 (al_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 48 (al_expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 48 (al_expression -> expression MINUS expression .) ]
  ! EQUAL           [ reduce using rule 48 (al_expression -> expression MINUS expression .) ]


state 105

    (51) al_expression -> expression CARET expression .
    (47) al_expression -> expression . PLUS expression
    (48) al_expression -> expression . MINUS expression
    (51) al_expression -> expression . CARET expression
    (52) al_expression -> expression . GREATER expression
    (53) al_expression -> expression . LESS expression
    (54) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 51 (al_expression -> expression CARET expression .)
    NL              reduce using rule 51 (al_expression -> expression CARET expression .)
    COMMA           reduce using rule 51 (al_expression -> expression CARET expression .)
    CBRACKET        reduce using rule 51 (al_expression -> expression CARET expression .)
    CSQBRACKET      reduce using rule 51 (al_expression -> expression CARET expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    CARET           shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    EQUAL           shift and go to state 89

  ! PLUS            [ reduce using rule 51 (al_expression -> expression CARET expression .) ]
  ! MINUS           [ reduce using rule 51 (al_expression -> expression CARET expression .) ]
  ! CARET           [ reduce using rule 51 (al_expression -> expression CARET expression .) ]
  ! GREATER         [ reduce using rule 51 (al_expression -> expression CARET expression .) ]
  ! LESS            [ reduce using rule 51 (al_expression -> expression CARET expression .) ]
  ! EQUAL           [ reduce using rule 51 (al_expression -> expression CARET expression .) ]


state 106

    (52) al_expression -> expression GREATER expression .
    (47) al_expression -> expression . PLUS expression
    (48) al_expression -> expression . MINUS expression
    (51) al_expression -> expression . CARET expression
    (52) al_expression -> expression . GREATER expression
    (53) al_expression -> expression . LESS expression
    (54) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 52 (al_expression -> expression GREATER expression .)
    NL              reduce using rule 52 (al_expression -> expression GREATER expression .)
    COMMA           reduce using rule 52 (al_expression -> expression GREATER expression .)
    CBRACKET        reduce using rule 52 (al_expression -> expression GREATER expression .)
    CSQBRACKET      reduce using rule 52 (al_expression -> expression GREATER expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    CARET           shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    EQUAL           shift and go to state 89

  ! PLUS            [ reduce using rule 52 (al_expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 52 (al_expression -> expression GREATER expression .) ]
  ! CARET           [ reduce using rule 52 (al_expression -> expression GREATER expression .) ]
  ! GREATER         [ reduce using rule 52 (al_expression -> expression GREATER expression .) ]
  ! LESS            [ reduce using rule 52 (al_expression -> expression GREATER expression .) ]
  ! EQUAL           [ reduce using rule 52 (al_expression -> expression GREATER expression .) ]


state 107

    (53) al_expression -> expression LESS expression .
    (47) al_expression -> expression . PLUS expression
    (48) al_expression -> expression . MINUS expression
    (51) al_expression -> expression . CARET expression
    (52) al_expression -> expression . GREATER expression
    (53) al_expression -> expression . LESS expression
    (54) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 53 (al_expression -> expression LESS expression .)
    NL              reduce using rule 53 (al_expression -> expression LESS expression .)
    COMMA           reduce using rule 53 (al_expression -> expression LESS expression .)
    CBRACKET        reduce using rule 53 (al_expression -> expression LESS expression .)
    CSQBRACKET      reduce using rule 53 (al_expression -> expression LESS expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    CARET           shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    EQUAL           shift and go to state 89

  ! PLUS            [ reduce using rule 53 (al_expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 53 (al_expression -> expression LESS expression .) ]
  ! CARET           [ reduce using rule 53 (al_expression -> expression LESS expression .) ]
  ! GREATER         [ reduce using rule 53 (al_expression -> expression LESS expression .) ]
  ! LESS            [ reduce using rule 53 (al_expression -> expression LESS expression .) ]
  ! EQUAL           [ reduce using rule 53 (al_expression -> expression LESS expression .) ]


state 108

    (54) al_expression -> expression EQUAL expression .
    (47) al_expression -> expression . PLUS expression
    (48) al_expression -> expression . MINUS expression
    (51) al_expression -> expression . CARET expression
    (52) al_expression -> expression . GREATER expression
    (53) al_expression -> expression . LESS expression
    (54) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 54 (al_expression -> expression EQUAL expression .)
    NL              reduce using rule 54 (al_expression -> expression EQUAL expression .)
    COMMA           reduce using rule 54 (al_expression -> expression EQUAL expression .)
    CBRACKET        reduce using rule 54 (al_expression -> expression EQUAL expression .)
    CSQBRACKET      reduce using rule 54 (al_expression -> expression EQUAL expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    CARET           shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    EQUAL           shift and go to state 89

  ! PLUS            [ reduce using rule 54 (al_expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 54 (al_expression -> expression EQUAL expression .) ]
  ! CARET           [ reduce using rule 54 (al_expression -> expression EQUAL expression .) ]
  ! GREATER         [ reduce using rule 54 (al_expression -> expression EQUAL expression .) ]
  ! LESS            [ reduce using rule 54 (al_expression -> expression EQUAL expression .) ]
  ! EQUAL           [ reduce using rule 54 (al_expression -> expression EQUAL expression .) ]


state 109

    (67) if -> IF expression DO stmt_list . DONE
    (68) if -> IF expression DO stmt_list . DONE NL ELDEF DO stmt_list DONE
    (69) if -> IF expression DO stmt_list . DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> IF expression DO stmt_list . DONE NL ELUND DO stmt_list DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (24) assignment -> . variable ASSIGN array
    (65) while -> . WHILE expression DO stmt_list DONE
    (66) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (67) if -> . IF expression DO stmt_list DONE
    (68) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (69) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable
    (71) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (72) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    DONE            shift and go to state 118
    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25
    FUNCTION        shift and go to state 26
    IDENT           shift and go to state 27
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 28
    CELL            shift and go to state 29
    BOOL            shift and go to state 30
    VAR             shift and go to state 31

    statement                      shift and go to state 32
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 110

    (71) function -> FUNCTION OBRACKET IDENT CBRACKET . DO stmt_list DONE

    DO              shift and go to state 119


state 111

    (72) function -> FUNCTION IDENT OBRACKET IDENT . CBRACKET DO NL stmt_list DONE

    CBRACKET        shift and go to state 120


state 112

    (55) function_call -> IDENT OBRACKET variable CBRACKET .

    NL              reduce using rule 55 (function_call -> IDENT OBRACKET variable CBRACKET .)
    DO              reduce using rule 55 (function_call -> IDENT OBRACKET variable CBRACKET .)
    PLUS            reduce using rule 55 (function_call -> IDENT OBRACKET variable CBRACKET .)
    MINUS           reduce using rule 55 (function_call -> IDENT OBRACKET variable CBRACKET .)
    CARET           reduce using rule 55 (function_call -> IDENT OBRACKET variable CBRACKET .)
    GREATER         reduce using rule 55 (function_call -> IDENT OBRACKET variable CBRACKET .)
    LESS            reduce using rule 55 (function_call -> IDENT OBRACKET variable CBRACKET .)
    EQUAL           reduce using rule 55 (function_call -> IDENT OBRACKET variable CBRACKET .)
    COMMA           reduce using rule 55 (function_call -> IDENT OBRACKET variable CBRACKET .)
    CBRACKET        reduce using rule 55 (function_call -> IDENT OBRACKET variable CBRACKET .)
    CSQBRACKET      reduce using rule 55 (function_call -> IDENT OBRACKET variable CBRACKET .)


state 113

    (28) variable -> IDENT OBRACKET expression CBRACKET .

    ASSIGN          reduce using rule 28 (variable -> IDENT OBRACKET expression CBRACKET .)
    DO              reduce using rule 28 (variable -> IDENT OBRACKET expression CBRACKET .)
    PLUS            reduce using rule 28 (variable -> IDENT OBRACKET expression CBRACKET .)
    MINUS           reduce using rule 28 (variable -> IDENT OBRACKET expression CBRACKET .)
    CARET           reduce using rule 28 (variable -> IDENT OBRACKET expression CBRACKET .)
    GREATER         reduce using rule 28 (variable -> IDENT OBRACKET expression CBRACKET .)
    LESS            reduce using rule 28 (variable -> IDENT OBRACKET expression CBRACKET .)
    EQUAL           reduce using rule 28 (variable -> IDENT OBRACKET expression CBRACKET .)
    NL              reduce using rule 28 (variable -> IDENT OBRACKET expression CBRACKET .)
    COMMA           reduce using rule 28 (variable -> IDENT OBRACKET expression CBRACKET .)
    CBRACKET        reduce using rule 28 (variable -> IDENT OBRACKET expression CBRACKET .)
    CSQBRACKET      reduce using rule 28 (variable -> IDENT OBRACKET expression CBRACKET .)


state 114

    (25) array -> OSQBRACKET expr_list CSQBRACKET .

    NL              reduce using rule 25 (array -> OSQBRACKET expr_list CSQBRACKET .)
    COMMA           reduce using rule 25 (array -> OSQBRACKET expr_list CSQBRACKET .)


state 115

    (26) expr_list -> expr_list COMMA . expression
    (30) expression -> . variable
    (31) expression -> . const
    (32) expression -> . al_expression
    (33) expression -> . function_call
    (34) expression -> . operator
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT
    (35) const -> . INF
    (36) const -> . MINUS_INF
    (37) const -> . NAN
    (38) const -> . TRUE
    (39) const -> . FALSE
    (40) const -> . UNDEF
    (41) const -> . EMPTY
    (42) const -> . WALL
    (43) const -> . BOX
    (44) const -> . EXIT
    (45) const -> . DECIMAL
    (46) const -> . HEXADECIMAL
    (47) al_expression -> . expression PLUS expression
    (48) al_expression -> . expression MINUS expression
    (49) al_expression -> . MINUS expression
    (50) al_expression -> . SHARP expression
    (51) al_expression -> . expression CARET expression
    (52) al_expression -> . expression GREATER expression
    (53) al_expression -> . expression LESS expression
    (54) al_expression -> . expression EQUAL expression
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable

    IDENT           shift and go to state 52
    INF             shift and go to state 53
    MINUS_INF       shift and go to state 54
    NAN             shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    UNDEF           shift and go to state 58
    EMPTY           shift and go to state 59
    WALL            shift and go to state 60
    BOX             shift and go to state 61
    EXIT            shift and go to state 62
    DECIMAL         shift and go to state 63
    HEXADECIMAL     shift and go to state 64
    MINUS           shift and go to state 65
    SHARP           shift and go to state 66
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25

    expression                     shift and go to state 121
    variable                       shift and go to state 47
    const                          shift and go to state 48
    al_expression                  shift and go to state 49
    function_call                  shift and go to state 50
    operator                       shift and go to state 51

state 116

    (65) while -> WHILE expression DO stmt_list DONE .

    NL              reduce using rule 65 (while -> WHILE expression DO stmt_list DONE .)


state 117

    (66) while -> WHILE expression DO stmt_list FINISH . stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (24) assignment -> . variable ASSIGN array
    (65) while -> . WHILE expression DO stmt_list DONE
    (66) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (67) if -> . IF expression DO stmt_list DONE
    (68) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (69) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable
    (71) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (72) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25
    FUNCTION        shift and go to state 26
    IDENT           shift and go to state 27
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 28
    CELL            shift and go to state 29
    BOOL            shift and go to state 30
    VAR             shift and go to state 31

    stmt_list                      shift and go to state 122
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 118

    (67) if -> IF expression DO stmt_list DONE .
    (68) if -> IF expression DO stmt_list DONE . NL ELDEF DO stmt_list DONE
    (69) if -> IF expression DO stmt_list DONE . NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> IF expression DO stmt_list DONE . NL ELUND DO stmt_list DONE

  ! shift/reduce conflict for NL resolved as shift
    NL              shift and go to state 123

  ! NL              [ reduce using rule 67 (if -> IF expression DO stmt_list DONE .) ]


state 119

    (71) function -> FUNCTION OBRACKET IDENT CBRACKET DO . stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (24) assignment -> . variable ASSIGN array
    (65) while -> . WHILE expression DO stmt_list DONE
    (66) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (67) if -> . IF expression DO stmt_list DONE
    (68) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (69) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable
    (71) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (72) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25
    FUNCTION        shift and go to state 26
    IDENT           shift and go to state 27
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 28
    CELL            shift and go to state 29
    BOOL            shift and go to state 30
    VAR             shift and go to state 31

    stmt_list                      shift and go to state 124
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 120

    (72) function -> FUNCTION IDENT OBRACKET IDENT CBRACKET . DO NL stmt_list DONE

    DO              shift and go to state 125


state 121

    (26) expr_list -> expr_list COMMA expression .
    (47) al_expression -> expression . PLUS expression
    (48) al_expression -> expression . MINUS expression
    (51) al_expression -> expression . CARET expression
    (52) al_expression -> expression . GREATER expression
    (53) al_expression -> expression . LESS expression
    (54) al_expression -> expression . EQUAL expression

    CSQBRACKET      reduce using rule 26 (expr_list -> expr_list COMMA expression .)
    COMMA           reduce using rule 26 (expr_list -> expr_list COMMA expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    CARET           shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    EQUAL           shift and go to state 89


state 122

    (66) while -> WHILE expression DO stmt_list FINISH stmt_list . DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (24) assignment -> . variable ASSIGN array
    (65) while -> . WHILE expression DO stmt_list DONE
    (66) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (67) if -> . IF expression DO stmt_list DONE
    (68) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (69) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable
    (71) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (72) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    DONE            shift and go to state 126
    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25
    FUNCTION        shift and go to state 26
    IDENT           shift and go to state 27
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 28
    CELL            shift and go to state 29
    BOOL            shift and go to state 30
    VAR             shift and go to state 31

    statement                      shift and go to state 32
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 123

    (68) if -> IF expression DO stmt_list DONE NL . ELDEF DO stmt_list DONE
    (69) if -> IF expression DO stmt_list DONE NL . ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> IF expression DO stmt_list DONE NL . ELUND DO stmt_list DONE

    ELDEF           shift and go to state 127
    ELUND           shift and go to state 128


state 124

    (71) function -> FUNCTION OBRACKET IDENT CBRACKET DO stmt_list . DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (24) assignment -> . variable ASSIGN array
    (65) while -> . WHILE expression DO stmt_list DONE
    (66) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (67) if -> . IF expression DO stmt_list DONE
    (68) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (69) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable
    (71) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (72) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    DONE            shift and go to state 129
    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25
    FUNCTION        shift and go to state 26
    IDENT           shift and go to state 27
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 28
    CELL            shift and go to state 29
    BOOL            shift and go to state 30
    VAR             shift and go to state 31

    statement                      shift and go to state 32
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 125

    (72) function -> FUNCTION IDENT OBRACKET IDENT CBRACKET DO . NL stmt_list DONE

    NL              shift and go to state 130


state 126

    (66) while -> WHILE expression DO stmt_list FINISH stmt_list DONE .

    NL              reduce using rule 66 (while -> WHILE expression DO stmt_list FINISH stmt_list DONE .)


state 127

    (68) if -> IF expression DO stmt_list DONE NL ELDEF . DO stmt_list DONE
    (69) if -> IF expression DO stmt_list DONE NL ELDEF . DO stmt_list DONE NL ELUND DO stmt_list DONE

    DO              shift and go to state 131


state 128

    (70) if -> IF expression DO stmt_list DONE NL ELUND . DO stmt_list DONE

    DO              shift and go to state 132


state 129

    (71) function -> FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE .

    NL              reduce using rule 71 (function -> FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE .)


state 130

    (72) function -> FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL . stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (24) assignment -> . variable ASSIGN array
    (65) while -> . WHILE expression DO stmt_list DONE
    (66) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (67) if -> . IF expression DO stmt_list DONE
    (68) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (69) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable
    (71) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (72) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25
    FUNCTION        shift and go to state 26
    IDENT           shift and go to state 27
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 28
    CELL            shift and go to state 29
    BOOL            shift and go to state 30
    VAR             shift and go to state 31

    stmt_list                      shift and go to state 133
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 131

    (68) if -> IF expression DO stmt_list DONE NL ELDEF DO . stmt_list DONE
    (69) if -> IF expression DO stmt_list DONE NL ELDEF DO . stmt_list DONE NL ELUND DO stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (24) assignment -> . variable ASSIGN array
    (65) while -> . WHILE expression DO stmt_list DONE
    (66) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (67) if -> . IF expression DO stmt_list DONE
    (68) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (69) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable
    (71) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (72) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25
    FUNCTION        shift and go to state 26
    IDENT           shift and go to state 27
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 28
    CELL            shift and go to state 29
    BOOL            shift and go to state 30
    VAR             shift and go to state 31

    stmt_list                      shift and go to state 134
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 132

    (70) if -> IF expression DO stmt_list DONE NL ELUND DO . stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (24) assignment -> . variable ASSIGN array
    (65) while -> . WHILE expression DO stmt_list DONE
    (66) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (67) if -> . IF expression DO stmt_list DONE
    (68) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (69) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable
    (71) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (72) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25
    FUNCTION        shift and go to state 26
    IDENT           shift and go to state 27
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 28
    CELL            shift and go to state 29
    BOOL            shift and go to state 30
    VAR             shift and go to state 31

    stmt_list                      shift and go to state 135
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 133

    (72) function -> FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list . DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (24) assignment -> . variable ASSIGN array
    (65) while -> . WHILE expression DO stmt_list DONE
    (66) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (67) if -> . IF expression DO stmt_list DONE
    (68) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (69) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable
    (71) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (72) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    DONE            shift and go to state 136
    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25
    FUNCTION        shift and go to state 26
    IDENT           shift and go to state 27
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 28
    CELL            shift and go to state 29
    BOOL            shift and go to state 30
    VAR             shift and go to state 31

    statement                      shift and go to state 32
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 134

    (68) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list . DONE
    (69) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list . DONE NL ELUND DO stmt_list DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (24) assignment -> . variable ASSIGN array
    (65) while -> . WHILE expression DO stmt_list DONE
    (66) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (67) if -> . IF expression DO stmt_list DONE
    (68) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (69) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable
    (71) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (72) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    DONE            shift and go to state 137
    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25
    FUNCTION        shift and go to state 26
    IDENT           shift and go to state 27
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 28
    CELL            shift and go to state 29
    BOOL            shift and go to state 30
    VAR             shift and go to state 31

    statement                      shift and go to state 32
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 135

    (70) if -> IF expression DO stmt_list DONE NL ELUND DO stmt_list . DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (24) assignment -> . variable ASSIGN array
    (65) while -> . WHILE expression DO stmt_list DONE
    (66) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (67) if -> . IF expression DO stmt_list DONE
    (68) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (69) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable
    (71) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (72) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    DONE            shift and go to state 138
    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25
    FUNCTION        shift and go to state 26
    IDENT           shift and go to state 27
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 28
    CELL            shift and go to state 29
    BOOL            shift and go to state 30
    VAR             shift and go to state 31

    statement                      shift and go to state 32
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 136

    (72) function -> FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE .

    NL              reduce using rule 72 (function -> FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE .)


state 137

    (68) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE .
    (69) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE . NL ELUND DO stmt_list DONE

  ! shift/reduce conflict for NL resolved as shift
    NL              shift and go to state 139

  ! NL              [ reduce using rule 68 (if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE .) ]


state 138

    (70) if -> IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE .

    NL              reduce using rule 70 (if -> IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE .)


state 139

    (69) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL . ELUND DO stmt_list DONE

    ELUND           shift and go to state 140


state 140

    (69) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND . DO stmt_list DONE

    DO              shift and go to state 141


state 141

    (69) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO . stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (24) assignment -> . variable ASSIGN array
    (65) while -> . WHILE expression DO stmt_list DONE
    (66) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (67) if -> . IF expression DO stmt_list DONE
    (68) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (69) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable
    (71) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (72) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25
    FUNCTION        shift and go to state 26
    IDENT           shift and go to state 27
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 28
    CELL            shift and go to state 29
    BOOL            shift and go to state 30
    VAR             shift and go to state 31

    stmt_list                      shift and go to state 142
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 142

    (69) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list . DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (24) assignment -> . variable ASSIGN array
    (65) while -> . WHILE expression DO stmt_list DONE
    (66) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (67) if -> . IF expression DO stmt_list DONE
    (68) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (69) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (70) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (56) operator -> . FORWARD expression
    (57) operator -> . BACKWARD expression
    (58) operator -> . LEFT
    (59) operator -> . RIGHT
    (60) operator -> . LOAD expression
    (61) operator -> . DROP expression
    (62) operator -> . LOOK
    (63) operator -> . TEST
    (64) operator -> . SIZEOF variable
    (71) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (72) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (55) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (28) variable -> . IDENT OBRACKET expression CBRACKET
    (29) variable -> . IDENT

    DONE            shift and go to state 143
    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    SIZEOF          shift and go to state 25
    FUNCTION        shift and go to state 26
    IDENT           shift and go to state 27
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 28
    CELL            shift and go to state 29
    BOOL            shift and go to state 30
    VAR             shift and go to state 31

    statement                      shift and go to state 32
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 143

    (69) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE .

    NL              reduce using rule 69 (if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for CARET in state 68 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 68 resolved as shift
WARNING: shift/reduce conflict for LESS in state 68 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for CARET in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS in state 69 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for CARET in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 70 resolved as shift
WARNING: shift/reduce conflict for LESS in state 70 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for CARET in state 71 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 71 resolved as shift
WARNING: shift/reduce conflict for LESS in state 71 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 91 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 91 resolved as shift
WARNING: shift/reduce conflict for CARET in state 91 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 91 resolved as shift
WARNING: shift/reduce conflict for LESS in state 91 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 91 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 92 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 92 resolved as shift
WARNING: shift/reduce conflict for CARET in state 92 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 92 resolved as shift
WARNING: shift/reduce conflict for LESS in state 92 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 92 resolved as shift
WARNING: shift/reduce conflict for CBRACKET in state 96 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for CARET in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 103 resolved as shift
WARNING: shift/reduce conflict for LESS in state 103 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for CARET in state 104 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 104 resolved as shift
WARNING: shift/reduce conflict for LESS in state 104 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for CARET in state 105 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 105 resolved as shift
WARNING: shift/reduce conflict for LESS in state 105 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for CARET in state 106 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 106 resolved as shift
WARNING: shift/reduce conflict for LESS in state 106 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for CARET in state 107 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 107 resolved as shift
WARNING: shift/reduce conflict for LESS in state 107 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for CARET in state 108 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 108 resolved as shift
WARNING: shift/reduce conflict for LESS in state 108 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for NL in state 118 resolved as shift
WARNING: shift/reduce conflict for NL in state 137 resolved as shift
