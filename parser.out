Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     empty -> <empty>
Rule 3     stmt_list -> stmt_list statement
Rule 4     stmt_list -> statement
Rule 5     statement -> declaration_list NL
Rule 6     statement -> assignment NL
Rule 7     statement -> while NL
Rule 8     statement -> if NL
Rule 9     statement -> operator NL
Rule 10    statement -> function NL
Rule 11    statement -> function_call NL
Rule 12    statement -> RETURN NL
Rule 13    statement -> empty NL
Rule 14    statement -> err_list NL
Rule 15    statement -> err_list
Rule 16    declaration_list -> type vars_list
Rule 17    type -> INT
Rule 18    type -> CELL
Rule 19    type -> BOOL
Rule 20    type -> VAR
Rule 21    type -> err_list
Rule 22    err_list -> err_list error
Rule 23    err_list -> error
Rule 24    vars_list -> IDENT COMMA vars_list
Rule 25    vars_list -> assignment COMMA vars_list
Rule 26    vars_list -> IDENT
Rule 27    vars_list -> assignment
Rule 28    assignment -> variable ASSIGN expression
Rule 29    assignment -> variable ASSIGN array
Rule 30    array -> OSQBRACKET expr_list CSQBRACKET
Rule 31    expr_list -> expr_list COMMA expression
Rule 32    expr_list -> expression
Rule 33    variable -> IDENT OBRACKET expression CBRACKET
Rule 34    variable -> IDENT
Rule 35    expression -> variable
Rule 36    expression -> const
Rule 37    expression -> al_expression
Rule 38    expression -> function_call
Rule 39    expression -> operator
Rule 40    const -> INF
Rule 41    const -> MINUS_INF
Rule 42    const -> NAN
Rule 43    const -> TRUE
Rule 44    const -> FALSE
Rule 45    const -> UNDEF
Rule 46    const -> EMPTY
Rule 47    const -> WALL
Rule 48    const -> BOX
Rule 49    const -> EXIT
Rule 50    const -> DECIMAL
Rule 51    const -> HEXADECIMAL
Rule 52    al_expression -> expression PLUS expression
Rule 53    al_expression -> expression MINUS expression
Rule 54    al_expression -> MINUS expression
Rule 55    al_expression -> SHARP expression
Rule 56    al_expression -> expression CARET expression
Rule 57    al_expression -> expression GREATER expression
Rule 58    al_expression -> expression LESS expression
Rule 59    al_expression -> expression EQUAL expression
Rule 60    function_call -> IDENT OBRACKET variable CBRACKET
Rule 61    operator -> FORWARD expression
Rule 62    operator -> BACKWARD expression
Rule 63    operator -> LEFT
Rule 64    operator -> RIGHT
Rule 65    operator -> LOAD expression
Rule 66    operator -> DROP expression
Rule 67    operator -> LOOK
Rule 68    operator -> TEST
Rule 69    operator -> SIZEOF variable
Rule 70    while -> WHILE expression DO stmt_list DONE
Rule 71    while -> WHILE expression DO stmt_list FINISH stmt_list DONE
Rule 72    if -> IF expression DO stmt_list DONE
Rule 73    if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
Rule 74    if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
Rule 75    if -> IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
Rule 76    function -> FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
Rule 77    function -> FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE

Terminals, with rules where they appear

ASSIGN               : 28 29
BACKWARD             : 62
BOOL                 : 19
BOX                  : 48
CARET                : 56
CBRACKET             : 33 60 76 77
CELL                 : 18
COMMA                : 24 25 31
CSQBRACKET           : 30
DECIMAL              : 50
DO                   : 70 71 72 73 73 74 74 74 75 75 76 77
DONE                 : 70 71 72 73 73 74 74 74 75 75 76 77
DROP                 : 66
ELDEF                : 73 74
ELUND                : 74 75
EMPTY                : 46
EQUAL                : 59
EXIT                 : 49
FALSE                : 44
FINISH               : 71
FORWARD              : 61
FUNCTION             : 76 77
GREATER              : 57
HEXADECIMAL          : 51
IDENT                : 24 26 33 34 60 76 77 77
IF                   : 72 73 74 75
INF                  : 40
INT                  : 17
LEFT                 : 63
LESS                 : 58
LOAD                 : 65
LOOK                 : 67
MINUS                : 53 54
MINUS_INF            : 41
NAN                  : 42
NL                   : 5 6 7 8 9 10 11 12 13 14 73 74 74 75 77
OBRACKET             : 33 60 76 77
OSQBRACKET           : 30
PLUS                 : 52
RETURN               : 12
RIGHT                : 64
SHARP                : 55
SIZEOF               : 69
TEST                 : 68
TRUE                 : 43
UNDEF                : 45
VAR                  : 20
WALL                 : 47
WHILE                : 70 71
error                : 22 23

Nonterminals, with rules where they appear

al_expression        : 37
array                : 29
assignment           : 6 25 27
const                : 36
declaration_list     : 5
empty                : 13
err_list             : 14 15 21 22
expr_list            : 30 31
expression           : 28 31 32 33 52 52 53 53 54 55 56 56 57 57 58 58 59 59 61 62 65 66 70 71 72 73 74 75
function             : 10
function_call        : 11 38
if                   : 8
operator             : 9 39
program              : 0
statement            : 3 4
stmt_list            : 1 3 70 71 71 72 73 73 74 74 74 75 75 76 77
type                 : 16
variable             : 28 29 35 60 69
vars_list            : 16 24 25
while                : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) statement -> . err_list NL
    (15) statement -> . err_list
    (16) declaration_list -> . type vars_list
    (28) assignment -> . variable ASSIGN expression
    (29) assignment -> . variable ASSIGN array
    (70) while -> . WHILE expression DO stmt_list DONE
    (71) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (72) if -> . IF expression DO stmt_list DONE
    (73) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (74) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable
    (76) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (77) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (22) err_list -> . err_list error
    (23) err_list -> . error
    (17) type -> . INT
    (18) type -> . CELL
    (19) type -> . BOOL
    (20) type -> . VAR
    (21) type -> . err_list
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26
    FUNCTION        shift and go to state 27
    IDENT           shift and go to state 28
    NL              reduce using rule 2 (empty -> .)
    error           shift and go to state 29
    INT             shift and go to state 30
    CELL            shift and go to state 31
    BOOL            shift and go to state 32
    VAR             shift and go to state 33

    program                        shift and go to state 1
    stmt_list                      shift and go to state 2
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    err_list                       shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 1

    (0) S' -> program .



state 2

    (1) program -> stmt_list .
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) statement -> . err_list NL
    (15) statement -> . err_list
    (16) declaration_list -> . type vars_list
    (28) assignment -> . variable ASSIGN expression
    (29) assignment -> . variable ASSIGN array
    (70) while -> . WHILE expression DO stmt_list DONE
    (71) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (72) if -> . IF expression DO stmt_list DONE
    (73) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (74) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable
    (76) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (77) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (22) err_list -> . err_list error
    (23) err_list -> . error
    (17) type -> . INT
    (18) type -> . CELL
    (19) type -> . BOOL
    (20) type -> . VAR
    (21) type -> . err_list
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    $end            reduce using rule 1 (program -> stmt_list .)
    RETURN          shift and go to state 11
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26
    FUNCTION        shift and go to state 27
    IDENT           shift and go to state 28
    NL              reduce using rule 2 (empty -> .)
    error           shift and go to state 29
    INT             shift and go to state 30
    CELL            shift and go to state 31
    BOOL            shift and go to state 32
    VAR             shift and go to state 33

    statement                      shift and go to state 34
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    err_list                       shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 3

    (4) stmt_list -> statement .

    RETURN          reduce using rule 4 (stmt_list -> statement .)
    WHILE           reduce using rule 4 (stmt_list -> statement .)
    IF              reduce using rule 4 (stmt_list -> statement .)
    FORWARD         reduce using rule 4 (stmt_list -> statement .)
    BACKWARD        reduce using rule 4 (stmt_list -> statement .)
    LEFT            reduce using rule 4 (stmt_list -> statement .)
    RIGHT           reduce using rule 4 (stmt_list -> statement .)
    LOAD            reduce using rule 4 (stmt_list -> statement .)
    DROP            reduce using rule 4 (stmt_list -> statement .)
    LOOK            reduce using rule 4 (stmt_list -> statement .)
    TEST            reduce using rule 4 (stmt_list -> statement .)
    SIZEOF          reduce using rule 4 (stmt_list -> statement .)
    FUNCTION        reduce using rule 4 (stmt_list -> statement .)
    IDENT           reduce using rule 4 (stmt_list -> statement .)
    error           reduce using rule 4 (stmt_list -> statement .)
    INT             reduce using rule 4 (stmt_list -> statement .)
    CELL            reduce using rule 4 (stmt_list -> statement .)
    BOOL            reduce using rule 4 (stmt_list -> statement .)
    VAR             reduce using rule 4 (stmt_list -> statement .)
    NL              reduce using rule 4 (stmt_list -> statement .)
    $end            reduce using rule 4 (stmt_list -> statement .)
    DONE            reduce using rule 4 (stmt_list -> statement .)
    FINISH          reduce using rule 4 (stmt_list -> statement .)


state 4

    (5) statement -> declaration_list . NL

    NL              shift and go to state 35


state 5

    (6) statement -> assignment . NL

    NL              shift and go to state 36


state 6

    (7) statement -> while . NL

    NL              shift and go to state 37


state 7

    (8) statement -> if . NL

    NL              shift and go to state 38


state 8

    (9) statement -> operator . NL

    NL              shift and go to state 39


state 9

    (10) statement -> function . NL

    NL              shift and go to state 40


state 10

    (11) statement -> function_call . NL

    NL              shift and go to state 41


state 11

    (12) statement -> RETURN . NL

    NL              shift and go to state 42


state 12

    (13) statement -> empty . NL

    NL              shift and go to state 43


state 13

    (14) statement -> err_list . NL
    (15) statement -> err_list .
    (22) err_list -> err_list . error
    (21) type -> err_list .

  ! shift/reduce conflict for NL resolved as shift
  ! shift/reduce conflict for error resolved as shift
  ! reduce/reduce conflict for IDENT resolved using rule 15 (statement -> err_list .)
    NL              shift and go to state 44
    RETURN          reduce using rule 15 (statement -> err_list .)
    WHILE           reduce using rule 15 (statement -> err_list .)
    IF              reduce using rule 15 (statement -> err_list .)
    FORWARD         reduce using rule 15 (statement -> err_list .)
    BACKWARD        reduce using rule 15 (statement -> err_list .)
    LEFT            reduce using rule 15 (statement -> err_list .)
    RIGHT           reduce using rule 15 (statement -> err_list .)
    LOAD            reduce using rule 15 (statement -> err_list .)
    DROP            reduce using rule 15 (statement -> err_list .)
    LOOK            reduce using rule 15 (statement -> err_list .)
    TEST            reduce using rule 15 (statement -> err_list .)
    SIZEOF          reduce using rule 15 (statement -> err_list .)
    FUNCTION        reduce using rule 15 (statement -> err_list .)
    IDENT           reduce using rule 15 (statement -> err_list .)
    INT             reduce using rule 15 (statement -> err_list .)
    CELL            reduce using rule 15 (statement -> err_list .)
    BOOL            reduce using rule 15 (statement -> err_list .)
    VAR             reduce using rule 15 (statement -> err_list .)
    $end            reduce using rule 15 (statement -> err_list .)
    DONE            reduce using rule 15 (statement -> err_list .)
    FINISH          reduce using rule 15 (statement -> err_list .)
    error           shift and go to state 45

  ! error           [ reduce using rule 15 (statement -> err_list .) ]
  ! NL              [ reduce using rule 15 (statement -> err_list .) ]
  ! IDENT           [ reduce using rule 21 (type -> err_list .) ]


state 14

    (16) declaration_list -> type . vars_list
    (24) vars_list -> . IDENT COMMA vars_list
    (25) vars_list -> . assignment COMMA vars_list
    (26) vars_list -> . IDENT
    (27) vars_list -> . assignment
    (28) assignment -> . variable ASSIGN expression
    (29) assignment -> . variable ASSIGN array
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    IDENT           shift and go to state 47

    vars_list                      shift and go to state 46
    assignment                     shift and go to state 48
    variable                       shift and go to state 15

state 15

    (28) assignment -> variable . ASSIGN expression
    (29) assignment -> variable . ASSIGN array

    ASSIGN          shift and go to state 49


state 16

    (70) while -> WHILE . expression DO stmt_list DONE
    (71) while -> WHILE . expression DO stmt_list FINISH stmt_list DONE
    (35) expression -> . variable
    (36) expression -> . const
    (37) expression -> . al_expression
    (38) expression -> . function_call
    (39) expression -> . operator
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT
    (40) const -> . INF
    (41) const -> . MINUS_INF
    (42) const -> . NAN
    (43) const -> . TRUE
    (44) const -> . FALSE
    (45) const -> . UNDEF
    (46) const -> . EMPTY
    (47) const -> . WALL
    (48) const -> . BOX
    (49) const -> . EXIT
    (50) const -> . DECIMAL
    (51) const -> . HEXADECIMAL
    (52) al_expression -> . expression PLUS expression
    (53) al_expression -> . expression MINUS expression
    (54) al_expression -> . MINUS expression
    (55) al_expression -> . SHARP expression
    (56) al_expression -> . expression CARET expression
    (57) al_expression -> . expression GREATER expression
    (58) al_expression -> . expression LESS expression
    (59) al_expression -> . expression EQUAL expression
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable

    IDENT           shift and go to state 56
    INF             shift and go to state 57
    MINUS_INF       shift and go to state 58
    NAN             shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    UNDEF           shift and go to state 62
    EMPTY           shift and go to state 63
    WALL            shift and go to state 64
    BOX             shift and go to state 65
    EXIT            shift and go to state 66
    DECIMAL         shift and go to state 67
    HEXADECIMAL     shift and go to state 68
    MINUS           shift and go to state 69
    SHARP           shift and go to state 70
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26

    expression                     shift and go to state 50
    variable                       shift and go to state 51
    const                          shift and go to state 52
    al_expression                  shift and go to state 53
    function_call                  shift and go to state 54
    operator                       shift and go to state 55

state 17

    (72) if -> IF . expression DO stmt_list DONE
    (73) if -> IF . expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (74) if -> IF . expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> IF . expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (35) expression -> . variable
    (36) expression -> . const
    (37) expression -> . al_expression
    (38) expression -> . function_call
    (39) expression -> . operator
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT
    (40) const -> . INF
    (41) const -> . MINUS_INF
    (42) const -> . NAN
    (43) const -> . TRUE
    (44) const -> . FALSE
    (45) const -> . UNDEF
    (46) const -> . EMPTY
    (47) const -> . WALL
    (48) const -> . BOX
    (49) const -> . EXIT
    (50) const -> . DECIMAL
    (51) const -> . HEXADECIMAL
    (52) al_expression -> . expression PLUS expression
    (53) al_expression -> . expression MINUS expression
    (54) al_expression -> . MINUS expression
    (55) al_expression -> . SHARP expression
    (56) al_expression -> . expression CARET expression
    (57) al_expression -> . expression GREATER expression
    (58) al_expression -> . expression LESS expression
    (59) al_expression -> . expression EQUAL expression
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable

    IDENT           shift and go to state 56
    INF             shift and go to state 57
    MINUS_INF       shift and go to state 58
    NAN             shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    UNDEF           shift and go to state 62
    EMPTY           shift and go to state 63
    WALL            shift and go to state 64
    BOX             shift and go to state 65
    EXIT            shift and go to state 66
    DECIMAL         shift and go to state 67
    HEXADECIMAL     shift and go to state 68
    MINUS           shift and go to state 69
    SHARP           shift and go to state 70
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26

    expression                     shift and go to state 71
    variable                       shift and go to state 51
    const                          shift and go to state 52
    al_expression                  shift and go to state 53
    function_call                  shift and go to state 54
    operator                       shift and go to state 55

state 18

    (61) operator -> FORWARD . expression
    (35) expression -> . variable
    (36) expression -> . const
    (37) expression -> . al_expression
    (38) expression -> . function_call
    (39) expression -> . operator
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT
    (40) const -> . INF
    (41) const -> . MINUS_INF
    (42) const -> . NAN
    (43) const -> . TRUE
    (44) const -> . FALSE
    (45) const -> . UNDEF
    (46) const -> . EMPTY
    (47) const -> . WALL
    (48) const -> . BOX
    (49) const -> . EXIT
    (50) const -> . DECIMAL
    (51) const -> . HEXADECIMAL
    (52) al_expression -> . expression PLUS expression
    (53) al_expression -> . expression MINUS expression
    (54) al_expression -> . MINUS expression
    (55) al_expression -> . SHARP expression
    (56) al_expression -> . expression CARET expression
    (57) al_expression -> . expression GREATER expression
    (58) al_expression -> . expression LESS expression
    (59) al_expression -> . expression EQUAL expression
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable

    IDENT           shift and go to state 56
    INF             shift and go to state 57
    MINUS_INF       shift and go to state 58
    NAN             shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    UNDEF           shift and go to state 62
    EMPTY           shift and go to state 63
    WALL            shift and go to state 64
    BOX             shift and go to state 65
    EXIT            shift and go to state 66
    DECIMAL         shift and go to state 67
    HEXADECIMAL     shift and go to state 68
    MINUS           shift and go to state 69
    SHARP           shift and go to state 70
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26

    expression                     shift and go to state 72
    variable                       shift and go to state 51
    const                          shift and go to state 52
    al_expression                  shift and go to state 53
    function_call                  shift and go to state 54
    operator                       shift and go to state 55

state 19

    (62) operator -> BACKWARD . expression
    (35) expression -> . variable
    (36) expression -> . const
    (37) expression -> . al_expression
    (38) expression -> . function_call
    (39) expression -> . operator
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT
    (40) const -> . INF
    (41) const -> . MINUS_INF
    (42) const -> . NAN
    (43) const -> . TRUE
    (44) const -> . FALSE
    (45) const -> . UNDEF
    (46) const -> . EMPTY
    (47) const -> . WALL
    (48) const -> . BOX
    (49) const -> . EXIT
    (50) const -> . DECIMAL
    (51) const -> . HEXADECIMAL
    (52) al_expression -> . expression PLUS expression
    (53) al_expression -> . expression MINUS expression
    (54) al_expression -> . MINUS expression
    (55) al_expression -> . SHARP expression
    (56) al_expression -> . expression CARET expression
    (57) al_expression -> . expression GREATER expression
    (58) al_expression -> . expression LESS expression
    (59) al_expression -> . expression EQUAL expression
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable

    IDENT           shift and go to state 56
    INF             shift and go to state 57
    MINUS_INF       shift and go to state 58
    NAN             shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    UNDEF           shift and go to state 62
    EMPTY           shift and go to state 63
    WALL            shift and go to state 64
    BOX             shift and go to state 65
    EXIT            shift and go to state 66
    DECIMAL         shift and go to state 67
    HEXADECIMAL     shift and go to state 68
    MINUS           shift and go to state 69
    SHARP           shift and go to state 70
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26

    expression                     shift and go to state 73
    variable                       shift and go to state 51
    const                          shift and go to state 52
    al_expression                  shift and go to state 53
    function_call                  shift and go to state 54
    operator                       shift and go to state 55

state 20

    (63) operator -> LEFT .

    NL              reduce using rule 63 (operator -> LEFT .)
    DO              reduce using rule 63 (operator -> LEFT .)
    PLUS            reduce using rule 63 (operator -> LEFT .)
    MINUS           reduce using rule 63 (operator -> LEFT .)
    CARET           reduce using rule 63 (operator -> LEFT .)
    GREATER         reduce using rule 63 (operator -> LEFT .)
    LESS            reduce using rule 63 (operator -> LEFT .)
    EQUAL           reduce using rule 63 (operator -> LEFT .)
    COMMA           reduce using rule 63 (operator -> LEFT .)
    CBRACKET        reduce using rule 63 (operator -> LEFT .)
    CSQBRACKET      reduce using rule 63 (operator -> LEFT .)


state 21

    (64) operator -> RIGHT .

    NL              reduce using rule 64 (operator -> RIGHT .)
    DO              reduce using rule 64 (operator -> RIGHT .)
    PLUS            reduce using rule 64 (operator -> RIGHT .)
    MINUS           reduce using rule 64 (operator -> RIGHT .)
    CARET           reduce using rule 64 (operator -> RIGHT .)
    GREATER         reduce using rule 64 (operator -> RIGHT .)
    LESS            reduce using rule 64 (operator -> RIGHT .)
    EQUAL           reduce using rule 64 (operator -> RIGHT .)
    COMMA           reduce using rule 64 (operator -> RIGHT .)
    CBRACKET        reduce using rule 64 (operator -> RIGHT .)
    CSQBRACKET      reduce using rule 64 (operator -> RIGHT .)


state 22

    (65) operator -> LOAD . expression
    (35) expression -> . variable
    (36) expression -> . const
    (37) expression -> . al_expression
    (38) expression -> . function_call
    (39) expression -> . operator
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT
    (40) const -> . INF
    (41) const -> . MINUS_INF
    (42) const -> . NAN
    (43) const -> . TRUE
    (44) const -> . FALSE
    (45) const -> . UNDEF
    (46) const -> . EMPTY
    (47) const -> . WALL
    (48) const -> . BOX
    (49) const -> . EXIT
    (50) const -> . DECIMAL
    (51) const -> . HEXADECIMAL
    (52) al_expression -> . expression PLUS expression
    (53) al_expression -> . expression MINUS expression
    (54) al_expression -> . MINUS expression
    (55) al_expression -> . SHARP expression
    (56) al_expression -> . expression CARET expression
    (57) al_expression -> . expression GREATER expression
    (58) al_expression -> . expression LESS expression
    (59) al_expression -> . expression EQUAL expression
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable

    IDENT           shift and go to state 56
    INF             shift and go to state 57
    MINUS_INF       shift and go to state 58
    NAN             shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    UNDEF           shift and go to state 62
    EMPTY           shift and go to state 63
    WALL            shift and go to state 64
    BOX             shift and go to state 65
    EXIT            shift and go to state 66
    DECIMAL         shift and go to state 67
    HEXADECIMAL     shift and go to state 68
    MINUS           shift and go to state 69
    SHARP           shift and go to state 70
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26

    expression                     shift and go to state 74
    variable                       shift and go to state 51
    const                          shift and go to state 52
    al_expression                  shift and go to state 53
    function_call                  shift and go to state 54
    operator                       shift and go to state 55

state 23

    (66) operator -> DROP . expression
    (35) expression -> . variable
    (36) expression -> . const
    (37) expression -> . al_expression
    (38) expression -> . function_call
    (39) expression -> . operator
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT
    (40) const -> . INF
    (41) const -> . MINUS_INF
    (42) const -> . NAN
    (43) const -> . TRUE
    (44) const -> . FALSE
    (45) const -> . UNDEF
    (46) const -> . EMPTY
    (47) const -> . WALL
    (48) const -> . BOX
    (49) const -> . EXIT
    (50) const -> . DECIMAL
    (51) const -> . HEXADECIMAL
    (52) al_expression -> . expression PLUS expression
    (53) al_expression -> . expression MINUS expression
    (54) al_expression -> . MINUS expression
    (55) al_expression -> . SHARP expression
    (56) al_expression -> . expression CARET expression
    (57) al_expression -> . expression GREATER expression
    (58) al_expression -> . expression LESS expression
    (59) al_expression -> . expression EQUAL expression
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable

    IDENT           shift and go to state 56
    INF             shift and go to state 57
    MINUS_INF       shift and go to state 58
    NAN             shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    UNDEF           shift and go to state 62
    EMPTY           shift and go to state 63
    WALL            shift and go to state 64
    BOX             shift and go to state 65
    EXIT            shift and go to state 66
    DECIMAL         shift and go to state 67
    HEXADECIMAL     shift and go to state 68
    MINUS           shift and go to state 69
    SHARP           shift and go to state 70
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26

    expression                     shift and go to state 75
    variable                       shift and go to state 51
    const                          shift and go to state 52
    al_expression                  shift and go to state 53
    function_call                  shift and go to state 54
    operator                       shift and go to state 55

state 24

    (67) operator -> LOOK .

    NL              reduce using rule 67 (operator -> LOOK .)
    DO              reduce using rule 67 (operator -> LOOK .)
    PLUS            reduce using rule 67 (operator -> LOOK .)
    MINUS           reduce using rule 67 (operator -> LOOK .)
    CARET           reduce using rule 67 (operator -> LOOK .)
    GREATER         reduce using rule 67 (operator -> LOOK .)
    LESS            reduce using rule 67 (operator -> LOOK .)
    EQUAL           reduce using rule 67 (operator -> LOOK .)
    COMMA           reduce using rule 67 (operator -> LOOK .)
    CBRACKET        reduce using rule 67 (operator -> LOOK .)
    CSQBRACKET      reduce using rule 67 (operator -> LOOK .)


state 25

    (68) operator -> TEST .

    NL              reduce using rule 68 (operator -> TEST .)
    DO              reduce using rule 68 (operator -> TEST .)
    PLUS            reduce using rule 68 (operator -> TEST .)
    MINUS           reduce using rule 68 (operator -> TEST .)
    CARET           reduce using rule 68 (operator -> TEST .)
    GREATER         reduce using rule 68 (operator -> TEST .)
    LESS            reduce using rule 68 (operator -> TEST .)
    EQUAL           reduce using rule 68 (operator -> TEST .)
    COMMA           reduce using rule 68 (operator -> TEST .)
    CBRACKET        reduce using rule 68 (operator -> TEST .)
    CSQBRACKET      reduce using rule 68 (operator -> TEST .)


state 26

    (69) operator -> SIZEOF . variable
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    IDENT           shift and go to state 77

    variable                       shift and go to state 76

state 27

    (76) function -> FUNCTION . OBRACKET IDENT CBRACKET DO stmt_list DONE
    (77) function -> FUNCTION . IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE

    OBRACKET        shift and go to state 78
    IDENT           shift and go to state 79


state 28

    (60) function_call -> IDENT . OBRACKET variable CBRACKET
    (33) variable -> IDENT . OBRACKET expression CBRACKET
    (34) variable -> IDENT .

    OBRACKET        shift and go to state 80
    ASSIGN          reduce using rule 34 (variable -> IDENT .)


state 29

    (23) err_list -> error .

    NL              reduce using rule 23 (err_list -> error .)
    error           reduce using rule 23 (err_list -> error .)
    RETURN          reduce using rule 23 (err_list -> error .)
    WHILE           reduce using rule 23 (err_list -> error .)
    IF              reduce using rule 23 (err_list -> error .)
    FORWARD         reduce using rule 23 (err_list -> error .)
    BACKWARD        reduce using rule 23 (err_list -> error .)
    LEFT            reduce using rule 23 (err_list -> error .)
    RIGHT           reduce using rule 23 (err_list -> error .)
    LOAD            reduce using rule 23 (err_list -> error .)
    DROP            reduce using rule 23 (err_list -> error .)
    LOOK            reduce using rule 23 (err_list -> error .)
    TEST            reduce using rule 23 (err_list -> error .)
    SIZEOF          reduce using rule 23 (err_list -> error .)
    FUNCTION        reduce using rule 23 (err_list -> error .)
    IDENT           reduce using rule 23 (err_list -> error .)
    INT             reduce using rule 23 (err_list -> error .)
    CELL            reduce using rule 23 (err_list -> error .)
    BOOL            reduce using rule 23 (err_list -> error .)
    VAR             reduce using rule 23 (err_list -> error .)
    $end            reduce using rule 23 (err_list -> error .)
    DONE            reduce using rule 23 (err_list -> error .)
    FINISH          reduce using rule 23 (err_list -> error .)


state 30

    (17) type -> INT .

    IDENT           reduce using rule 17 (type -> INT .)


state 31

    (18) type -> CELL .

    IDENT           reduce using rule 18 (type -> CELL .)


state 32

    (19) type -> BOOL .

    IDENT           reduce using rule 19 (type -> BOOL .)


state 33

    (20) type -> VAR .

    IDENT           reduce using rule 20 (type -> VAR .)


state 34

    (3) stmt_list -> stmt_list statement .

    RETURN          reduce using rule 3 (stmt_list -> stmt_list statement .)
    WHILE           reduce using rule 3 (stmt_list -> stmt_list statement .)
    IF              reduce using rule 3 (stmt_list -> stmt_list statement .)
    FORWARD         reduce using rule 3 (stmt_list -> stmt_list statement .)
    BACKWARD        reduce using rule 3 (stmt_list -> stmt_list statement .)
    LEFT            reduce using rule 3 (stmt_list -> stmt_list statement .)
    RIGHT           reduce using rule 3 (stmt_list -> stmt_list statement .)
    LOAD            reduce using rule 3 (stmt_list -> stmt_list statement .)
    DROP            reduce using rule 3 (stmt_list -> stmt_list statement .)
    LOOK            reduce using rule 3 (stmt_list -> stmt_list statement .)
    TEST            reduce using rule 3 (stmt_list -> stmt_list statement .)
    SIZEOF          reduce using rule 3 (stmt_list -> stmt_list statement .)
    FUNCTION        reduce using rule 3 (stmt_list -> stmt_list statement .)
    IDENT           reduce using rule 3 (stmt_list -> stmt_list statement .)
    error           reduce using rule 3 (stmt_list -> stmt_list statement .)
    INT             reduce using rule 3 (stmt_list -> stmt_list statement .)
    CELL            reduce using rule 3 (stmt_list -> stmt_list statement .)
    BOOL            reduce using rule 3 (stmt_list -> stmt_list statement .)
    VAR             reduce using rule 3 (stmt_list -> stmt_list statement .)
    NL              reduce using rule 3 (stmt_list -> stmt_list statement .)
    $end            reduce using rule 3 (stmt_list -> stmt_list statement .)
    DONE            reduce using rule 3 (stmt_list -> stmt_list statement .)
    FINISH          reduce using rule 3 (stmt_list -> stmt_list statement .)


state 35

    (5) statement -> declaration_list NL .

    RETURN          reduce using rule 5 (statement -> declaration_list NL .)
    WHILE           reduce using rule 5 (statement -> declaration_list NL .)
    IF              reduce using rule 5 (statement -> declaration_list NL .)
    FORWARD         reduce using rule 5 (statement -> declaration_list NL .)
    BACKWARD        reduce using rule 5 (statement -> declaration_list NL .)
    LEFT            reduce using rule 5 (statement -> declaration_list NL .)
    RIGHT           reduce using rule 5 (statement -> declaration_list NL .)
    LOAD            reduce using rule 5 (statement -> declaration_list NL .)
    DROP            reduce using rule 5 (statement -> declaration_list NL .)
    LOOK            reduce using rule 5 (statement -> declaration_list NL .)
    TEST            reduce using rule 5 (statement -> declaration_list NL .)
    SIZEOF          reduce using rule 5 (statement -> declaration_list NL .)
    FUNCTION        reduce using rule 5 (statement -> declaration_list NL .)
    IDENT           reduce using rule 5 (statement -> declaration_list NL .)
    error           reduce using rule 5 (statement -> declaration_list NL .)
    INT             reduce using rule 5 (statement -> declaration_list NL .)
    CELL            reduce using rule 5 (statement -> declaration_list NL .)
    BOOL            reduce using rule 5 (statement -> declaration_list NL .)
    VAR             reduce using rule 5 (statement -> declaration_list NL .)
    NL              reduce using rule 5 (statement -> declaration_list NL .)
    $end            reduce using rule 5 (statement -> declaration_list NL .)
    DONE            reduce using rule 5 (statement -> declaration_list NL .)
    FINISH          reduce using rule 5 (statement -> declaration_list NL .)


state 36

    (6) statement -> assignment NL .

    RETURN          reduce using rule 6 (statement -> assignment NL .)
    WHILE           reduce using rule 6 (statement -> assignment NL .)
    IF              reduce using rule 6 (statement -> assignment NL .)
    FORWARD         reduce using rule 6 (statement -> assignment NL .)
    BACKWARD        reduce using rule 6 (statement -> assignment NL .)
    LEFT            reduce using rule 6 (statement -> assignment NL .)
    RIGHT           reduce using rule 6 (statement -> assignment NL .)
    LOAD            reduce using rule 6 (statement -> assignment NL .)
    DROP            reduce using rule 6 (statement -> assignment NL .)
    LOOK            reduce using rule 6 (statement -> assignment NL .)
    TEST            reduce using rule 6 (statement -> assignment NL .)
    SIZEOF          reduce using rule 6 (statement -> assignment NL .)
    FUNCTION        reduce using rule 6 (statement -> assignment NL .)
    IDENT           reduce using rule 6 (statement -> assignment NL .)
    error           reduce using rule 6 (statement -> assignment NL .)
    INT             reduce using rule 6 (statement -> assignment NL .)
    CELL            reduce using rule 6 (statement -> assignment NL .)
    BOOL            reduce using rule 6 (statement -> assignment NL .)
    VAR             reduce using rule 6 (statement -> assignment NL .)
    NL              reduce using rule 6 (statement -> assignment NL .)
    $end            reduce using rule 6 (statement -> assignment NL .)
    DONE            reduce using rule 6 (statement -> assignment NL .)
    FINISH          reduce using rule 6 (statement -> assignment NL .)


state 37

    (7) statement -> while NL .

    RETURN          reduce using rule 7 (statement -> while NL .)
    WHILE           reduce using rule 7 (statement -> while NL .)
    IF              reduce using rule 7 (statement -> while NL .)
    FORWARD         reduce using rule 7 (statement -> while NL .)
    BACKWARD        reduce using rule 7 (statement -> while NL .)
    LEFT            reduce using rule 7 (statement -> while NL .)
    RIGHT           reduce using rule 7 (statement -> while NL .)
    LOAD            reduce using rule 7 (statement -> while NL .)
    DROP            reduce using rule 7 (statement -> while NL .)
    LOOK            reduce using rule 7 (statement -> while NL .)
    TEST            reduce using rule 7 (statement -> while NL .)
    SIZEOF          reduce using rule 7 (statement -> while NL .)
    FUNCTION        reduce using rule 7 (statement -> while NL .)
    IDENT           reduce using rule 7 (statement -> while NL .)
    error           reduce using rule 7 (statement -> while NL .)
    INT             reduce using rule 7 (statement -> while NL .)
    CELL            reduce using rule 7 (statement -> while NL .)
    BOOL            reduce using rule 7 (statement -> while NL .)
    VAR             reduce using rule 7 (statement -> while NL .)
    NL              reduce using rule 7 (statement -> while NL .)
    $end            reduce using rule 7 (statement -> while NL .)
    DONE            reduce using rule 7 (statement -> while NL .)
    FINISH          reduce using rule 7 (statement -> while NL .)


state 38

    (8) statement -> if NL .

    RETURN          reduce using rule 8 (statement -> if NL .)
    WHILE           reduce using rule 8 (statement -> if NL .)
    IF              reduce using rule 8 (statement -> if NL .)
    FORWARD         reduce using rule 8 (statement -> if NL .)
    BACKWARD        reduce using rule 8 (statement -> if NL .)
    LEFT            reduce using rule 8 (statement -> if NL .)
    RIGHT           reduce using rule 8 (statement -> if NL .)
    LOAD            reduce using rule 8 (statement -> if NL .)
    DROP            reduce using rule 8 (statement -> if NL .)
    LOOK            reduce using rule 8 (statement -> if NL .)
    TEST            reduce using rule 8 (statement -> if NL .)
    SIZEOF          reduce using rule 8 (statement -> if NL .)
    FUNCTION        reduce using rule 8 (statement -> if NL .)
    IDENT           reduce using rule 8 (statement -> if NL .)
    error           reduce using rule 8 (statement -> if NL .)
    INT             reduce using rule 8 (statement -> if NL .)
    CELL            reduce using rule 8 (statement -> if NL .)
    BOOL            reduce using rule 8 (statement -> if NL .)
    VAR             reduce using rule 8 (statement -> if NL .)
    NL              reduce using rule 8 (statement -> if NL .)
    $end            reduce using rule 8 (statement -> if NL .)
    DONE            reduce using rule 8 (statement -> if NL .)
    FINISH          reduce using rule 8 (statement -> if NL .)


state 39

    (9) statement -> operator NL .

    RETURN          reduce using rule 9 (statement -> operator NL .)
    WHILE           reduce using rule 9 (statement -> operator NL .)
    IF              reduce using rule 9 (statement -> operator NL .)
    FORWARD         reduce using rule 9 (statement -> operator NL .)
    BACKWARD        reduce using rule 9 (statement -> operator NL .)
    LEFT            reduce using rule 9 (statement -> operator NL .)
    RIGHT           reduce using rule 9 (statement -> operator NL .)
    LOAD            reduce using rule 9 (statement -> operator NL .)
    DROP            reduce using rule 9 (statement -> operator NL .)
    LOOK            reduce using rule 9 (statement -> operator NL .)
    TEST            reduce using rule 9 (statement -> operator NL .)
    SIZEOF          reduce using rule 9 (statement -> operator NL .)
    FUNCTION        reduce using rule 9 (statement -> operator NL .)
    IDENT           reduce using rule 9 (statement -> operator NL .)
    error           reduce using rule 9 (statement -> operator NL .)
    INT             reduce using rule 9 (statement -> operator NL .)
    CELL            reduce using rule 9 (statement -> operator NL .)
    BOOL            reduce using rule 9 (statement -> operator NL .)
    VAR             reduce using rule 9 (statement -> operator NL .)
    NL              reduce using rule 9 (statement -> operator NL .)
    $end            reduce using rule 9 (statement -> operator NL .)
    DONE            reduce using rule 9 (statement -> operator NL .)
    FINISH          reduce using rule 9 (statement -> operator NL .)


state 40

    (10) statement -> function NL .

    RETURN          reduce using rule 10 (statement -> function NL .)
    WHILE           reduce using rule 10 (statement -> function NL .)
    IF              reduce using rule 10 (statement -> function NL .)
    FORWARD         reduce using rule 10 (statement -> function NL .)
    BACKWARD        reduce using rule 10 (statement -> function NL .)
    LEFT            reduce using rule 10 (statement -> function NL .)
    RIGHT           reduce using rule 10 (statement -> function NL .)
    LOAD            reduce using rule 10 (statement -> function NL .)
    DROP            reduce using rule 10 (statement -> function NL .)
    LOOK            reduce using rule 10 (statement -> function NL .)
    TEST            reduce using rule 10 (statement -> function NL .)
    SIZEOF          reduce using rule 10 (statement -> function NL .)
    FUNCTION        reduce using rule 10 (statement -> function NL .)
    IDENT           reduce using rule 10 (statement -> function NL .)
    error           reduce using rule 10 (statement -> function NL .)
    INT             reduce using rule 10 (statement -> function NL .)
    CELL            reduce using rule 10 (statement -> function NL .)
    BOOL            reduce using rule 10 (statement -> function NL .)
    VAR             reduce using rule 10 (statement -> function NL .)
    NL              reduce using rule 10 (statement -> function NL .)
    $end            reduce using rule 10 (statement -> function NL .)
    DONE            reduce using rule 10 (statement -> function NL .)
    FINISH          reduce using rule 10 (statement -> function NL .)


state 41

    (11) statement -> function_call NL .

    RETURN          reduce using rule 11 (statement -> function_call NL .)
    WHILE           reduce using rule 11 (statement -> function_call NL .)
    IF              reduce using rule 11 (statement -> function_call NL .)
    FORWARD         reduce using rule 11 (statement -> function_call NL .)
    BACKWARD        reduce using rule 11 (statement -> function_call NL .)
    LEFT            reduce using rule 11 (statement -> function_call NL .)
    RIGHT           reduce using rule 11 (statement -> function_call NL .)
    LOAD            reduce using rule 11 (statement -> function_call NL .)
    DROP            reduce using rule 11 (statement -> function_call NL .)
    LOOK            reduce using rule 11 (statement -> function_call NL .)
    TEST            reduce using rule 11 (statement -> function_call NL .)
    SIZEOF          reduce using rule 11 (statement -> function_call NL .)
    FUNCTION        reduce using rule 11 (statement -> function_call NL .)
    IDENT           reduce using rule 11 (statement -> function_call NL .)
    error           reduce using rule 11 (statement -> function_call NL .)
    INT             reduce using rule 11 (statement -> function_call NL .)
    CELL            reduce using rule 11 (statement -> function_call NL .)
    BOOL            reduce using rule 11 (statement -> function_call NL .)
    VAR             reduce using rule 11 (statement -> function_call NL .)
    NL              reduce using rule 11 (statement -> function_call NL .)
    $end            reduce using rule 11 (statement -> function_call NL .)
    DONE            reduce using rule 11 (statement -> function_call NL .)
    FINISH          reduce using rule 11 (statement -> function_call NL .)


state 42

    (12) statement -> RETURN NL .

    RETURN          reduce using rule 12 (statement -> RETURN NL .)
    WHILE           reduce using rule 12 (statement -> RETURN NL .)
    IF              reduce using rule 12 (statement -> RETURN NL .)
    FORWARD         reduce using rule 12 (statement -> RETURN NL .)
    BACKWARD        reduce using rule 12 (statement -> RETURN NL .)
    LEFT            reduce using rule 12 (statement -> RETURN NL .)
    RIGHT           reduce using rule 12 (statement -> RETURN NL .)
    LOAD            reduce using rule 12 (statement -> RETURN NL .)
    DROP            reduce using rule 12 (statement -> RETURN NL .)
    LOOK            reduce using rule 12 (statement -> RETURN NL .)
    TEST            reduce using rule 12 (statement -> RETURN NL .)
    SIZEOF          reduce using rule 12 (statement -> RETURN NL .)
    FUNCTION        reduce using rule 12 (statement -> RETURN NL .)
    IDENT           reduce using rule 12 (statement -> RETURN NL .)
    error           reduce using rule 12 (statement -> RETURN NL .)
    INT             reduce using rule 12 (statement -> RETURN NL .)
    CELL            reduce using rule 12 (statement -> RETURN NL .)
    BOOL            reduce using rule 12 (statement -> RETURN NL .)
    VAR             reduce using rule 12 (statement -> RETURN NL .)
    NL              reduce using rule 12 (statement -> RETURN NL .)
    $end            reduce using rule 12 (statement -> RETURN NL .)
    DONE            reduce using rule 12 (statement -> RETURN NL .)
    FINISH          reduce using rule 12 (statement -> RETURN NL .)


state 43

    (13) statement -> empty NL .

    RETURN          reduce using rule 13 (statement -> empty NL .)
    WHILE           reduce using rule 13 (statement -> empty NL .)
    IF              reduce using rule 13 (statement -> empty NL .)
    FORWARD         reduce using rule 13 (statement -> empty NL .)
    BACKWARD        reduce using rule 13 (statement -> empty NL .)
    LEFT            reduce using rule 13 (statement -> empty NL .)
    RIGHT           reduce using rule 13 (statement -> empty NL .)
    LOAD            reduce using rule 13 (statement -> empty NL .)
    DROP            reduce using rule 13 (statement -> empty NL .)
    LOOK            reduce using rule 13 (statement -> empty NL .)
    TEST            reduce using rule 13 (statement -> empty NL .)
    SIZEOF          reduce using rule 13 (statement -> empty NL .)
    FUNCTION        reduce using rule 13 (statement -> empty NL .)
    IDENT           reduce using rule 13 (statement -> empty NL .)
    error           reduce using rule 13 (statement -> empty NL .)
    INT             reduce using rule 13 (statement -> empty NL .)
    CELL            reduce using rule 13 (statement -> empty NL .)
    BOOL            reduce using rule 13 (statement -> empty NL .)
    VAR             reduce using rule 13 (statement -> empty NL .)
    NL              reduce using rule 13 (statement -> empty NL .)
    $end            reduce using rule 13 (statement -> empty NL .)
    DONE            reduce using rule 13 (statement -> empty NL .)
    FINISH          reduce using rule 13 (statement -> empty NL .)


state 44

    (14) statement -> err_list NL .

    RETURN          reduce using rule 14 (statement -> err_list NL .)
    WHILE           reduce using rule 14 (statement -> err_list NL .)
    IF              reduce using rule 14 (statement -> err_list NL .)
    FORWARD         reduce using rule 14 (statement -> err_list NL .)
    BACKWARD        reduce using rule 14 (statement -> err_list NL .)
    LEFT            reduce using rule 14 (statement -> err_list NL .)
    RIGHT           reduce using rule 14 (statement -> err_list NL .)
    LOAD            reduce using rule 14 (statement -> err_list NL .)
    DROP            reduce using rule 14 (statement -> err_list NL .)
    LOOK            reduce using rule 14 (statement -> err_list NL .)
    TEST            reduce using rule 14 (statement -> err_list NL .)
    SIZEOF          reduce using rule 14 (statement -> err_list NL .)
    FUNCTION        reduce using rule 14 (statement -> err_list NL .)
    IDENT           reduce using rule 14 (statement -> err_list NL .)
    error           reduce using rule 14 (statement -> err_list NL .)
    INT             reduce using rule 14 (statement -> err_list NL .)
    CELL            reduce using rule 14 (statement -> err_list NL .)
    BOOL            reduce using rule 14 (statement -> err_list NL .)
    VAR             reduce using rule 14 (statement -> err_list NL .)
    NL              reduce using rule 14 (statement -> err_list NL .)
    $end            reduce using rule 14 (statement -> err_list NL .)
    DONE            reduce using rule 14 (statement -> err_list NL .)
    FINISH          reduce using rule 14 (statement -> err_list NL .)


state 45

    (22) err_list -> err_list error .

    NL              reduce using rule 22 (err_list -> err_list error .)
    error           reduce using rule 22 (err_list -> err_list error .)
    RETURN          reduce using rule 22 (err_list -> err_list error .)
    WHILE           reduce using rule 22 (err_list -> err_list error .)
    IF              reduce using rule 22 (err_list -> err_list error .)
    FORWARD         reduce using rule 22 (err_list -> err_list error .)
    BACKWARD        reduce using rule 22 (err_list -> err_list error .)
    LEFT            reduce using rule 22 (err_list -> err_list error .)
    RIGHT           reduce using rule 22 (err_list -> err_list error .)
    LOAD            reduce using rule 22 (err_list -> err_list error .)
    DROP            reduce using rule 22 (err_list -> err_list error .)
    LOOK            reduce using rule 22 (err_list -> err_list error .)
    TEST            reduce using rule 22 (err_list -> err_list error .)
    SIZEOF          reduce using rule 22 (err_list -> err_list error .)
    FUNCTION        reduce using rule 22 (err_list -> err_list error .)
    IDENT           reduce using rule 22 (err_list -> err_list error .)
    INT             reduce using rule 22 (err_list -> err_list error .)
    CELL            reduce using rule 22 (err_list -> err_list error .)
    BOOL            reduce using rule 22 (err_list -> err_list error .)
    VAR             reduce using rule 22 (err_list -> err_list error .)
    $end            reduce using rule 22 (err_list -> err_list error .)
    DONE            reduce using rule 22 (err_list -> err_list error .)
    FINISH          reduce using rule 22 (err_list -> err_list error .)


state 46

    (16) declaration_list -> type vars_list .

    NL              reduce using rule 16 (declaration_list -> type vars_list .)


state 47

    (24) vars_list -> IDENT . COMMA vars_list
    (26) vars_list -> IDENT .
    (33) variable -> IDENT . OBRACKET expression CBRACKET
    (34) variable -> IDENT .

    COMMA           shift and go to state 81
    NL              reduce using rule 26 (vars_list -> IDENT .)
    OBRACKET        shift and go to state 82
    ASSIGN          reduce using rule 34 (variable -> IDENT .)


state 48

    (25) vars_list -> assignment . COMMA vars_list
    (27) vars_list -> assignment .

    COMMA           shift and go to state 83
    NL              reduce using rule 27 (vars_list -> assignment .)


state 49

    (28) assignment -> variable ASSIGN . expression
    (29) assignment -> variable ASSIGN . array
    (35) expression -> . variable
    (36) expression -> . const
    (37) expression -> . al_expression
    (38) expression -> . function_call
    (39) expression -> . operator
    (30) array -> . OSQBRACKET expr_list CSQBRACKET
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT
    (40) const -> . INF
    (41) const -> . MINUS_INF
    (42) const -> . NAN
    (43) const -> . TRUE
    (44) const -> . FALSE
    (45) const -> . UNDEF
    (46) const -> . EMPTY
    (47) const -> . WALL
    (48) const -> . BOX
    (49) const -> . EXIT
    (50) const -> . DECIMAL
    (51) const -> . HEXADECIMAL
    (52) al_expression -> . expression PLUS expression
    (53) al_expression -> . expression MINUS expression
    (54) al_expression -> . MINUS expression
    (55) al_expression -> . SHARP expression
    (56) al_expression -> . expression CARET expression
    (57) al_expression -> . expression GREATER expression
    (58) al_expression -> . expression LESS expression
    (59) al_expression -> . expression EQUAL expression
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable

    OSQBRACKET      shift and go to state 86
    IDENT           shift and go to state 56
    INF             shift and go to state 57
    MINUS_INF       shift and go to state 58
    NAN             shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    UNDEF           shift and go to state 62
    EMPTY           shift and go to state 63
    WALL            shift and go to state 64
    BOX             shift and go to state 65
    EXIT            shift and go to state 66
    DECIMAL         shift and go to state 67
    HEXADECIMAL     shift and go to state 68
    MINUS           shift and go to state 69
    SHARP           shift and go to state 70
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26

    variable                       shift and go to state 51
    expression                     shift and go to state 84
    array                          shift and go to state 85
    const                          shift and go to state 52
    al_expression                  shift and go to state 53
    function_call                  shift and go to state 54
    operator                       shift and go to state 55

state 50

    (70) while -> WHILE expression . DO stmt_list DONE
    (71) while -> WHILE expression . DO stmt_list FINISH stmt_list DONE
    (52) al_expression -> expression . PLUS expression
    (53) al_expression -> expression . MINUS expression
    (56) al_expression -> expression . CARET expression
    (57) al_expression -> expression . GREATER expression
    (58) al_expression -> expression . LESS expression
    (59) al_expression -> expression . EQUAL expression

    DO              shift and go to state 87
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    CARET           shift and go to state 90
    GREATER         shift and go to state 91
    LESS            shift and go to state 92
    EQUAL           shift and go to state 93


state 51

    (35) expression -> variable .

    DO              reduce using rule 35 (expression -> variable .)
    PLUS            reduce using rule 35 (expression -> variable .)
    MINUS           reduce using rule 35 (expression -> variable .)
    CARET           reduce using rule 35 (expression -> variable .)
    GREATER         reduce using rule 35 (expression -> variable .)
    LESS            reduce using rule 35 (expression -> variable .)
    EQUAL           reduce using rule 35 (expression -> variable .)
    NL              reduce using rule 35 (expression -> variable .)
    COMMA           reduce using rule 35 (expression -> variable .)
    CBRACKET        reduce using rule 35 (expression -> variable .)
    CSQBRACKET      reduce using rule 35 (expression -> variable .)


state 52

    (36) expression -> const .

    DO              reduce using rule 36 (expression -> const .)
    PLUS            reduce using rule 36 (expression -> const .)
    MINUS           reduce using rule 36 (expression -> const .)
    CARET           reduce using rule 36 (expression -> const .)
    GREATER         reduce using rule 36 (expression -> const .)
    LESS            reduce using rule 36 (expression -> const .)
    EQUAL           reduce using rule 36 (expression -> const .)
    NL              reduce using rule 36 (expression -> const .)
    COMMA           reduce using rule 36 (expression -> const .)
    CBRACKET        reduce using rule 36 (expression -> const .)
    CSQBRACKET      reduce using rule 36 (expression -> const .)


state 53

    (37) expression -> al_expression .

    DO              reduce using rule 37 (expression -> al_expression .)
    PLUS            reduce using rule 37 (expression -> al_expression .)
    MINUS           reduce using rule 37 (expression -> al_expression .)
    CARET           reduce using rule 37 (expression -> al_expression .)
    GREATER         reduce using rule 37 (expression -> al_expression .)
    LESS            reduce using rule 37 (expression -> al_expression .)
    EQUAL           reduce using rule 37 (expression -> al_expression .)
    NL              reduce using rule 37 (expression -> al_expression .)
    COMMA           reduce using rule 37 (expression -> al_expression .)
    CBRACKET        reduce using rule 37 (expression -> al_expression .)
    CSQBRACKET      reduce using rule 37 (expression -> al_expression .)


state 54

    (38) expression -> function_call .

    DO              reduce using rule 38 (expression -> function_call .)
    PLUS            reduce using rule 38 (expression -> function_call .)
    MINUS           reduce using rule 38 (expression -> function_call .)
    CARET           reduce using rule 38 (expression -> function_call .)
    GREATER         reduce using rule 38 (expression -> function_call .)
    LESS            reduce using rule 38 (expression -> function_call .)
    EQUAL           reduce using rule 38 (expression -> function_call .)
    NL              reduce using rule 38 (expression -> function_call .)
    COMMA           reduce using rule 38 (expression -> function_call .)
    CBRACKET        reduce using rule 38 (expression -> function_call .)
    CSQBRACKET      reduce using rule 38 (expression -> function_call .)


state 55

    (39) expression -> operator .

    DO              reduce using rule 39 (expression -> operator .)
    PLUS            reduce using rule 39 (expression -> operator .)
    MINUS           reduce using rule 39 (expression -> operator .)
    CARET           reduce using rule 39 (expression -> operator .)
    GREATER         reduce using rule 39 (expression -> operator .)
    LESS            reduce using rule 39 (expression -> operator .)
    EQUAL           reduce using rule 39 (expression -> operator .)
    NL              reduce using rule 39 (expression -> operator .)
    COMMA           reduce using rule 39 (expression -> operator .)
    CBRACKET        reduce using rule 39 (expression -> operator .)
    CSQBRACKET      reduce using rule 39 (expression -> operator .)


state 56

    (33) variable -> IDENT . OBRACKET expression CBRACKET
    (34) variable -> IDENT .
    (60) function_call -> IDENT . OBRACKET variable CBRACKET

    OBRACKET        shift and go to state 94
    DO              reduce using rule 34 (variable -> IDENT .)
    PLUS            reduce using rule 34 (variable -> IDENT .)
    MINUS           reduce using rule 34 (variable -> IDENT .)
    CARET           reduce using rule 34 (variable -> IDENT .)
    GREATER         reduce using rule 34 (variable -> IDENT .)
    LESS            reduce using rule 34 (variable -> IDENT .)
    EQUAL           reduce using rule 34 (variable -> IDENT .)
    NL              reduce using rule 34 (variable -> IDENT .)
    COMMA           reduce using rule 34 (variable -> IDENT .)
    CBRACKET        reduce using rule 34 (variable -> IDENT .)
    CSQBRACKET      reduce using rule 34 (variable -> IDENT .)


state 57

    (40) const -> INF .

    DO              reduce using rule 40 (const -> INF .)
    PLUS            reduce using rule 40 (const -> INF .)
    MINUS           reduce using rule 40 (const -> INF .)
    CARET           reduce using rule 40 (const -> INF .)
    GREATER         reduce using rule 40 (const -> INF .)
    LESS            reduce using rule 40 (const -> INF .)
    EQUAL           reduce using rule 40 (const -> INF .)
    NL              reduce using rule 40 (const -> INF .)
    COMMA           reduce using rule 40 (const -> INF .)
    CBRACKET        reduce using rule 40 (const -> INF .)
    CSQBRACKET      reduce using rule 40 (const -> INF .)


state 58

    (41) const -> MINUS_INF .

    DO              reduce using rule 41 (const -> MINUS_INF .)
    PLUS            reduce using rule 41 (const -> MINUS_INF .)
    MINUS           reduce using rule 41 (const -> MINUS_INF .)
    CARET           reduce using rule 41 (const -> MINUS_INF .)
    GREATER         reduce using rule 41 (const -> MINUS_INF .)
    LESS            reduce using rule 41 (const -> MINUS_INF .)
    EQUAL           reduce using rule 41 (const -> MINUS_INF .)
    NL              reduce using rule 41 (const -> MINUS_INF .)
    COMMA           reduce using rule 41 (const -> MINUS_INF .)
    CBRACKET        reduce using rule 41 (const -> MINUS_INF .)
    CSQBRACKET      reduce using rule 41 (const -> MINUS_INF .)


state 59

    (42) const -> NAN .

    DO              reduce using rule 42 (const -> NAN .)
    PLUS            reduce using rule 42 (const -> NAN .)
    MINUS           reduce using rule 42 (const -> NAN .)
    CARET           reduce using rule 42 (const -> NAN .)
    GREATER         reduce using rule 42 (const -> NAN .)
    LESS            reduce using rule 42 (const -> NAN .)
    EQUAL           reduce using rule 42 (const -> NAN .)
    NL              reduce using rule 42 (const -> NAN .)
    COMMA           reduce using rule 42 (const -> NAN .)
    CBRACKET        reduce using rule 42 (const -> NAN .)
    CSQBRACKET      reduce using rule 42 (const -> NAN .)


state 60

    (43) const -> TRUE .

    DO              reduce using rule 43 (const -> TRUE .)
    PLUS            reduce using rule 43 (const -> TRUE .)
    MINUS           reduce using rule 43 (const -> TRUE .)
    CARET           reduce using rule 43 (const -> TRUE .)
    GREATER         reduce using rule 43 (const -> TRUE .)
    LESS            reduce using rule 43 (const -> TRUE .)
    EQUAL           reduce using rule 43 (const -> TRUE .)
    NL              reduce using rule 43 (const -> TRUE .)
    COMMA           reduce using rule 43 (const -> TRUE .)
    CBRACKET        reduce using rule 43 (const -> TRUE .)
    CSQBRACKET      reduce using rule 43 (const -> TRUE .)


state 61

    (44) const -> FALSE .

    DO              reduce using rule 44 (const -> FALSE .)
    PLUS            reduce using rule 44 (const -> FALSE .)
    MINUS           reduce using rule 44 (const -> FALSE .)
    CARET           reduce using rule 44 (const -> FALSE .)
    GREATER         reduce using rule 44 (const -> FALSE .)
    LESS            reduce using rule 44 (const -> FALSE .)
    EQUAL           reduce using rule 44 (const -> FALSE .)
    NL              reduce using rule 44 (const -> FALSE .)
    COMMA           reduce using rule 44 (const -> FALSE .)
    CBRACKET        reduce using rule 44 (const -> FALSE .)
    CSQBRACKET      reduce using rule 44 (const -> FALSE .)


state 62

    (45) const -> UNDEF .

    DO              reduce using rule 45 (const -> UNDEF .)
    PLUS            reduce using rule 45 (const -> UNDEF .)
    MINUS           reduce using rule 45 (const -> UNDEF .)
    CARET           reduce using rule 45 (const -> UNDEF .)
    GREATER         reduce using rule 45 (const -> UNDEF .)
    LESS            reduce using rule 45 (const -> UNDEF .)
    EQUAL           reduce using rule 45 (const -> UNDEF .)
    NL              reduce using rule 45 (const -> UNDEF .)
    COMMA           reduce using rule 45 (const -> UNDEF .)
    CBRACKET        reduce using rule 45 (const -> UNDEF .)
    CSQBRACKET      reduce using rule 45 (const -> UNDEF .)


state 63

    (46) const -> EMPTY .

    DO              reduce using rule 46 (const -> EMPTY .)
    PLUS            reduce using rule 46 (const -> EMPTY .)
    MINUS           reduce using rule 46 (const -> EMPTY .)
    CARET           reduce using rule 46 (const -> EMPTY .)
    GREATER         reduce using rule 46 (const -> EMPTY .)
    LESS            reduce using rule 46 (const -> EMPTY .)
    EQUAL           reduce using rule 46 (const -> EMPTY .)
    NL              reduce using rule 46 (const -> EMPTY .)
    COMMA           reduce using rule 46 (const -> EMPTY .)
    CBRACKET        reduce using rule 46 (const -> EMPTY .)
    CSQBRACKET      reduce using rule 46 (const -> EMPTY .)


state 64

    (47) const -> WALL .

    DO              reduce using rule 47 (const -> WALL .)
    PLUS            reduce using rule 47 (const -> WALL .)
    MINUS           reduce using rule 47 (const -> WALL .)
    CARET           reduce using rule 47 (const -> WALL .)
    GREATER         reduce using rule 47 (const -> WALL .)
    LESS            reduce using rule 47 (const -> WALL .)
    EQUAL           reduce using rule 47 (const -> WALL .)
    NL              reduce using rule 47 (const -> WALL .)
    COMMA           reduce using rule 47 (const -> WALL .)
    CBRACKET        reduce using rule 47 (const -> WALL .)
    CSQBRACKET      reduce using rule 47 (const -> WALL .)


state 65

    (48) const -> BOX .

    DO              reduce using rule 48 (const -> BOX .)
    PLUS            reduce using rule 48 (const -> BOX .)
    MINUS           reduce using rule 48 (const -> BOX .)
    CARET           reduce using rule 48 (const -> BOX .)
    GREATER         reduce using rule 48 (const -> BOX .)
    LESS            reduce using rule 48 (const -> BOX .)
    EQUAL           reduce using rule 48 (const -> BOX .)
    NL              reduce using rule 48 (const -> BOX .)
    COMMA           reduce using rule 48 (const -> BOX .)
    CBRACKET        reduce using rule 48 (const -> BOX .)
    CSQBRACKET      reduce using rule 48 (const -> BOX .)


state 66

    (49) const -> EXIT .

    DO              reduce using rule 49 (const -> EXIT .)
    PLUS            reduce using rule 49 (const -> EXIT .)
    MINUS           reduce using rule 49 (const -> EXIT .)
    CARET           reduce using rule 49 (const -> EXIT .)
    GREATER         reduce using rule 49 (const -> EXIT .)
    LESS            reduce using rule 49 (const -> EXIT .)
    EQUAL           reduce using rule 49 (const -> EXIT .)
    NL              reduce using rule 49 (const -> EXIT .)
    COMMA           reduce using rule 49 (const -> EXIT .)
    CBRACKET        reduce using rule 49 (const -> EXIT .)
    CSQBRACKET      reduce using rule 49 (const -> EXIT .)


state 67

    (50) const -> DECIMAL .

    DO              reduce using rule 50 (const -> DECIMAL .)
    PLUS            reduce using rule 50 (const -> DECIMAL .)
    MINUS           reduce using rule 50 (const -> DECIMAL .)
    CARET           reduce using rule 50 (const -> DECIMAL .)
    GREATER         reduce using rule 50 (const -> DECIMAL .)
    LESS            reduce using rule 50 (const -> DECIMAL .)
    EQUAL           reduce using rule 50 (const -> DECIMAL .)
    NL              reduce using rule 50 (const -> DECIMAL .)
    COMMA           reduce using rule 50 (const -> DECIMAL .)
    CBRACKET        reduce using rule 50 (const -> DECIMAL .)
    CSQBRACKET      reduce using rule 50 (const -> DECIMAL .)


state 68

    (51) const -> HEXADECIMAL .

    DO              reduce using rule 51 (const -> HEXADECIMAL .)
    PLUS            reduce using rule 51 (const -> HEXADECIMAL .)
    MINUS           reduce using rule 51 (const -> HEXADECIMAL .)
    CARET           reduce using rule 51 (const -> HEXADECIMAL .)
    GREATER         reduce using rule 51 (const -> HEXADECIMAL .)
    LESS            reduce using rule 51 (const -> HEXADECIMAL .)
    EQUAL           reduce using rule 51 (const -> HEXADECIMAL .)
    NL              reduce using rule 51 (const -> HEXADECIMAL .)
    COMMA           reduce using rule 51 (const -> HEXADECIMAL .)
    CBRACKET        reduce using rule 51 (const -> HEXADECIMAL .)
    CSQBRACKET      reduce using rule 51 (const -> HEXADECIMAL .)


state 69

    (54) al_expression -> MINUS . expression
    (35) expression -> . variable
    (36) expression -> . const
    (37) expression -> . al_expression
    (38) expression -> . function_call
    (39) expression -> . operator
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT
    (40) const -> . INF
    (41) const -> . MINUS_INF
    (42) const -> . NAN
    (43) const -> . TRUE
    (44) const -> . FALSE
    (45) const -> . UNDEF
    (46) const -> . EMPTY
    (47) const -> . WALL
    (48) const -> . BOX
    (49) const -> . EXIT
    (50) const -> . DECIMAL
    (51) const -> . HEXADECIMAL
    (52) al_expression -> . expression PLUS expression
    (53) al_expression -> . expression MINUS expression
    (54) al_expression -> . MINUS expression
    (55) al_expression -> . SHARP expression
    (56) al_expression -> . expression CARET expression
    (57) al_expression -> . expression GREATER expression
    (58) al_expression -> . expression LESS expression
    (59) al_expression -> . expression EQUAL expression
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable

    IDENT           shift and go to state 56
    INF             shift and go to state 57
    MINUS_INF       shift and go to state 58
    NAN             shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    UNDEF           shift and go to state 62
    EMPTY           shift and go to state 63
    WALL            shift and go to state 64
    BOX             shift and go to state 65
    EXIT            shift and go to state 66
    DECIMAL         shift and go to state 67
    HEXADECIMAL     shift and go to state 68
    MINUS           shift and go to state 69
    SHARP           shift and go to state 70
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26

    expression                     shift and go to state 95
    variable                       shift and go to state 51
    const                          shift and go to state 52
    al_expression                  shift and go to state 53
    function_call                  shift and go to state 54
    operator                       shift and go to state 55

state 70

    (55) al_expression -> SHARP . expression
    (35) expression -> . variable
    (36) expression -> . const
    (37) expression -> . al_expression
    (38) expression -> . function_call
    (39) expression -> . operator
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT
    (40) const -> . INF
    (41) const -> . MINUS_INF
    (42) const -> . NAN
    (43) const -> . TRUE
    (44) const -> . FALSE
    (45) const -> . UNDEF
    (46) const -> . EMPTY
    (47) const -> . WALL
    (48) const -> . BOX
    (49) const -> . EXIT
    (50) const -> . DECIMAL
    (51) const -> . HEXADECIMAL
    (52) al_expression -> . expression PLUS expression
    (53) al_expression -> . expression MINUS expression
    (54) al_expression -> . MINUS expression
    (55) al_expression -> . SHARP expression
    (56) al_expression -> . expression CARET expression
    (57) al_expression -> . expression GREATER expression
    (58) al_expression -> . expression LESS expression
    (59) al_expression -> . expression EQUAL expression
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable

    IDENT           shift and go to state 56
    INF             shift and go to state 57
    MINUS_INF       shift and go to state 58
    NAN             shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    UNDEF           shift and go to state 62
    EMPTY           shift and go to state 63
    WALL            shift and go to state 64
    BOX             shift and go to state 65
    EXIT            shift and go to state 66
    DECIMAL         shift and go to state 67
    HEXADECIMAL     shift and go to state 68
    MINUS           shift and go to state 69
    SHARP           shift and go to state 70
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26

    expression                     shift and go to state 96
    variable                       shift and go to state 51
    const                          shift and go to state 52
    al_expression                  shift and go to state 53
    function_call                  shift and go to state 54
    operator                       shift and go to state 55

state 71

    (72) if -> IF expression . DO stmt_list DONE
    (73) if -> IF expression . DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (74) if -> IF expression . DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> IF expression . DO stmt_list DONE NL ELUND DO stmt_list DONE
    (52) al_expression -> expression . PLUS expression
    (53) al_expression -> expression . MINUS expression
    (56) al_expression -> expression . CARET expression
    (57) al_expression -> expression . GREATER expression
    (58) al_expression -> expression . LESS expression
    (59) al_expression -> expression . EQUAL expression

    DO              shift and go to state 97
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    CARET           shift and go to state 90
    GREATER         shift and go to state 91
    LESS            shift and go to state 92
    EQUAL           shift and go to state 93


state 72

    (61) operator -> FORWARD expression .
    (52) al_expression -> expression . PLUS expression
    (53) al_expression -> expression . MINUS expression
    (56) al_expression -> expression . CARET expression
    (57) al_expression -> expression . GREATER expression
    (58) al_expression -> expression . LESS expression
    (59) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    NL              reduce using rule 61 (operator -> FORWARD expression .)
    DO              reduce using rule 61 (operator -> FORWARD expression .)
    COMMA           reduce using rule 61 (operator -> FORWARD expression .)
    CBRACKET        reduce using rule 61 (operator -> FORWARD expression .)
    CSQBRACKET      reduce using rule 61 (operator -> FORWARD expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    CARET           shift and go to state 90
    GREATER         shift and go to state 91
    LESS            shift and go to state 92
    EQUAL           shift and go to state 93

  ! PLUS            [ reduce using rule 61 (operator -> FORWARD expression .) ]
  ! MINUS           [ reduce using rule 61 (operator -> FORWARD expression .) ]
  ! CARET           [ reduce using rule 61 (operator -> FORWARD expression .) ]
  ! GREATER         [ reduce using rule 61 (operator -> FORWARD expression .) ]
  ! LESS            [ reduce using rule 61 (operator -> FORWARD expression .) ]
  ! EQUAL           [ reduce using rule 61 (operator -> FORWARD expression .) ]


state 73

    (62) operator -> BACKWARD expression .
    (52) al_expression -> expression . PLUS expression
    (53) al_expression -> expression . MINUS expression
    (56) al_expression -> expression . CARET expression
    (57) al_expression -> expression . GREATER expression
    (58) al_expression -> expression . LESS expression
    (59) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    NL              reduce using rule 62 (operator -> BACKWARD expression .)
    DO              reduce using rule 62 (operator -> BACKWARD expression .)
    COMMA           reduce using rule 62 (operator -> BACKWARD expression .)
    CBRACKET        reduce using rule 62 (operator -> BACKWARD expression .)
    CSQBRACKET      reduce using rule 62 (operator -> BACKWARD expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    CARET           shift and go to state 90
    GREATER         shift and go to state 91
    LESS            shift and go to state 92
    EQUAL           shift and go to state 93

  ! PLUS            [ reduce using rule 62 (operator -> BACKWARD expression .) ]
  ! MINUS           [ reduce using rule 62 (operator -> BACKWARD expression .) ]
  ! CARET           [ reduce using rule 62 (operator -> BACKWARD expression .) ]
  ! GREATER         [ reduce using rule 62 (operator -> BACKWARD expression .) ]
  ! LESS            [ reduce using rule 62 (operator -> BACKWARD expression .) ]
  ! EQUAL           [ reduce using rule 62 (operator -> BACKWARD expression .) ]


state 74

    (65) operator -> LOAD expression .
    (52) al_expression -> expression . PLUS expression
    (53) al_expression -> expression . MINUS expression
    (56) al_expression -> expression . CARET expression
    (57) al_expression -> expression . GREATER expression
    (58) al_expression -> expression . LESS expression
    (59) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    NL              reduce using rule 65 (operator -> LOAD expression .)
    DO              reduce using rule 65 (operator -> LOAD expression .)
    COMMA           reduce using rule 65 (operator -> LOAD expression .)
    CBRACKET        reduce using rule 65 (operator -> LOAD expression .)
    CSQBRACKET      reduce using rule 65 (operator -> LOAD expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    CARET           shift and go to state 90
    GREATER         shift and go to state 91
    LESS            shift and go to state 92
    EQUAL           shift and go to state 93

  ! PLUS            [ reduce using rule 65 (operator -> LOAD expression .) ]
  ! MINUS           [ reduce using rule 65 (operator -> LOAD expression .) ]
  ! CARET           [ reduce using rule 65 (operator -> LOAD expression .) ]
  ! GREATER         [ reduce using rule 65 (operator -> LOAD expression .) ]
  ! LESS            [ reduce using rule 65 (operator -> LOAD expression .) ]
  ! EQUAL           [ reduce using rule 65 (operator -> LOAD expression .) ]


state 75

    (66) operator -> DROP expression .
    (52) al_expression -> expression . PLUS expression
    (53) al_expression -> expression . MINUS expression
    (56) al_expression -> expression . CARET expression
    (57) al_expression -> expression . GREATER expression
    (58) al_expression -> expression . LESS expression
    (59) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    NL              reduce using rule 66 (operator -> DROP expression .)
    DO              reduce using rule 66 (operator -> DROP expression .)
    COMMA           reduce using rule 66 (operator -> DROP expression .)
    CBRACKET        reduce using rule 66 (operator -> DROP expression .)
    CSQBRACKET      reduce using rule 66 (operator -> DROP expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    CARET           shift and go to state 90
    GREATER         shift and go to state 91
    LESS            shift and go to state 92
    EQUAL           shift and go to state 93

  ! PLUS            [ reduce using rule 66 (operator -> DROP expression .) ]
  ! MINUS           [ reduce using rule 66 (operator -> DROP expression .) ]
  ! CARET           [ reduce using rule 66 (operator -> DROP expression .) ]
  ! GREATER         [ reduce using rule 66 (operator -> DROP expression .) ]
  ! LESS            [ reduce using rule 66 (operator -> DROP expression .) ]
  ! EQUAL           [ reduce using rule 66 (operator -> DROP expression .) ]


state 76

    (69) operator -> SIZEOF variable .

    NL              reduce using rule 69 (operator -> SIZEOF variable .)
    DO              reduce using rule 69 (operator -> SIZEOF variable .)
    PLUS            reduce using rule 69 (operator -> SIZEOF variable .)
    MINUS           reduce using rule 69 (operator -> SIZEOF variable .)
    CARET           reduce using rule 69 (operator -> SIZEOF variable .)
    GREATER         reduce using rule 69 (operator -> SIZEOF variable .)
    LESS            reduce using rule 69 (operator -> SIZEOF variable .)
    EQUAL           reduce using rule 69 (operator -> SIZEOF variable .)
    COMMA           reduce using rule 69 (operator -> SIZEOF variable .)
    CBRACKET        reduce using rule 69 (operator -> SIZEOF variable .)
    CSQBRACKET      reduce using rule 69 (operator -> SIZEOF variable .)


state 77

    (33) variable -> IDENT . OBRACKET expression CBRACKET
    (34) variable -> IDENT .

    OBRACKET        shift and go to state 82
    NL              reduce using rule 34 (variable -> IDENT .)
    DO              reduce using rule 34 (variable -> IDENT .)
    PLUS            reduce using rule 34 (variable -> IDENT .)
    MINUS           reduce using rule 34 (variable -> IDENT .)
    CARET           reduce using rule 34 (variable -> IDENT .)
    GREATER         reduce using rule 34 (variable -> IDENT .)
    LESS            reduce using rule 34 (variable -> IDENT .)
    EQUAL           reduce using rule 34 (variable -> IDENT .)
    COMMA           reduce using rule 34 (variable -> IDENT .)
    CBRACKET        reduce using rule 34 (variable -> IDENT .)
    CSQBRACKET      reduce using rule 34 (variable -> IDENT .)


state 78

    (76) function -> FUNCTION OBRACKET . IDENT CBRACKET DO stmt_list DONE

    IDENT           shift and go to state 98


state 79

    (77) function -> FUNCTION IDENT . OBRACKET IDENT CBRACKET DO NL stmt_list DONE

    OBRACKET        shift and go to state 99


state 80

    (60) function_call -> IDENT OBRACKET . variable CBRACKET
    (33) variable -> IDENT OBRACKET . expression CBRACKET
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT
    (35) expression -> . variable
    (36) expression -> . const
    (37) expression -> . al_expression
    (38) expression -> . function_call
    (39) expression -> . operator
    (40) const -> . INF
    (41) const -> . MINUS_INF
    (42) const -> . NAN
    (43) const -> . TRUE
    (44) const -> . FALSE
    (45) const -> . UNDEF
    (46) const -> . EMPTY
    (47) const -> . WALL
    (48) const -> . BOX
    (49) const -> . EXIT
    (50) const -> . DECIMAL
    (51) const -> . HEXADECIMAL
    (52) al_expression -> . expression PLUS expression
    (53) al_expression -> . expression MINUS expression
    (54) al_expression -> . MINUS expression
    (55) al_expression -> . SHARP expression
    (56) al_expression -> . expression CARET expression
    (57) al_expression -> . expression GREATER expression
    (58) al_expression -> . expression LESS expression
    (59) al_expression -> . expression EQUAL expression
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable

    IDENT           shift and go to state 56
    INF             shift and go to state 57
    MINUS_INF       shift and go to state 58
    NAN             shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    UNDEF           shift and go to state 62
    EMPTY           shift and go to state 63
    WALL            shift and go to state 64
    BOX             shift and go to state 65
    EXIT            shift and go to state 66
    DECIMAL         shift and go to state 67
    HEXADECIMAL     shift and go to state 68
    MINUS           shift and go to state 69
    SHARP           shift and go to state 70
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26

    variable                       shift and go to state 100
    expression                     shift and go to state 101
    const                          shift and go to state 52
    al_expression                  shift and go to state 53
    function_call                  shift and go to state 54
    operator                       shift and go to state 55

state 81

    (24) vars_list -> IDENT COMMA . vars_list
    (24) vars_list -> . IDENT COMMA vars_list
    (25) vars_list -> . assignment COMMA vars_list
    (26) vars_list -> . IDENT
    (27) vars_list -> . assignment
    (28) assignment -> . variable ASSIGN expression
    (29) assignment -> . variable ASSIGN array
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    IDENT           shift and go to state 47

    vars_list                      shift and go to state 102
    assignment                     shift and go to state 48
    variable                       shift and go to state 15

state 82

    (33) variable -> IDENT OBRACKET . expression CBRACKET
    (35) expression -> . variable
    (36) expression -> . const
    (37) expression -> . al_expression
    (38) expression -> . function_call
    (39) expression -> . operator
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT
    (40) const -> . INF
    (41) const -> . MINUS_INF
    (42) const -> . NAN
    (43) const -> . TRUE
    (44) const -> . FALSE
    (45) const -> . UNDEF
    (46) const -> . EMPTY
    (47) const -> . WALL
    (48) const -> . BOX
    (49) const -> . EXIT
    (50) const -> . DECIMAL
    (51) const -> . HEXADECIMAL
    (52) al_expression -> . expression PLUS expression
    (53) al_expression -> . expression MINUS expression
    (54) al_expression -> . MINUS expression
    (55) al_expression -> . SHARP expression
    (56) al_expression -> . expression CARET expression
    (57) al_expression -> . expression GREATER expression
    (58) al_expression -> . expression LESS expression
    (59) al_expression -> . expression EQUAL expression
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable

    IDENT           shift and go to state 56
    INF             shift and go to state 57
    MINUS_INF       shift and go to state 58
    NAN             shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    UNDEF           shift and go to state 62
    EMPTY           shift and go to state 63
    WALL            shift and go to state 64
    BOX             shift and go to state 65
    EXIT            shift and go to state 66
    DECIMAL         shift and go to state 67
    HEXADECIMAL     shift and go to state 68
    MINUS           shift and go to state 69
    SHARP           shift and go to state 70
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26

    expression                     shift and go to state 101
    variable                       shift and go to state 51
    const                          shift and go to state 52
    al_expression                  shift and go to state 53
    function_call                  shift and go to state 54
    operator                       shift and go to state 55

state 83

    (25) vars_list -> assignment COMMA . vars_list
    (24) vars_list -> . IDENT COMMA vars_list
    (25) vars_list -> . assignment COMMA vars_list
    (26) vars_list -> . IDENT
    (27) vars_list -> . assignment
    (28) assignment -> . variable ASSIGN expression
    (29) assignment -> . variable ASSIGN array
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    IDENT           shift and go to state 47

    assignment                     shift and go to state 48
    vars_list                      shift and go to state 103
    variable                       shift and go to state 15

state 84

    (28) assignment -> variable ASSIGN expression .
    (52) al_expression -> expression . PLUS expression
    (53) al_expression -> expression . MINUS expression
    (56) al_expression -> expression . CARET expression
    (57) al_expression -> expression . GREATER expression
    (58) al_expression -> expression . LESS expression
    (59) al_expression -> expression . EQUAL expression

    NL              reduce using rule 28 (assignment -> variable ASSIGN expression .)
    COMMA           reduce using rule 28 (assignment -> variable ASSIGN expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    CARET           shift and go to state 90
    GREATER         shift and go to state 91
    LESS            shift and go to state 92
    EQUAL           shift and go to state 93


state 85

    (29) assignment -> variable ASSIGN array .

    NL              reduce using rule 29 (assignment -> variable ASSIGN array .)
    COMMA           reduce using rule 29 (assignment -> variable ASSIGN array .)


state 86

    (30) array -> OSQBRACKET . expr_list CSQBRACKET
    (31) expr_list -> . expr_list COMMA expression
    (32) expr_list -> . expression
    (35) expression -> . variable
    (36) expression -> . const
    (37) expression -> . al_expression
    (38) expression -> . function_call
    (39) expression -> . operator
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT
    (40) const -> . INF
    (41) const -> . MINUS_INF
    (42) const -> . NAN
    (43) const -> . TRUE
    (44) const -> . FALSE
    (45) const -> . UNDEF
    (46) const -> . EMPTY
    (47) const -> . WALL
    (48) const -> . BOX
    (49) const -> . EXIT
    (50) const -> . DECIMAL
    (51) const -> . HEXADECIMAL
    (52) al_expression -> . expression PLUS expression
    (53) al_expression -> . expression MINUS expression
    (54) al_expression -> . MINUS expression
    (55) al_expression -> . SHARP expression
    (56) al_expression -> . expression CARET expression
    (57) al_expression -> . expression GREATER expression
    (58) al_expression -> . expression LESS expression
    (59) al_expression -> . expression EQUAL expression
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable

    IDENT           shift and go to state 56
    INF             shift and go to state 57
    MINUS_INF       shift and go to state 58
    NAN             shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    UNDEF           shift and go to state 62
    EMPTY           shift and go to state 63
    WALL            shift and go to state 64
    BOX             shift and go to state 65
    EXIT            shift and go to state 66
    DECIMAL         shift and go to state 67
    HEXADECIMAL     shift and go to state 68
    MINUS           shift and go to state 69
    SHARP           shift and go to state 70
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26

    expr_list                      shift and go to state 104
    expression                     shift and go to state 105
    variable                       shift and go to state 51
    const                          shift and go to state 52
    al_expression                  shift and go to state 53
    function_call                  shift and go to state 54
    operator                       shift and go to state 55

state 87

    (70) while -> WHILE expression DO . stmt_list DONE
    (71) while -> WHILE expression DO . stmt_list FINISH stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) statement -> . err_list NL
    (15) statement -> . err_list
    (16) declaration_list -> . type vars_list
    (28) assignment -> . variable ASSIGN expression
    (29) assignment -> . variable ASSIGN array
    (70) while -> . WHILE expression DO stmt_list DONE
    (71) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (72) if -> . IF expression DO stmt_list DONE
    (73) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (74) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable
    (76) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (77) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (22) err_list -> . err_list error
    (23) err_list -> . error
    (17) type -> . INT
    (18) type -> . CELL
    (19) type -> . BOOL
    (20) type -> . VAR
    (21) type -> . err_list
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26
    FUNCTION        shift and go to state 27
    IDENT           shift and go to state 28
    NL              reduce using rule 2 (empty -> .)
    error           shift and go to state 29
    INT             shift and go to state 30
    CELL            shift and go to state 31
    BOOL            shift and go to state 32
    VAR             shift and go to state 33

    stmt_list                      shift and go to state 106
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    err_list                       shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 88

    (52) al_expression -> expression PLUS . expression
    (35) expression -> . variable
    (36) expression -> . const
    (37) expression -> . al_expression
    (38) expression -> . function_call
    (39) expression -> . operator
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT
    (40) const -> . INF
    (41) const -> . MINUS_INF
    (42) const -> . NAN
    (43) const -> . TRUE
    (44) const -> . FALSE
    (45) const -> . UNDEF
    (46) const -> . EMPTY
    (47) const -> . WALL
    (48) const -> . BOX
    (49) const -> . EXIT
    (50) const -> . DECIMAL
    (51) const -> . HEXADECIMAL
    (52) al_expression -> . expression PLUS expression
    (53) al_expression -> . expression MINUS expression
    (54) al_expression -> . MINUS expression
    (55) al_expression -> . SHARP expression
    (56) al_expression -> . expression CARET expression
    (57) al_expression -> . expression GREATER expression
    (58) al_expression -> . expression LESS expression
    (59) al_expression -> . expression EQUAL expression
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable

    IDENT           shift and go to state 56
    INF             shift and go to state 57
    MINUS_INF       shift and go to state 58
    NAN             shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    UNDEF           shift and go to state 62
    EMPTY           shift and go to state 63
    WALL            shift and go to state 64
    BOX             shift and go to state 65
    EXIT            shift and go to state 66
    DECIMAL         shift and go to state 67
    HEXADECIMAL     shift and go to state 68
    MINUS           shift and go to state 69
    SHARP           shift and go to state 70
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26

    expression                     shift and go to state 107
    variable                       shift and go to state 51
    const                          shift and go to state 52
    al_expression                  shift and go to state 53
    function_call                  shift and go to state 54
    operator                       shift and go to state 55

state 89

    (53) al_expression -> expression MINUS . expression
    (35) expression -> . variable
    (36) expression -> . const
    (37) expression -> . al_expression
    (38) expression -> . function_call
    (39) expression -> . operator
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT
    (40) const -> . INF
    (41) const -> . MINUS_INF
    (42) const -> . NAN
    (43) const -> . TRUE
    (44) const -> . FALSE
    (45) const -> . UNDEF
    (46) const -> . EMPTY
    (47) const -> . WALL
    (48) const -> . BOX
    (49) const -> . EXIT
    (50) const -> . DECIMAL
    (51) const -> . HEXADECIMAL
    (52) al_expression -> . expression PLUS expression
    (53) al_expression -> . expression MINUS expression
    (54) al_expression -> . MINUS expression
    (55) al_expression -> . SHARP expression
    (56) al_expression -> . expression CARET expression
    (57) al_expression -> . expression GREATER expression
    (58) al_expression -> . expression LESS expression
    (59) al_expression -> . expression EQUAL expression
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable

    IDENT           shift and go to state 56
    INF             shift and go to state 57
    MINUS_INF       shift and go to state 58
    NAN             shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    UNDEF           shift and go to state 62
    EMPTY           shift and go to state 63
    WALL            shift and go to state 64
    BOX             shift and go to state 65
    EXIT            shift and go to state 66
    DECIMAL         shift and go to state 67
    HEXADECIMAL     shift and go to state 68
    MINUS           shift and go to state 69
    SHARP           shift and go to state 70
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26

    expression                     shift and go to state 108
    variable                       shift and go to state 51
    const                          shift and go to state 52
    al_expression                  shift and go to state 53
    function_call                  shift and go to state 54
    operator                       shift and go to state 55

state 90

    (56) al_expression -> expression CARET . expression
    (35) expression -> . variable
    (36) expression -> . const
    (37) expression -> . al_expression
    (38) expression -> . function_call
    (39) expression -> . operator
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT
    (40) const -> . INF
    (41) const -> . MINUS_INF
    (42) const -> . NAN
    (43) const -> . TRUE
    (44) const -> . FALSE
    (45) const -> . UNDEF
    (46) const -> . EMPTY
    (47) const -> . WALL
    (48) const -> . BOX
    (49) const -> . EXIT
    (50) const -> . DECIMAL
    (51) const -> . HEXADECIMAL
    (52) al_expression -> . expression PLUS expression
    (53) al_expression -> . expression MINUS expression
    (54) al_expression -> . MINUS expression
    (55) al_expression -> . SHARP expression
    (56) al_expression -> . expression CARET expression
    (57) al_expression -> . expression GREATER expression
    (58) al_expression -> . expression LESS expression
    (59) al_expression -> . expression EQUAL expression
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable

    IDENT           shift and go to state 56
    INF             shift and go to state 57
    MINUS_INF       shift and go to state 58
    NAN             shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    UNDEF           shift and go to state 62
    EMPTY           shift and go to state 63
    WALL            shift and go to state 64
    BOX             shift and go to state 65
    EXIT            shift and go to state 66
    DECIMAL         shift and go to state 67
    HEXADECIMAL     shift and go to state 68
    MINUS           shift and go to state 69
    SHARP           shift and go to state 70
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26

    expression                     shift and go to state 109
    variable                       shift and go to state 51
    const                          shift and go to state 52
    al_expression                  shift and go to state 53
    function_call                  shift and go to state 54
    operator                       shift and go to state 55

state 91

    (57) al_expression -> expression GREATER . expression
    (35) expression -> . variable
    (36) expression -> . const
    (37) expression -> . al_expression
    (38) expression -> . function_call
    (39) expression -> . operator
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT
    (40) const -> . INF
    (41) const -> . MINUS_INF
    (42) const -> . NAN
    (43) const -> . TRUE
    (44) const -> . FALSE
    (45) const -> . UNDEF
    (46) const -> . EMPTY
    (47) const -> . WALL
    (48) const -> . BOX
    (49) const -> . EXIT
    (50) const -> . DECIMAL
    (51) const -> . HEXADECIMAL
    (52) al_expression -> . expression PLUS expression
    (53) al_expression -> . expression MINUS expression
    (54) al_expression -> . MINUS expression
    (55) al_expression -> . SHARP expression
    (56) al_expression -> . expression CARET expression
    (57) al_expression -> . expression GREATER expression
    (58) al_expression -> . expression LESS expression
    (59) al_expression -> . expression EQUAL expression
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable

    IDENT           shift and go to state 56
    INF             shift and go to state 57
    MINUS_INF       shift and go to state 58
    NAN             shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    UNDEF           shift and go to state 62
    EMPTY           shift and go to state 63
    WALL            shift and go to state 64
    BOX             shift and go to state 65
    EXIT            shift and go to state 66
    DECIMAL         shift and go to state 67
    HEXADECIMAL     shift and go to state 68
    MINUS           shift and go to state 69
    SHARP           shift and go to state 70
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26

    expression                     shift and go to state 110
    variable                       shift and go to state 51
    const                          shift and go to state 52
    al_expression                  shift and go to state 53
    function_call                  shift and go to state 54
    operator                       shift and go to state 55

state 92

    (58) al_expression -> expression LESS . expression
    (35) expression -> . variable
    (36) expression -> . const
    (37) expression -> . al_expression
    (38) expression -> . function_call
    (39) expression -> . operator
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT
    (40) const -> . INF
    (41) const -> . MINUS_INF
    (42) const -> . NAN
    (43) const -> . TRUE
    (44) const -> . FALSE
    (45) const -> . UNDEF
    (46) const -> . EMPTY
    (47) const -> . WALL
    (48) const -> . BOX
    (49) const -> . EXIT
    (50) const -> . DECIMAL
    (51) const -> . HEXADECIMAL
    (52) al_expression -> . expression PLUS expression
    (53) al_expression -> . expression MINUS expression
    (54) al_expression -> . MINUS expression
    (55) al_expression -> . SHARP expression
    (56) al_expression -> . expression CARET expression
    (57) al_expression -> . expression GREATER expression
    (58) al_expression -> . expression LESS expression
    (59) al_expression -> . expression EQUAL expression
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable

    IDENT           shift and go to state 56
    INF             shift and go to state 57
    MINUS_INF       shift and go to state 58
    NAN             shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    UNDEF           shift and go to state 62
    EMPTY           shift and go to state 63
    WALL            shift and go to state 64
    BOX             shift and go to state 65
    EXIT            shift and go to state 66
    DECIMAL         shift and go to state 67
    HEXADECIMAL     shift and go to state 68
    MINUS           shift and go to state 69
    SHARP           shift and go to state 70
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26

    expression                     shift and go to state 111
    variable                       shift and go to state 51
    const                          shift and go to state 52
    al_expression                  shift and go to state 53
    function_call                  shift and go to state 54
    operator                       shift and go to state 55

state 93

    (59) al_expression -> expression EQUAL . expression
    (35) expression -> . variable
    (36) expression -> . const
    (37) expression -> . al_expression
    (38) expression -> . function_call
    (39) expression -> . operator
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT
    (40) const -> . INF
    (41) const -> . MINUS_INF
    (42) const -> . NAN
    (43) const -> . TRUE
    (44) const -> . FALSE
    (45) const -> . UNDEF
    (46) const -> . EMPTY
    (47) const -> . WALL
    (48) const -> . BOX
    (49) const -> . EXIT
    (50) const -> . DECIMAL
    (51) const -> . HEXADECIMAL
    (52) al_expression -> . expression PLUS expression
    (53) al_expression -> . expression MINUS expression
    (54) al_expression -> . MINUS expression
    (55) al_expression -> . SHARP expression
    (56) al_expression -> . expression CARET expression
    (57) al_expression -> . expression GREATER expression
    (58) al_expression -> . expression LESS expression
    (59) al_expression -> . expression EQUAL expression
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable

    IDENT           shift and go to state 56
    INF             shift and go to state 57
    MINUS_INF       shift and go to state 58
    NAN             shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    UNDEF           shift and go to state 62
    EMPTY           shift and go to state 63
    WALL            shift and go to state 64
    BOX             shift and go to state 65
    EXIT            shift and go to state 66
    DECIMAL         shift and go to state 67
    HEXADECIMAL     shift and go to state 68
    MINUS           shift and go to state 69
    SHARP           shift and go to state 70
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26

    expression                     shift and go to state 112
    variable                       shift and go to state 51
    const                          shift and go to state 52
    al_expression                  shift and go to state 53
    function_call                  shift and go to state 54
    operator                       shift and go to state 55

state 94

    (33) variable -> IDENT OBRACKET . expression CBRACKET
    (60) function_call -> IDENT OBRACKET . variable CBRACKET
    (35) expression -> . variable
    (36) expression -> . const
    (37) expression -> . al_expression
    (38) expression -> . function_call
    (39) expression -> . operator
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT
    (40) const -> . INF
    (41) const -> . MINUS_INF
    (42) const -> . NAN
    (43) const -> . TRUE
    (44) const -> . FALSE
    (45) const -> . UNDEF
    (46) const -> . EMPTY
    (47) const -> . WALL
    (48) const -> . BOX
    (49) const -> . EXIT
    (50) const -> . DECIMAL
    (51) const -> . HEXADECIMAL
    (52) al_expression -> . expression PLUS expression
    (53) al_expression -> . expression MINUS expression
    (54) al_expression -> . MINUS expression
    (55) al_expression -> . SHARP expression
    (56) al_expression -> . expression CARET expression
    (57) al_expression -> . expression GREATER expression
    (58) al_expression -> . expression LESS expression
    (59) al_expression -> . expression EQUAL expression
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable

    IDENT           shift and go to state 56
    INF             shift and go to state 57
    MINUS_INF       shift and go to state 58
    NAN             shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    UNDEF           shift and go to state 62
    EMPTY           shift and go to state 63
    WALL            shift and go to state 64
    BOX             shift and go to state 65
    EXIT            shift and go to state 66
    DECIMAL         shift and go to state 67
    HEXADECIMAL     shift and go to state 68
    MINUS           shift and go to state 69
    SHARP           shift and go to state 70
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26

    expression                     shift and go to state 101
    variable                       shift and go to state 100
    const                          shift and go to state 52
    al_expression                  shift and go to state 53
    function_call                  shift and go to state 54
    operator                       shift and go to state 55

state 95

    (54) al_expression -> MINUS expression .
    (52) al_expression -> expression . PLUS expression
    (53) al_expression -> expression . MINUS expression
    (56) al_expression -> expression . CARET expression
    (57) al_expression -> expression . GREATER expression
    (58) al_expression -> expression . LESS expression
    (59) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 54 (al_expression -> MINUS expression .)
    NL              reduce using rule 54 (al_expression -> MINUS expression .)
    COMMA           reduce using rule 54 (al_expression -> MINUS expression .)
    CBRACKET        reduce using rule 54 (al_expression -> MINUS expression .)
    CSQBRACKET      reduce using rule 54 (al_expression -> MINUS expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    CARET           shift and go to state 90
    GREATER         shift and go to state 91
    LESS            shift and go to state 92
    EQUAL           shift and go to state 93

  ! PLUS            [ reduce using rule 54 (al_expression -> MINUS expression .) ]
  ! MINUS           [ reduce using rule 54 (al_expression -> MINUS expression .) ]
  ! CARET           [ reduce using rule 54 (al_expression -> MINUS expression .) ]
  ! GREATER         [ reduce using rule 54 (al_expression -> MINUS expression .) ]
  ! LESS            [ reduce using rule 54 (al_expression -> MINUS expression .) ]
  ! EQUAL           [ reduce using rule 54 (al_expression -> MINUS expression .) ]


state 96

    (55) al_expression -> SHARP expression .
    (52) al_expression -> expression . PLUS expression
    (53) al_expression -> expression . MINUS expression
    (56) al_expression -> expression . CARET expression
    (57) al_expression -> expression . GREATER expression
    (58) al_expression -> expression . LESS expression
    (59) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 55 (al_expression -> SHARP expression .)
    NL              reduce using rule 55 (al_expression -> SHARP expression .)
    COMMA           reduce using rule 55 (al_expression -> SHARP expression .)
    CBRACKET        reduce using rule 55 (al_expression -> SHARP expression .)
    CSQBRACKET      reduce using rule 55 (al_expression -> SHARP expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    CARET           shift and go to state 90
    GREATER         shift and go to state 91
    LESS            shift and go to state 92
    EQUAL           shift and go to state 93

  ! PLUS            [ reduce using rule 55 (al_expression -> SHARP expression .) ]
  ! MINUS           [ reduce using rule 55 (al_expression -> SHARP expression .) ]
  ! CARET           [ reduce using rule 55 (al_expression -> SHARP expression .) ]
  ! GREATER         [ reduce using rule 55 (al_expression -> SHARP expression .) ]
  ! LESS            [ reduce using rule 55 (al_expression -> SHARP expression .) ]
  ! EQUAL           [ reduce using rule 55 (al_expression -> SHARP expression .) ]


state 97

    (72) if -> IF expression DO . stmt_list DONE
    (73) if -> IF expression DO . stmt_list DONE NL ELDEF DO stmt_list DONE
    (74) if -> IF expression DO . stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> IF expression DO . stmt_list DONE NL ELUND DO stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) statement -> . err_list NL
    (15) statement -> . err_list
    (16) declaration_list -> . type vars_list
    (28) assignment -> . variable ASSIGN expression
    (29) assignment -> . variable ASSIGN array
    (70) while -> . WHILE expression DO stmt_list DONE
    (71) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (72) if -> . IF expression DO stmt_list DONE
    (73) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (74) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable
    (76) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (77) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (22) err_list -> . err_list error
    (23) err_list -> . error
    (17) type -> . INT
    (18) type -> . CELL
    (19) type -> . BOOL
    (20) type -> . VAR
    (21) type -> . err_list
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26
    FUNCTION        shift and go to state 27
    IDENT           shift and go to state 28
    NL              reduce using rule 2 (empty -> .)
    error           shift and go to state 29
    INT             shift and go to state 30
    CELL            shift and go to state 31
    BOOL            shift and go to state 32
    VAR             shift and go to state 33

    stmt_list                      shift and go to state 113
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    err_list                       shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 98

    (76) function -> FUNCTION OBRACKET IDENT . CBRACKET DO stmt_list DONE

    CBRACKET        shift and go to state 114


state 99

    (77) function -> FUNCTION IDENT OBRACKET . IDENT CBRACKET DO NL stmt_list DONE

    IDENT           shift and go to state 115


state 100

    (60) function_call -> IDENT OBRACKET variable . CBRACKET
    (35) expression -> variable .

  ! shift/reduce conflict for CBRACKET resolved as shift
    CBRACKET        shift and go to state 116
    PLUS            reduce using rule 35 (expression -> variable .)
    MINUS           reduce using rule 35 (expression -> variable .)
    CARET           reduce using rule 35 (expression -> variable .)
    GREATER         reduce using rule 35 (expression -> variable .)
    LESS            reduce using rule 35 (expression -> variable .)
    EQUAL           reduce using rule 35 (expression -> variable .)

  ! CBRACKET        [ reduce using rule 35 (expression -> variable .) ]


state 101

    (33) variable -> IDENT OBRACKET expression . CBRACKET
    (52) al_expression -> expression . PLUS expression
    (53) al_expression -> expression . MINUS expression
    (56) al_expression -> expression . CARET expression
    (57) al_expression -> expression . GREATER expression
    (58) al_expression -> expression . LESS expression
    (59) al_expression -> expression . EQUAL expression

    CBRACKET        shift and go to state 117
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    CARET           shift and go to state 90
    GREATER         shift and go to state 91
    LESS            shift and go to state 92
    EQUAL           shift and go to state 93


state 102

    (24) vars_list -> IDENT COMMA vars_list .

    NL              reduce using rule 24 (vars_list -> IDENT COMMA vars_list .)


state 103

    (25) vars_list -> assignment COMMA vars_list .

    NL              reduce using rule 25 (vars_list -> assignment COMMA vars_list .)


state 104

    (30) array -> OSQBRACKET expr_list . CSQBRACKET
    (31) expr_list -> expr_list . COMMA expression

    CSQBRACKET      shift and go to state 118
    COMMA           shift and go to state 119


state 105

    (32) expr_list -> expression .
    (52) al_expression -> expression . PLUS expression
    (53) al_expression -> expression . MINUS expression
    (56) al_expression -> expression . CARET expression
    (57) al_expression -> expression . GREATER expression
    (58) al_expression -> expression . LESS expression
    (59) al_expression -> expression . EQUAL expression

    CSQBRACKET      reduce using rule 32 (expr_list -> expression .)
    COMMA           reduce using rule 32 (expr_list -> expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    CARET           shift and go to state 90
    GREATER         shift and go to state 91
    LESS            shift and go to state 92
    EQUAL           shift and go to state 93


state 106

    (70) while -> WHILE expression DO stmt_list . DONE
    (71) while -> WHILE expression DO stmt_list . FINISH stmt_list DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) statement -> . err_list NL
    (15) statement -> . err_list
    (16) declaration_list -> . type vars_list
    (28) assignment -> . variable ASSIGN expression
    (29) assignment -> . variable ASSIGN array
    (70) while -> . WHILE expression DO stmt_list DONE
    (71) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (72) if -> . IF expression DO stmt_list DONE
    (73) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (74) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable
    (76) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (77) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (22) err_list -> . err_list error
    (23) err_list -> . error
    (17) type -> . INT
    (18) type -> . CELL
    (19) type -> . BOOL
    (20) type -> . VAR
    (21) type -> . err_list
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    DONE            shift and go to state 120
    FINISH          shift and go to state 121
    RETURN          shift and go to state 11
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26
    FUNCTION        shift and go to state 27
    IDENT           shift and go to state 28
    NL              reduce using rule 2 (empty -> .)
    error           shift and go to state 29
    INT             shift and go to state 30
    CELL            shift and go to state 31
    BOOL            shift and go to state 32
    VAR             shift and go to state 33

    statement                      shift and go to state 34
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    err_list                       shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 107

    (52) al_expression -> expression PLUS expression .
    (52) al_expression -> expression . PLUS expression
    (53) al_expression -> expression . MINUS expression
    (56) al_expression -> expression . CARET expression
    (57) al_expression -> expression . GREATER expression
    (58) al_expression -> expression . LESS expression
    (59) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 52 (al_expression -> expression PLUS expression .)
    NL              reduce using rule 52 (al_expression -> expression PLUS expression .)
    COMMA           reduce using rule 52 (al_expression -> expression PLUS expression .)
    CBRACKET        reduce using rule 52 (al_expression -> expression PLUS expression .)
    CSQBRACKET      reduce using rule 52 (al_expression -> expression PLUS expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    CARET           shift and go to state 90
    GREATER         shift and go to state 91
    LESS            shift and go to state 92
    EQUAL           shift and go to state 93

  ! PLUS            [ reduce using rule 52 (al_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 52 (al_expression -> expression PLUS expression .) ]
  ! CARET           [ reduce using rule 52 (al_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 52 (al_expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 52 (al_expression -> expression PLUS expression .) ]
  ! EQUAL           [ reduce using rule 52 (al_expression -> expression PLUS expression .) ]


state 108

    (53) al_expression -> expression MINUS expression .
    (52) al_expression -> expression . PLUS expression
    (53) al_expression -> expression . MINUS expression
    (56) al_expression -> expression . CARET expression
    (57) al_expression -> expression . GREATER expression
    (58) al_expression -> expression . LESS expression
    (59) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 53 (al_expression -> expression MINUS expression .)
    NL              reduce using rule 53 (al_expression -> expression MINUS expression .)
    COMMA           reduce using rule 53 (al_expression -> expression MINUS expression .)
    CBRACKET        reduce using rule 53 (al_expression -> expression MINUS expression .)
    CSQBRACKET      reduce using rule 53 (al_expression -> expression MINUS expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    CARET           shift and go to state 90
    GREATER         shift and go to state 91
    LESS            shift and go to state 92
    EQUAL           shift and go to state 93

  ! PLUS            [ reduce using rule 53 (al_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 53 (al_expression -> expression MINUS expression .) ]
  ! CARET           [ reduce using rule 53 (al_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 53 (al_expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 53 (al_expression -> expression MINUS expression .) ]
  ! EQUAL           [ reduce using rule 53 (al_expression -> expression MINUS expression .) ]


state 109

    (56) al_expression -> expression CARET expression .
    (52) al_expression -> expression . PLUS expression
    (53) al_expression -> expression . MINUS expression
    (56) al_expression -> expression . CARET expression
    (57) al_expression -> expression . GREATER expression
    (58) al_expression -> expression . LESS expression
    (59) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 56 (al_expression -> expression CARET expression .)
    NL              reduce using rule 56 (al_expression -> expression CARET expression .)
    COMMA           reduce using rule 56 (al_expression -> expression CARET expression .)
    CBRACKET        reduce using rule 56 (al_expression -> expression CARET expression .)
    CSQBRACKET      reduce using rule 56 (al_expression -> expression CARET expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    CARET           shift and go to state 90
    GREATER         shift and go to state 91
    LESS            shift and go to state 92
    EQUAL           shift and go to state 93

  ! PLUS            [ reduce using rule 56 (al_expression -> expression CARET expression .) ]
  ! MINUS           [ reduce using rule 56 (al_expression -> expression CARET expression .) ]
  ! CARET           [ reduce using rule 56 (al_expression -> expression CARET expression .) ]
  ! GREATER         [ reduce using rule 56 (al_expression -> expression CARET expression .) ]
  ! LESS            [ reduce using rule 56 (al_expression -> expression CARET expression .) ]
  ! EQUAL           [ reduce using rule 56 (al_expression -> expression CARET expression .) ]


state 110

    (57) al_expression -> expression GREATER expression .
    (52) al_expression -> expression . PLUS expression
    (53) al_expression -> expression . MINUS expression
    (56) al_expression -> expression . CARET expression
    (57) al_expression -> expression . GREATER expression
    (58) al_expression -> expression . LESS expression
    (59) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 57 (al_expression -> expression GREATER expression .)
    NL              reduce using rule 57 (al_expression -> expression GREATER expression .)
    COMMA           reduce using rule 57 (al_expression -> expression GREATER expression .)
    CBRACKET        reduce using rule 57 (al_expression -> expression GREATER expression .)
    CSQBRACKET      reduce using rule 57 (al_expression -> expression GREATER expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    CARET           shift and go to state 90
    GREATER         shift and go to state 91
    LESS            shift and go to state 92
    EQUAL           shift and go to state 93

  ! PLUS            [ reduce using rule 57 (al_expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 57 (al_expression -> expression GREATER expression .) ]
  ! CARET           [ reduce using rule 57 (al_expression -> expression GREATER expression .) ]
  ! GREATER         [ reduce using rule 57 (al_expression -> expression GREATER expression .) ]
  ! LESS            [ reduce using rule 57 (al_expression -> expression GREATER expression .) ]
  ! EQUAL           [ reduce using rule 57 (al_expression -> expression GREATER expression .) ]


state 111

    (58) al_expression -> expression LESS expression .
    (52) al_expression -> expression . PLUS expression
    (53) al_expression -> expression . MINUS expression
    (56) al_expression -> expression . CARET expression
    (57) al_expression -> expression . GREATER expression
    (58) al_expression -> expression . LESS expression
    (59) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 58 (al_expression -> expression LESS expression .)
    NL              reduce using rule 58 (al_expression -> expression LESS expression .)
    COMMA           reduce using rule 58 (al_expression -> expression LESS expression .)
    CBRACKET        reduce using rule 58 (al_expression -> expression LESS expression .)
    CSQBRACKET      reduce using rule 58 (al_expression -> expression LESS expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    CARET           shift and go to state 90
    GREATER         shift and go to state 91
    LESS            shift and go to state 92
    EQUAL           shift and go to state 93

  ! PLUS            [ reduce using rule 58 (al_expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 58 (al_expression -> expression LESS expression .) ]
  ! CARET           [ reduce using rule 58 (al_expression -> expression LESS expression .) ]
  ! GREATER         [ reduce using rule 58 (al_expression -> expression LESS expression .) ]
  ! LESS            [ reduce using rule 58 (al_expression -> expression LESS expression .) ]
  ! EQUAL           [ reduce using rule 58 (al_expression -> expression LESS expression .) ]


state 112

    (59) al_expression -> expression EQUAL expression .
    (52) al_expression -> expression . PLUS expression
    (53) al_expression -> expression . MINUS expression
    (56) al_expression -> expression . CARET expression
    (57) al_expression -> expression . GREATER expression
    (58) al_expression -> expression . LESS expression
    (59) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 59 (al_expression -> expression EQUAL expression .)
    NL              reduce using rule 59 (al_expression -> expression EQUAL expression .)
    COMMA           reduce using rule 59 (al_expression -> expression EQUAL expression .)
    CBRACKET        reduce using rule 59 (al_expression -> expression EQUAL expression .)
    CSQBRACKET      reduce using rule 59 (al_expression -> expression EQUAL expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    CARET           shift and go to state 90
    GREATER         shift and go to state 91
    LESS            shift and go to state 92
    EQUAL           shift and go to state 93

  ! PLUS            [ reduce using rule 59 (al_expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 59 (al_expression -> expression EQUAL expression .) ]
  ! CARET           [ reduce using rule 59 (al_expression -> expression EQUAL expression .) ]
  ! GREATER         [ reduce using rule 59 (al_expression -> expression EQUAL expression .) ]
  ! LESS            [ reduce using rule 59 (al_expression -> expression EQUAL expression .) ]
  ! EQUAL           [ reduce using rule 59 (al_expression -> expression EQUAL expression .) ]


state 113

    (72) if -> IF expression DO stmt_list . DONE
    (73) if -> IF expression DO stmt_list . DONE NL ELDEF DO stmt_list DONE
    (74) if -> IF expression DO stmt_list . DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> IF expression DO stmt_list . DONE NL ELUND DO stmt_list DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) statement -> . err_list NL
    (15) statement -> . err_list
    (16) declaration_list -> . type vars_list
    (28) assignment -> . variable ASSIGN expression
    (29) assignment -> . variable ASSIGN array
    (70) while -> . WHILE expression DO stmt_list DONE
    (71) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (72) if -> . IF expression DO stmt_list DONE
    (73) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (74) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable
    (76) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (77) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (22) err_list -> . err_list error
    (23) err_list -> . error
    (17) type -> . INT
    (18) type -> . CELL
    (19) type -> . BOOL
    (20) type -> . VAR
    (21) type -> . err_list
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    DONE            shift and go to state 122
    RETURN          shift and go to state 11
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26
    FUNCTION        shift and go to state 27
    IDENT           shift and go to state 28
    NL              reduce using rule 2 (empty -> .)
    error           shift and go to state 29
    INT             shift and go to state 30
    CELL            shift and go to state 31
    BOOL            shift and go to state 32
    VAR             shift and go to state 33

    statement                      shift and go to state 34
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    err_list                       shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 114

    (76) function -> FUNCTION OBRACKET IDENT CBRACKET . DO stmt_list DONE

    DO              shift and go to state 123


state 115

    (77) function -> FUNCTION IDENT OBRACKET IDENT . CBRACKET DO NL stmt_list DONE

    CBRACKET        shift and go to state 124


state 116

    (60) function_call -> IDENT OBRACKET variable CBRACKET .

    NL              reduce using rule 60 (function_call -> IDENT OBRACKET variable CBRACKET .)
    DO              reduce using rule 60 (function_call -> IDENT OBRACKET variable CBRACKET .)
    PLUS            reduce using rule 60 (function_call -> IDENT OBRACKET variable CBRACKET .)
    MINUS           reduce using rule 60 (function_call -> IDENT OBRACKET variable CBRACKET .)
    CARET           reduce using rule 60 (function_call -> IDENT OBRACKET variable CBRACKET .)
    GREATER         reduce using rule 60 (function_call -> IDENT OBRACKET variable CBRACKET .)
    LESS            reduce using rule 60 (function_call -> IDENT OBRACKET variable CBRACKET .)
    EQUAL           reduce using rule 60 (function_call -> IDENT OBRACKET variable CBRACKET .)
    COMMA           reduce using rule 60 (function_call -> IDENT OBRACKET variable CBRACKET .)
    CBRACKET        reduce using rule 60 (function_call -> IDENT OBRACKET variable CBRACKET .)
    CSQBRACKET      reduce using rule 60 (function_call -> IDENT OBRACKET variable CBRACKET .)


state 117

    (33) variable -> IDENT OBRACKET expression CBRACKET .

    ASSIGN          reduce using rule 33 (variable -> IDENT OBRACKET expression CBRACKET .)
    DO              reduce using rule 33 (variable -> IDENT OBRACKET expression CBRACKET .)
    PLUS            reduce using rule 33 (variable -> IDENT OBRACKET expression CBRACKET .)
    MINUS           reduce using rule 33 (variable -> IDENT OBRACKET expression CBRACKET .)
    CARET           reduce using rule 33 (variable -> IDENT OBRACKET expression CBRACKET .)
    GREATER         reduce using rule 33 (variable -> IDENT OBRACKET expression CBRACKET .)
    LESS            reduce using rule 33 (variable -> IDENT OBRACKET expression CBRACKET .)
    EQUAL           reduce using rule 33 (variable -> IDENT OBRACKET expression CBRACKET .)
    NL              reduce using rule 33 (variable -> IDENT OBRACKET expression CBRACKET .)
    COMMA           reduce using rule 33 (variable -> IDENT OBRACKET expression CBRACKET .)
    CBRACKET        reduce using rule 33 (variable -> IDENT OBRACKET expression CBRACKET .)
    CSQBRACKET      reduce using rule 33 (variable -> IDENT OBRACKET expression CBRACKET .)


state 118

    (30) array -> OSQBRACKET expr_list CSQBRACKET .

    NL              reduce using rule 30 (array -> OSQBRACKET expr_list CSQBRACKET .)
    COMMA           reduce using rule 30 (array -> OSQBRACKET expr_list CSQBRACKET .)


state 119

    (31) expr_list -> expr_list COMMA . expression
    (35) expression -> . variable
    (36) expression -> . const
    (37) expression -> . al_expression
    (38) expression -> . function_call
    (39) expression -> . operator
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT
    (40) const -> . INF
    (41) const -> . MINUS_INF
    (42) const -> . NAN
    (43) const -> . TRUE
    (44) const -> . FALSE
    (45) const -> . UNDEF
    (46) const -> . EMPTY
    (47) const -> . WALL
    (48) const -> . BOX
    (49) const -> . EXIT
    (50) const -> . DECIMAL
    (51) const -> . HEXADECIMAL
    (52) al_expression -> . expression PLUS expression
    (53) al_expression -> . expression MINUS expression
    (54) al_expression -> . MINUS expression
    (55) al_expression -> . SHARP expression
    (56) al_expression -> . expression CARET expression
    (57) al_expression -> . expression GREATER expression
    (58) al_expression -> . expression LESS expression
    (59) al_expression -> . expression EQUAL expression
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable

    IDENT           shift and go to state 56
    INF             shift and go to state 57
    MINUS_INF       shift and go to state 58
    NAN             shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    UNDEF           shift and go to state 62
    EMPTY           shift and go to state 63
    WALL            shift and go to state 64
    BOX             shift and go to state 65
    EXIT            shift and go to state 66
    DECIMAL         shift and go to state 67
    HEXADECIMAL     shift and go to state 68
    MINUS           shift and go to state 69
    SHARP           shift and go to state 70
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26

    expression                     shift and go to state 125
    variable                       shift and go to state 51
    const                          shift and go to state 52
    al_expression                  shift and go to state 53
    function_call                  shift and go to state 54
    operator                       shift and go to state 55

state 120

    (70) while -> WHILE expression DO stmt_list DONE .

    NL              reduce using rule 70 (while -> WHILE expression DO stmt_list DONE .)


state 121

    (71) while -> WHILE expression DO stmt_list FINISH . stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) statement -> . err_list NL
    (15) statement -> . err_list
    (16) declaration_list -> . type vars_list
    (28) assignment -> . variable ASSIGN expression
    (29) assignment -> . variable ASSIGN array
    (70) while -> . WHILE expression DO stmt_list DONE
    (71) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (72) if -> . IF expression DO stmt_list DONE
    (73) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (74) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable
    (76) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (77) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (22) err_list -> . err_list error
    (23) err_list -> . error
    (17) type -> . INT
    (18) type -> . CELL
    (19) type -> . BOOL
    (20) type -> . VAR
    (21) type -> . err_list
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26
    FUNCTION        shift and go to state 27
    IDENT           shift and go to state 28
    NL              reduce using rule 2 (empty -> .)
    error           shift and go to state 29
    INT             shift and go to state 30
    CELL            shift and go to state 31
    BOOL            shift and go to state 32
    VAR             shift and go to state 33

    stmt_list                      shift and go to state 126
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    err_list                       shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 122

    (72) if -> IF expression DO stmt_list DONE .
    (73) if -> IF expression DO stmt_list DONE . NL ELDEF DO stmt_list DONE
    (74) if -> IF expression DO stmt_list DONE . NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> IF expression DO stmt_list DONE . NL ELUND DO stmt_list DONE

  ! shift/reduce conflict for NL resolved as shift
    NL              shift and go to state 127

  ! NL              [ reduce using rule 72 (if -> IF expression DO stmt_list DONE .) ]


state 123

    (76) function -> FUNCTION OBRACKET IDENT CBRACKET DO . stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) statement -> . err_list NL
    (15) statement -> . err_list
    (16) declaration_list -> . type vars_list
    (28) assignment -> . variable ASSIGN expression
    (29) assignment -> . variable ASSIGN array
    (70) while -> . WHILE expression DO stmt_list DONE
    (71) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (72) if -> . IF expression DO stmt_list DONE
    (73) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (74) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable
    (76) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (77) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (22) err_list -> . err_list error
    (23) err_list -> . error
    (17) type -> . INT
    (18) type -> . CELL
    (19) type -> . BOOL
    (20) type -> . VAR
    (21) type -> . err_list
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26
    FUNCTION        shift and go to state 27
    IDENT           shift and go to state 28
    NL              reduce using rule 2 (empty -> .)
    error           shift and go to state 29
    INT             shift and go to state 30
    CELL            shift and go to state 31
    BOOL            shift and go to state 32
    VAR             shift and go to state 33

    stmt_list                      shift and go to state 128
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    err_list                       shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 124

    (77) function -> FUNCTION IDENT OBRACKET IDENT CBRACKET . DO NL stmt_list DONE

    DO              shift and go to state 129


state 125

    (31) expr_list -> expr_list COMMA expression .
    (52) al_expression -> expression . PLUS expression
    (53) al_expression -> expression . MINUS expression
    (56) al_expression -> expression . CARET expression
    (57) al_expression -> expression . GREATER expression
    (58) al_expression -> expression . LESS expression
    (59) al_expression -> expression . EQUAL expression

    CSQBRACKET      reduce using rule 31 (expr_list -> expr_list COMMA expression .)
    COMMA           reduce using rule 31 (expr_list -> expr_list COMMA expression .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    CARET           shift and go to state 90
    GREATER         shift and go to state 91
    LESS            shift and go to state 92
    EQUAL           shift and go to state 93


state 126

    (71) while -> WHILE expression DO stmt_list FINISH stmt_list . DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) statement -> . err_list NL
    (15) statement -> . err_list
    (16) declaration_list -> . type vars_list
    (28) assignment -> . variable ASSIGN expression
    (29) assignment -> . variable ASSIGN array
    (70) while -> . WHILE expression DO stmt_list DONE
    (71) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (72) if -> . IF expression DO stmt_list DONE
    (73) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (74) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable
    (76) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (77) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (22) err_list -> . err_list error
    (23) err_list -> . error
    (17) type -> . INT
    (18) type -> . CELL
    (19) type -> . BOOL
    (20) type -> . VAR
    (21) type -> . err_list
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    DONE            shift and go to state 130
    RETURN          shift and go to state 11
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26
    FUNCTION        shift and go to state 27
    IDENT           shift and go to state 28
    NL              reduce using rule 2 (empty -> .)
    error           shift and go to state 29
    INT             shift and go to state 30
    CELL            shift and go to state 31
    BOOL            shift and go to state 32
    VAR             shift and go to state 33

    statement                      shift and go to state 34
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    err_list                       shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 127

    (73) if -> IF expression DO stmt_list DONE NL . ELDEF DO stmt_list DONE
    (74) if -> IF expression DO stmt_list DONE NL . ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> IF expression DO stmt_list DONE NL . ELUND DO stmt_list DONE

    ELDEF           shift and go to state 131
    ELUND           shift and go to state 132


state 128

    (76) function -> FUNCTION OBRACKET IDENT CBRACKET DO stmt_list . DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) statement -> . err_list NL
    (15) statement -> . err_list
    (16) declaration_list -> . type vars_list
    (28) assignment -> . variable ASSIGN expression
    (29) assignment -> . variable ASSIGN array
    (70) while -> . WHILE expression DO stmt_list DONE
    (71) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (72) if -> . IF expression DO stmt_list DONE
    (73) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (74) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable
    (76) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (77) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (22) err_list -> . err_list error
    (23) err_list -> . error
    (17) type -> . INT
    (18) type -> . CELL
    (19) type -> . BOOL
    (20) type -> . VAR
    (21) type -> . err_list
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    DONE            shift and go to state 133
    RETURN          shift and go to state 11
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26
    FUNCTION        shift and go to state 27
    IDENT           shift and go to state 28
    NL              reduce using rule 2 (empty -> .)
    error           shift and go to state 29
    INT             shift and go to state 30
    CELL            shift and go to state 31
    BOOL            shift and go to state 32
    VAR             shift and go to state 33

    statement                      shift and go to state 34
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    err_list                       shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 129

    (77) function -> FUNCTION IDENT OBRACKET IDENT CBRACKET DO . NL stmt_list DONE

    NL              shift and go to state 134


state 130

    (71) while -> WHILE expression DO stmt_list FINISH stmt_list DONE .

    NL              reduce using rule 71 (while -> WHILE expression DO stmt_list FINISH stmt_list DONE .)


state 131

    (73) if -> IF expression DO stmt_list DONE NL ELDEF . DO stmt_list DONE
    (74) if -> IF expression DO stmt_list DONE NL ELDEF . DO stmt_list DONE NL ELUND DO stmt_list DONE

    DO              shift and go to state 135


state 132

    (75) if -> IF expression DO stmt_list DONE NL ELUND . DO stmt_list DONE

    DO              shift and go to state 136


state 133

    (76) function -> FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE .

    NL              reduce using rule 76 (function -> FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE .)


state 134

    (77) function -> FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL . stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) statement -> . err_list NL
    (15) statement -> . err_list
    (16) declaration_list -> . type vars_list
    (28) assignment -> . variable ASSIGN expression
    (29) assignment -> . variable ASSIGN array
    (70) while -> . WHILE expression DO stmt_list DONE
    (71) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (72) if -> . IF expression DO stmt_list DONE
    (73) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (74) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable
    (76) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (77) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (22) err_list -> . err_list error
    (23) err_list -> . error
    (17) type -> . INT
    (18) type -> . CELL
    (19) type -> . BOOL
    (20) type -> . VAR
    (21) type -> . err_list
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26
    FUNCTION        shift and go to state 27
    IDENT           shift and go to state 28
    NL              reduce using rule 2 (empty -> .)
    error           shift and go to state 29
    INT             shift and go to state 30
    CELL            shift and go to state 31
    BOOL            shift and go to state 32
    VAR             shift and go to state 33

    stmt_list                      shift and go to state 137
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    err_list                       shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 135

    (73) if -> IF expression DO stmt_list DONE NL ELDEF DO . stmt_list DONE
    (74) if -> IF expression DO stmt_list DONE NL ELDEF DO . stmt_list DONE NL ELUND DO stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) statement -> . err_list NL
    (15) statement -> . err_list
    (16) declaration_list -> . type vars_list
    (28) assignment -> . variable ASSIGN expression
    (29) assignment -> . variable ASSIGN array
    (70) while -> . WHILE expression DO stmt_list DONE
    (71) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (72) if -> . IF expression DO stmt_list DONE
    (73) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (74) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable
    (76) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (77) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (22) err_list -> . err_list error
    (23) err_list -> . error
    (17) type -> . INT
    (18) type -> . CELL
    (19) type -> . BOOL
    (20) type -> . VAR
    (21) type -> . err_list
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26
    FUNCTION        shift and go to state 27
    IDENT           shift and go to state 28
    NL              reduce using rule 2 (empty -> .)
    error           shift and go to state 29
    INT             shift and go to state 30
    CELL            shift and go to state 31
    BOOL            shift and go to state 32
    VAR             shift and go to state 33

    stmt_list                      shift and go to state 138
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    err_list                       shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 136

    (75) if -> IF expression DO stmt_list DONE NL ELUND DO . stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) statement -> . err_list NL
    (15) statement -> . err_list
    (16) declaration_list -> . type vars_list
    (28) assignment -> . variable ASSIGN expression
    (29) assignment -> . variable ASSIGN array
    (70) while -> . WHILE expression DO stmt_list DONE
    (71) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (72) if -> . IF expression DO stmt_list DONE
    (73) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (74) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable
    (76) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (77) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (22) err_list -> . err_list error
    (23) err_list -> . error
    (17) type -> . INT
    (18) type -> . CELL
    (19) type -> . BOOL
    (20) type -> . VAR
    (21) type -> . err_list
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26
    FUNCTION        shift and go to state 27
    IDENT           shift and go to state 28
    NL              reduce using rule 2 (empty -> .)
    error           shift and go to state 29
    INT             shift and go to state 30
    CELL            shift and go to state 31
    BOOL            shift and go to state 32
    VAR             shift and go to state 33

    stmt_list                      shift and go to state 139
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    err_list                       shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 137

    (77) function -> FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list . DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) statement -> . err_list NL
    (15) statement -> . err_list
    (16) declaration_list -> . type vars_list
    (28) assignment -> . variable ASSIGN expression
    (29) assignment -> . variable ASSIGN array
    (70) while -> . WHILE expression DO stmt_list DONE
    (71) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (72) if -> . IF expression DO stmt_list DONE
    (73) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (74) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable
    (76) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (77) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (22) err_list -> . err_list error
    (23) err_list -> . error
    (17) type -> . INT
    (18) type -> . CELL
    (19) type -> . BOOL
    (20) type -> . VAR
    (21) type -> . err_list
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    DONE            shift and go to state 140
    RETURN          shift and go to state 11
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26
    FUNCTION        shift and go to state 27
    IDENT           shift and go to state 28
    NL              reduce using rule 2 (empty -> .)
    error           shift and go to state 29
    INT             shift and go to state 30
    CELL            shift and go to state 31
    BOOL            shift and go to state 32
    VAR             shift and go to state 33

    statement                      shift and go to state 34
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    err_list                       shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 138

    (73) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list . DONE
    (74) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list . DONE NL ELUND DO stmt_list DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) statement -> . err_list NL
    (15) statement -> . err_list
    (16) declaration_list -> . type vars_list
    (28) assignment -> . variable ASSIGN expression
    (29) assignment -> . variable ASSIGN array
    (70) while -> . WHILE expression DO stmt_list DONE
    (71) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (72) if -> . IF expression DO stmt_list DONE
    (73) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (74) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable
    (76) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (77) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (22) err_list -> . err_list error
    (23) err_list -> . error
    (17) type -> . INT
    (18) type -> . CELL
    (19) type -> . BOOL
    (20) type -> . VAR
    (21) type -> . err_list
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    DONE            shift and go to state 141
    RETURN          shift and go to state 11
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26
    FUNCTION        shift and go to state 27
    IDENT           shift and go to state 28
    NL              reduce using rule 2 (empty -> .)
    error           shift and go to state 29
    INT             shift and go to state 30
    CELL            shift and go to state 31
    BOOL            shift and go to state 32
    VAR             shift and go to state 33

    statement                      shift and go to state 34
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    err_list                       shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 139

    (75) if -> IF expression DO stmt_list DONE NL ELUND DO stmt_list . DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) statement -> . err_list NL
    (15) statement -> . err_list
    (16) declaration_list -> . type vars_list
    (28) assignment -> . variable ASSIGN expression
    (29) assignment -> . variable ASSIGN array
    (70) while -> . WHILE expression DO stmt_list DONE
    (71) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (72) if -> . IF expression DO stmt_list DONE
    (73) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (74) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable
    (76) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (77) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (22) err_list -> . err_list error
    (23) err_list -> . error
    (17) type -> . INT
    (18) type -> . CELL
    (19) type -> . BOOL
    (20) type -> . VAR
    (21) type -> . err_list
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    DONE            shift and go to state 142
    RETURN          shift and go to state 11
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26
    FUNCTION        shift and go to state 27
    IDENT           shift and go to state 28
    NL              reduce using rule 2 (empty -> .)
    error           shift and go to state 29
    INT             shift and go to state 30
    CELL            shift and go to state 31
    BOOL            shift and go to state 32
    VAR             shift and go to state 33

    statement                      shift and go to state 34
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    err_list                       shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 140

    (77) function -> FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE .

    NL              reduce using rule 77 (function -> FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE .)


state 141

    (73) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE .
    (74) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE . NL ELUND DO stmt_list DONE

  ! shift/reduce conflict for NL resolved as shift
    NL              shift and go to state 143

  ! NL              [ reduce using rule 73 (if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE .) ]


state 142

    (75) if -> IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE .

    NL              reduce using rule 75 (if -> IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE .)


state 143

    (74) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL . ELUND DO stmt_list DONE

    ELUND           shift and go to state 144


state 144

    (74) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND . DO stmt_list DONE

    DO              shift and go to state 145


state 145

    (74) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO . stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) statement -> . err_list NL
    (15) statement -> . err_list
    (16) declaration_list -> . type vars_list
    (28) assignment -> . variable ASSIGN expression
    (29) assignment -> . variable ASSIGN array
    (70) while -> . WHILE expression DO stmt_list DONE
    (71) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (72) if -> . IF expression DO stmt_list DONE
    (73) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (74) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable
    (76) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (77) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (22) err_list -> . err_list error
    (23) err_list -> . error
    (17) type -> . INT
    (18) type -> . CELL
    (19) type -> . BOOL
    (20) type -> . VAR
    (21) type -> . err_list
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26
    FUNCTION        shift and go to state 27
    IDENT           shift and go to state 28
    NL              reduce using rule 2 (empty -> .)
    error           shift and go to state 29
    INT             shift and go to state 30
    CELL            shift and go to state 31
    BOOL            shift and go to state 32
    VAR             shift and go to state 33

    stmt_list                      shift and go to state 146
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    err_list                       shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 146

    (74) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list . DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) statement -> . err_list NL
    (15) statement -> . err_list
    (16) declaration_list -> . type vars_list
    (28) assignment -> . variable ASSIGN expression
    (29) assignment -> . variable ASSIGN array
    (70) while -> . WHILE expression DO stmt_list DONE
    (71) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (72) if -> . IF expression DO stmt_list DONE
    (73) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (74) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (75) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (61) operator -> . FORWARD expression
    (62) operator -> . BACKWARD expression
    (63) operator -> . LEFT
    (64) operator -> . RIGHT
    (65) operator -> . LOAD expression
    (66) operator -> . DROP expression
    (67) operator -> . LOOK
    (68) operator -> . TEST
    (69) operator -> . SIZEOF variable
    (76) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (77) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (60) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (22) err_list -> . err_list error
    (23) err_list -> . error
    (17) type -> . INT
    (18) type -> . CELL
    (19) type -> . BOOL
    (20) type -> . VAR
    (21) type -> . err_list
    (33) variable -> . IDENT OBRACKET expression CBRACKET
    (34) variable -> . IDENT

    DONE            shift and go to state 147
    RETURN          shift and go to state 11
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    FORWARD         shift and go to state 18
    BACKWARD        shift and go to state 19
    LEFT            shift and go to state 20
    RIGHT           shift and go to state 21
    LOAD            shift and go to state 22
    DROP            shift and go to state 23
    LOOK            shift and go to state 24
    TEST            shift and go to state 25
    SIZEOF          shift and go to state 26
    FUNCTION        shift and go to state 27
    IDENT           shift and go to state 28
    NL              reduce using rule 2 (empty -> .)
    error           shift and go to state 29
    INT             shift and go to state 30
    CELL            shift and go to state 31
    BOOL            shift and go to state 32
    VAR             shift and go to state 33

    statement                      shift and go to state 34
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    err_list                       shift and go to state 13
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 147

    (74) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE .

    NL              reduce using rule 74 (if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NL in state 13 resolved as shift
WARNING: shift/reduce conflict for error in state 13 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for CARET in state 72 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 72 resolved as shift
WARNING: shift/reduce conflict for LESS in state 72 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for CARET in state 73 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 73 resolved as shift
WARNING: shift/reduce conflict for LESS in state 73 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for CARET in state 74 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 74 resolved as shift
WARNING: shift/reduce conflict for LESS in state 74 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 75 resolved as shift
WARNING: shift/reduce conflict for CARET in state 75 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 75 resolved as shift
WARNING: shift/reduce conflict for LESS in state 75 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 95 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 95 resolved as shift
WARNING: shift/reduce conflict for CARET in state 95 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 95 resolved as shift
WARNING: shift/reduce conflict for LESS in state 95 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 96 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 96 resolved as shift
WARNING: shift/reduce conflict for CARET in state 96 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 96 resolved as shift
WARNING: shift/reduce conflict for LESS in state 96 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for CBRACKET in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for CARET in state 107 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 107 resolved as shift
WARNING: shift/reduce conflict for LESS in state 107 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for CARET in state 108 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 108 resolved as shift
WARNING: shift/reduce conflict for LESS in state 108 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for CARET in state 109 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 109 resolved as shift
WARNING: shift/reduce conflict for LESS in state 109 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for CARET in state 110 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 110 resolved as shift
WARNING: shift/reduce conflict for LESS in state 110 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for CARET in state 111 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 111 resolved as shift
WARNING: shift/reduce conflict for LESS in state 111 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 112 resolved as shift
WARNING: shift/reduce conflict for CARET in state 112 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 112 resolved as shift
WARNING: shift/reduce conflict for LESS in state 112 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 112 resolved as shift
WARNING: shift/reduce conflict for NL in state 122 resolved as shift
WARNING: shift/reduce conflict for NL in state 141 resolved as shift
WARNING: reduce/reduce conflict in state 13 resolved using rule (statement -> err_list)
WARNING: rejected rule (type -> err_list) in state 13
WARNING: Rule (type -> err_list) is never reduced
