Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     empty -> <empty>
Rule 3     stmt_list -> stmt_list statement
Rule 4     stmt_list -> statement
Rule 5     statement -> declaration_list NL
Rule 6     statement -> assignment NL
Rule 7     statement -> while NL
Rule 8     statement -> if NL
Rule 9     statement -> operator NL
Rule 10    statement -> function NL
Rule 11    statement -> function_call NL
Rule 12    statement -> RETURN NL
Rule 13    statement -> empty NL
Rule 14    declaration_list -> type vars_list
Rule 15    type -> INT
Rule 16    type -> CELL
Rule 17    type -> BOOL
Rule 18    type -> VAR
Rule 19    vars_list -> IDENT COMMA vars_list
Rule 20    vars_list -> assignment COMMA vars_list
Rule 21    vars_list -> IDENT
Rule 22    vars_list -> assignment
Rule 23    assignment -> variable ASSIGN expression
Rule 24    variable -> IDENT OBRACKET expression CBRACKET
Rule 25    variable -> IDENT
Rule 26    expression -> variable
Rule 27    expression -> const
Rule 28    expression -> al_expression
Rule 29    expression -> function_call
Rule 30    expression -> operator
Rule 31    const -> INF
Rule 32    const -> MINUS_INF
Rule 33    const -> NAN
Rule 34    const -> TRUE
Rule 35    const -> FALSE
Rule 36    const -> UNDEF
Rule 37    const -> EMPTY
Rule 38    const -> WALL
Rule 39    const -> BOX
Rule 40    const -> EXIT
Rule 41    const -> DECIMAL
Rule 42    const -> HEXADECIMAL
Rule 43    al_expression -> expression PLUS expression
Rule 44    al_expression -> expression MINUS expression
Rule 45    al_expression -> MINUS expression
Rule 46    al_expression -> SHARP expression
Rule 47    al_expression -> expression CARET expression
Rule 48    al_expression -> expression GREATER expression
Rule 49    al_expression -> expression LESS expression
Rule 50    al_expression -> expression EQUAL expression
Rule 51    function_call -> IDENT OBRACKET variable CBRACKET
Rule 52    operator -> FORWARD expression
Rule 53    operator -> BACKWARD expression
Rule 54    operator -> LEFT
Rule 55    operator -> RIGHT
Rule 56    operator -> LOAD expression
Rule 57    operator -> DROP expression
Rule 58    operator -> LOOK
Rule 59    operator -> TEST
Rule 60    while -> WHILE expression DO stmt_list DONE
Rule 61    while -> WHILE expression DO stmt_list FINISH stmt_list DONE
Rule 62    if -> IF expression DO stmt_list DONE
Rule 63    if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
Rule 64    if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
Rule 65    if -> IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
Rule 66    function -> FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
Rule 67    function -> FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE

Terminals, with rules where they appear

ASSIGN               : 23
BACKWARD             : 53
BOOL                 : 17
BOX                  : 39
CARET                : 47
CBRACKET             : 24 51 66 67
CELL                 : 16
COMMA                : 19 20
DECIMAL              : 41
DO                   : 60 61 62 63 63 64 64 64 65 65 66 67
DONE                 : 60 61 62 63 63 64 64 64 65 65 66 67
DROP                 : 57
ELDEF                : 63 64
ELUND                : 64 65
EMPTY                : 37
EQUAL                : 50
EXIT                 : 40
FALSE                : 35
FINISH               : 61
FORWARD              : 52
FUNCTION             : 66 67
GREATER              : 48
HEXADECIMAL          : 42
IDENT                : 19 21 24 25 51 66 67 67
IF                   : 62 63 64 65
INF                  : 31
INT                  : 15
LEFT                 : 54
LESS                 : 49
LOAD                 : 56
LOOK                 : 58
MINUS                : 44 45
MINUS_INF            : 32
NAN                  : 33
NL                   : 5 6 7 8 9 10 11 12 13 63 64 64 65 67
OBRACKET             : 24 51 66 67
PLUS                 : 43
RETURN               : 12
RIGHT                : 55
SHARP                : 46
TEST                 : 59
TRUE                 : 34
UNDEF                : 36
VAR                  : 18
WALL                 : 38
WHILE                : 60 61
error                : 

Nonterminals, with rules where they appear

al_expression        : 28
assignment           : 6 20 22
const                : 27
declaration_list     : 5
empty                : 13
expression           : 23 24 43 43 44 44 45 46 47 47 48 48 49 49 50 50 52 53 56 57 60 61 62 63 64 65
function             : 10
function_call        : 11 29
if                   : 8
operator             : 9 30
program              : 0
statement            : 3 4
stmt_list            : 1 3 60 61 61 62 63 63 64 64 64 65 65 66 67
type                 : 14
variable             : 23 26 51
vars_list            : 14 19 20
while                : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (60) while -> . WHILE expression DO stmt_list DONE
    (61) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (62) if -> . IF expression DO stmt_list DONE
    (63) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (64) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST
    (66) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (67) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    FUNCTION        shift and go to state 25
    IDENT           shift and go to state 26
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 27
    CELL            shift and go to state 28
    BOOL            shift and go to state 29
    VAR             shift and go to state 30

    program                        shift and go to state 1
    stmt_list                      shift and go to state 2
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> stmt_list .
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (60) while -> . WHILE expression DO stmt_list DONE
    (61) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (62) if -> . IF expression DO stmt_list DONE
    (63) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (64) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST
    (66) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (67) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT

    $end            reduce using rule 1 (program -> stmt_list .)
    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    FUNCTION        shift and go to state 25
    IDENT           shift and go to state 26
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 27
    CELL            shift and go to state 28
    BOOL            shift and go to state 29
    VAR             shift and go to state 30

    statement                      shift and go to state 31
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 3

    (4) stmt_list -> statement .

    RETURN          reduce using rule 4 (stmt_list -> statement .)
    WHILE           reduce using rule 4 (stmt_list -> statement .)
    IF              reduce using rule 4 (stmt_list -> statement .)
    FORWARD         reduce using rule 4 (stmt_list -> statement .)
    BACKWARD        reduce using rule 4 (stmt_list -> statement .)
    LEFT            reduce using rule 4 (stmt_list -> statement .)
    RIGHT           reduce using rule 4 (stmt_list -> statement .)
    LOAD            reduce using rule 4 (stmt_list -> statement .)
    DROP            reduce using rule 4 (stmt_list -> statement .)
    LOOK            reduce using rule 4 (stmt_list -> statement .)
    TEST            reduce using rule 4 (stmt_list -> statement .)
    FUNCTION        reduce using rule 4 (stmt_list -> statement .)
    IDENT           reduce using rule 4 (stmt_list -> statement .)
    INT             reduce using rule 4 (stmt_list -> statement .)
    CELL            reduce using rule 4 (stmt_list -> statement .)
    BOOL            reduce using rule 4 (stmt_list -> statement .)
    VAR             reduce using rule 4 (stmt_list -> statement .)
    NL              reduce using rule 4 (stmt_list -> statement .)
    $end            reduce using rule 4 (stmt_list -> statement .)
    DONE            reduce using rule 4 (stmt_list -> statement .)
    FINISH          reduce using rule 4 (stmt_list -> statement .)


state 4

    (5) statement -> declaration_list . NL

    NL              shift and go to state 32


state 5

    (6) statement -> assignment . NL

    NL              shift and go to state 33


state 6

    (7) statement -> while . NL

    NL              shift and go to state 34


state 7

    (8) statement -> if . NL

    NL              shift and go to state 35


state 8

    (9) statement -> operator . NL

    NL              shift and go to state 36


state 9

    (10) statement -> function . NL

    NL              shift and go to state 37


state 10

    (11) statement -> function_call . NL

    NL              shift and go to state 38


state 11

    (12) statement -> RETURN . NL

    NL              shift and go to state 39


state 12

    (13) statement -> empty . NL

    NL              shift and go to state 40


state 13

    (14) declaration_list -> type . vars_list
    (19) vars_list -> . IDENT COMMA vars_list
    (20) vars_list -> . assignment COMMA vars_list
    (21) vars_list -> . IDENT
    (22) vars_list -> . assignment
    (23) assignment -> . variable ASSIGN expression
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT

    IDENT           shift and go to state 42

    vars_list                      shift and go to state 41
    assignment                     shift and go to state 43
    variable                       shift and go to state 14

state 14

    (23) assignment -> variable . ASSIGN expression

    ASSIGN          shift and go to state 44


state 15

    (60) while -> WHILE . expression DO stmt_list DONE
    (61) while -> WHILE . expression DO stmt_list FINISH stmt_list DONE
    (26) expression -> . variable
    (27) expression -> . const
    (28) expression -> . al_expression
    (29) expression -> . function_call
    (30) expression -> . operator
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT
    (31) const -> . INF
    (32) const -> . MINUS_INF
    (33) const -> . NAN
    (34) const -> . TRUE
    (35) const -> . FALSE
    (36) const -> . UNDEF
    (37) const -> . EMPTY
    (38) const -> . WALL
    (39) const -> . BOX
    (40) const -> . EXIT
    (41) const -> . DECIMAL
    (42) const -> . HEXADECIMAL
    (43) al_expression -> . expression PLUS expression
    (44) al_expression -> . expression MINUS expression
    (45) al_expression -> . MINUS expression
    (46) al_expression -> . SHARP expression
    (47) al_expression -> . expression CARET expression
    (48) al_expression -> . expression GREATER expression
    (49) al_expression -> . expression LESS expression
    (50) al_expression -> . expression EQUAL expression
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST

    IDENT           shift and go to state 51
    INF             shift and go to state 52
    MINUS_INF       shift and go to state 53
    NAN             shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    UNDEF           shift and go to state 57
    EMPTY           shift and go to state 58
    WALL            shift and go to state 59
    BOX             shift and go to state 60
    EXIT            shift and go to state 61
    DECIMAL         shift and go to state 62
    HEXADECIMAL     shift and go to state 63
    MINUS           shift and go to state 64
    SHARP           shift and go to state 65
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24

    expression                     shift and go to state 45
    variable                       shift and go to state 46
    const                          shift and go to state 47
    al_expression                  shift and go to state 48
    function_call                  shift and go to state 49
    operator                       shift and go to state 50

state 16

    (62) if -> IF . expression DO stmt_list DONE
    (63) if -> IF . expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (64) if -> IF . expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> IF . expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (26) expression -> . variable
    (27) expression -> . const
    (28) expression -> . al_expression
    (29) expression -> . function_call
    (30) expression -> . operator
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT
    (31) const -> . INF
    (32) const -> . MINUS_INF
    (33) const -> . NAN
    (34) const -> . TRUE
    (35) const -> . FALSE
    (36) const -> . UNDEF
    (37) const -> . EMPTY
    (38) const -> . WALL
    (39) const -> . BOX
    (40) const -> . EXIT
    (41) const -> . DECIMAL
    (42) const -> . HEXADECIMAL
    (43) al_expression -> . expression PLUS expression
    (44) al_expression -> . expression MINUS expression
    (45) al_expression -> . MINUS expression
    (46) al_expression -> . SHARP expression
    (47) al_expression -> . expression CARET expression
    (48) al_expression -> . expression GREATER expression
    (49) al_expression -> . expression LESS expression
    (50) al_expression -> . expression EQUAL expression
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST

    IDENT           shift and go to state 51
    INF             shift and go to state 52
    MINUS_INF       shift and go to state 53
    NAN             shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    UNDEF           shift and go to state 57
    EMPTY           shift and go to state 58
    WALL            shift and go to state 59
    BOX             shift and go to state 60
    EXIT            shift and go to state 61
    DECIMAL         shift and go to state 62
    HEXADECIMAL     shift and go to state 63
    MINUS           shift and go to state 64
    SHARP           shift and go to state 65
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24

    expression                     shift and go to state 66
    variable                       shift and go to state 46
    const                          shift and go to state 47
    al_expression                  shift and go to state 48
    function_call                  shift and go to state 49
    operator                       shift and go to state 50

state 17

    (52) operator -> FORWARD . expression
    (26) expression -> . variable
    (27) expression -> . const
    (28) expression -> . al_expression
    (29) expression -> . function_call
    (30) expression -> . operator
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT
    (31) const -> . INF
    (32) const -> . MINUS_INF
    (33) const -> . NAN
    (34) const -> . TRUE
    (35) const -> . FALSE
    (36) const -> . UNDEF
    (37) const -> . EMPTY
    (38) const -> . WALL
    (39) const -> . BOX
    (40) const -> . EXIT
    (41) const -> . DECIMAL
    (42) const -> . HEXADECIMAL
    (43) al_expression -> . expression PLUS expression
    (44) al_expression -> . expression MINUS expression
    (45) al_expression -> . MINUS expression
    (46) al_expression -> . SHARP expression
    (47) al_expression -> . expression CARET expression
    (48) al_expression -> . expression GREATER expression
    (49) al_expression -> . expression LESS expression
    (50) al_expression -> . expression EQUAL expression
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST

    IDENT           shift and go to state 51
    INF             shift and go to state 52
    MINUS_INF       shift and go to state 53
    NAN             shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    UNDEF           shift and go to state 57
    EMPTY           shift and go to state 58
    WALL            shift and go to state 59
    BOX             shift and go to state 60
    EXIT            shift and go to state 61
    DECIMAL         shift and go to state 62
    HEXADECIMAL     shift and go to state 63
    MINUS           shift and go to state 64
    SHARP           shift and go to state 65
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24

    expression                     shift and go to state 67
    variable                       shift and go to state 46
    const                          shift and go to state 47
    al_expression                  shift and go to state 48
    function_call                  shift and go to state 49
    operator                       shift and go to state 50

state 18

    (53) operator -> BACKWARD . expression
    (26) expression -> . variable
    (27) expression -> . const
    (28) expression -> . al_expression
    (29) expression -> . function_call
    (30) expression -> . operator
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT
    (31) const -> . INF
    (32) const -> . MINUS_INF
    (33) const -> . NAN
    (34) const -> . TRUE
    (35) const -> . FALSE
    (36) const -> . UNDEF
    (37) const -> . EMPTY
    (38) const -> . WALL
    (39) const -> . BOX
    (40) const -> . EXIT
    (41) const -> . DECIMAL
    (42) const -> . HEXADECIMAL
    (43) al_expression -> . expression PLUS expression
    (44) al_expression -> . expression MINUS expression
    (45) al_expression -> . MINUS expression
    (46) al_expression -> . SHARP expression
    (47) al_expression -> . expression CARET expression
    (48) al_expression -> . expression GREATER expression
    (49) al_expression -> . expression LESS expression
    (50) al_expression -> . expression EQUAL expression
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST

    IDENT           shift and go to state 51
    INF             shift and go to state 52
    MINUS_INF       shift and go to state 53
    NAN             shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    UNDEF           shift and go to state 57
    EMPTY           shift and go to state 58
    WALL            shift and go to state 59
    BOX             shift and go to state 60
    EXIT            shift and go to state 61
    DECIMAL         shift and go to state 62
    HEXADECIMAL     shift and go to state 63
    MINUS           shift and go to state 64
    SHARP           shift and go to state 65
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24

    expression                     shift and go to state 68
    variable                       shift and go to state 46
    const                          shift and go to state 47
    al_expression                  shift and go to state 48
    function_call                  shift and go to state 49
    operator                       shift and go to state 50

state 19

    (54) operator -> LEFT .

    NL              reduce using rule 54 (operator -> LEFT .)
    DO              reduce using rule 54 (operator -> LEFT .)
    PLUS            reduce using rule 54 (operator -> LEFT .)
    MINUS           reduce using rule 54 (operator -> LEFT .)
    CARET           reduce using rule 54 (operator -> LEFT .)
    GREATER         reduce using rule 54 (operator -> LEFT .)
    LESS            reduce using rule 54 (operator -> LEFT .)
    EQUAL           reduce using rule 54 (operator -> LEFT .)
    COMMA           reduce using rule 54 (operator -> LEFT .)
    CBRACKET        reduce using rule 54 (operator -> LEFT .)


state 20

    (55) operator -> RIGHT .

    NL              reduce using rule 55 (operator -> RIGHT .)
    DO              reduce using rule 55 (operator -> RIGHT .)
    PLUS            reduce using rule 55 (operator -> RIGHT .)
    MINUS           reduce using rule 55 (operator -> RIGHT .)
    CARET           reduce using rule 55 (operator -> RIGHT .)
    GREATER         reduce using rule 55 (operator -> RIGHT .)
    LESS            reduce using rule 55 (operator -> RIGHT .)
    EQUAL           reduce using rule 55 (operator -> RIGHT .)
    COMMA           reduce using rule 55 (operator -> RIGHT .)
    CBRACKET        reduce using rule 55 (operator -> RIGHT .)


state 21

    (56) operator -> LOAD . expression
    (26) expression -> . variable
    (27) expression -> . const
    (28) expression -> . al_expression
    (29) expression -> . function_call
    (30) expression -> . operator
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT
    (31) const -> . INF
    (32) const -> . MINUS_INF
    (33) const -> . NAN
    (34) const -> . TRUE
    (35) const -> . FALSE
    (36) const -> . UNDEF
    (37) const -> . EMPTY
    (38) const -> . WALL
    (39) const -> . BOX
    (40) const -> . EXIT
    (41) const -> . DECIMAL
    (42) const -> . HEXADECIMAL
    (43) al_expression -> . expression PLUS expression
    (44) al_expression -> . expression MINUS expression
    (45) al_expression -> . MINUS expression
    (46) al_expression -> . SHARP expression
    (47) al_expression -> . expression CARET expression
    (48) al_expression -> . expression GREATER expression
    (49) al_expression -> . expression LESS expression
    (50) al_expression -> . expression EQUAL expression
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST

    IDENT           shift and go to state 51
    INF             shift and go to state 52
    MINUS_INF       shift and go to state 53
    NAN             shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    UNDEF           shift and go to state 57
    EMPTY           shift and go to state 58
    WALL            shift and go to state 59
    BOX             shift and go to state 60
    EXIT            shift and go to state 61
    DECIMAL         shift and go to state 62
    HEXADECIMAL     shift and go to state 63
    MINUS           shift and go to state 64
    SHARP           shift and go to state 65
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24

    expression                     shift and go to state 69
    variable                       shift and go to state 46
    const                          shift and go to state 47
    al_expression                  shift and go to state 48
    function_call                  shift and go to state 49
    operator                       shift and go to state 50

state 22

    (57) operator -> DROP . expression
    (26) expression -> . variable
    (27) expression -> . const
    (28) expression -> . al_expression
    (29) expression -> . function_call
    (30) expression -> . operator
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT
    (31) const -> . INF
    (32) const -> . MINUS_INF
    (33) const -> . NAN
    (34) const -> . TRUE
    (35) const -> . FALSE
    (36) const -> . UNDEF
    (37) const -> . EMPTY
    (38) const -> . WALL
    (39) const -> . BOX
    (40) const -> . EXIT
    (41) const -> . DECIMAL
    (42) const -> . HEXADECIMAL
    (43) al_expression -> . expression PLUS expression
    (44) al_expression -> . expression MINUS expression
    (45) al_expression -> . MINUS expression
    (46) al_expression -> . SHARP expression
    (47) al_expression -> . expression CARET expression
    (48) al_expression -> . expression GREATER expression
    (49) al_expression -> . expression LESS expression
    (50) al_expression -> . expression EQUAL expression
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST

    IDENT           shift and go to state 51
    INF             shift and go to state 52
    MINUS_INF       shift and go to state 53
    NAN             shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    UNDEF           shift and go to state 57
    EMPTY           shift and go to state 58
    WALL            shift and go to state 59
    BOX             shift and go to state 60
    EXIT            shift and go to state 61
    DECIMAL         shift and go to state 62
    HEXADECIMAL     shift and go to state 63
    MINUS           shift and go to state 64
    SHARP           shift and go to state 65
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24

    expression                     shift and go to state 70
    variable                       shift and go to state 46
    const                          shift and go to state 47
    al_expression                  shift and go to state 48
    function_call                  shift and go to state 49
    operator                       shift and go to state 50

state 23

    (58) operator -> LOOK .

    NL              reduce using rule 58 (operator -> LOOK .)
    DO              reduce using rule 58 (operator -> LOOK .)
    PLUS            reduce using rule 58 (operator -> LOOK .)
    MINUS           reduce using rule 58 (operator -> LOOK .)
    CARET           reduce using rule 58 (operator -> LOOK .)
    GREATER         reduce using rule 58 (operator -> LOOK .)
    LESS            reduce using rule 58 (operator -> LOOK .)
    EQUAL           reduce using rule 58 (operator -> LOOK .)
    COMMA           reduce using rule 58 (operator -> LOOK .)
    CBRACKET        reduce using rule 58 (operator -> LOOK .)


state 24

    (59) operator -> TEST .

    NL              reduce using rule 59 (operator -> TEST .)
    DO              reduce using rule 59 (operator -> TEST .)
    PLUS            reduce using rule 59 (operator -> TEST .)
    MINUS           reduce using rule 59 (operator -> TEST .)
    CARET           reduce using rule 59 (operator -> TEST .)
    GREATER         reduce using rule 59 (operator -> TEST .)
    LESS            reduce using rule 59 (operator -> TEST .)
    EQUAL           reduce using rule 59 (operator -> TEST .)
    COMMA           reduce using rule 59 (operator -> TEST .)
    CBRACKET        reduce using rule 59 (operator -> TEST .)


state 25

    (66) function -> FUNCTION . OBRACKET IDENT CBRACKET DO stmt_list DONE
    (67) function -> FUNCTION . IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE

    OBRACKET        shift and go to state 71
    IDENT           shift and go to state 72


state 26

    (51) function_call -> IDENT . OBRACKET variable CBRACKET
    (24) variable -> IDENT . OBRACKET expression CBRACKET
    (25) variable -> IDENT .

    OBRACKET        shift and go to state 73
    ASSIGN          reduce using rule 25 (variable -> IDENT .)


state 27

    (15) type -> INT .

    IDENT           reduce using rule 15 (type -> INT .)


state 28

    (16) type -> CELL .

    IDENT           reduce using rule 16 (type -> CELL .)


state 29

    (17) type -> BOOL .

    IDENT           reduce using rule 17 (type -> BOOL .)


state 30

    (18) type -> VAR .

    IDENT           reduce using rule 18 (type -> VAR .)


state 31

    (3) stmt_list -> stmt_list statement .

    RETURN          reduce using rule 3 (stmt_list -> stmt_list statement .)
    WHILE           reduce using rule 3 (stmt_list -> stmt_list statement .)
    IF              reduce using rule 3 (stmt_list -> stmt_list statement .)
    FORWARD         reduce using rule 3 (stmt_list -> stmt_list statement .)
    BACKWARD        reduce using rule 3 (stmt_list -> stmt_list statement .)
    LEFT            reduce using rule 3 (stmt_list -> stmt_list statement .)
    RIGHT           reduce using rule 3 (stmt_list -> stmt_list statement .)
    LOAD            reduce using rule 3 (stmt_list -> stmt_list statement .)
    DROP            reduce using rule 3 (stmt_list -> stmt_list statement .)
    LOOK            reduce using rule 3 (stmt_list -> stmt_list statement .)
    TEST            reduce using rule 3 (stmt_list -> stmt_list statement .)
    FUNCTION        reduce using rule 3 (stmt_list -> stmt_list statement .)
    IDENT           reduce using rule 3 (stmt_list -> stmt_list statement .)
    INT             reduce using rule 3 (stmt_list -> stmt_list statement .)
    CELL            reduce using rule 3 (stmt_list -> stmt_list statement .)
    BOOL            reduce using rule 3 (stmt_list -> stmt_list statement .)
    VAR             reduce using rule 3 (stmt_list -> stmt_list statement .)
    NL              reduce using rule 3 (stmt_list -> stmt_list statement .)
    $end            reduce using rule 3 (stmt_list -> stmt_list statement .)
    DONE            reduce using rule 3 (stmt_list -> stmt_list statement .)
    FINISH          reduce using rule 3 (stmt_list -> stmt_list statement .)


state 32

    (5) statement -> declaration_list NL .

    RETURN          reduce using rule 5 (statement -> declaration_list NL .)
    WHILE           reduce using rule 5 (statement -> declaration_list NL .)
    IF              reduce using rule 5 (statement -> declaration_list NL .)
    FORWARD         reduce using rule 5 (statement -> declaration_list NL .)
    BACKWARD        reduce using rule 5 (statement -> declaration_list NL .)
    LEFT            reduce using rule 5 (statement -> declaration_list NL .)
    RIGHT           reduce using rule 5 (statement -> declaration_list NL .)
    LOAD            reduce using rule 5 (statement -> declaration_list NL .)
    DROP            reduce using rule 5 (statement -> declaration_list NL .)
    LOOK            reduce using rule 5 (statement -> declaration_list NL .)
    TEST            reduce using rule 5 (statement -> declaration_list NL .)
    FUNCTION        reduce using rule 5 (statement -> declaration_list NL .)
    IDENT           reduce using rule 5 (statement -> declaration_list NL .)
    INT             reduce using rule 5 (statement -> declaration_list NL .)
    CELL            reduce using rule 5 (statement -> declaration_list NL .)
    BOOL            reduce using rule 5 (statement -> declaration_list NL .)
    VAR             reduce using rule 5 (statement -> declaration_list NL .)
    NL              reduce using rule 5 (statement -> declaration_list NL .)
    $end            reduce using rule 5 (statement -> declaration_list NL .)
    DONE            reduce using rule 5 (statement -> declaration_list NL .)
    FINISH          reduce using rule 5 (statement -> declaration_list NL .)


state 33

    (6) statement -> assignment NL .

    RETURN          reduce using rule 6 (statement -> assignment NL .)
    WHILE           reduce using rule 6 (statement -> assignment NL .)
    IF              reduce using rule 6 (statement -> assignment NL .)
    FORWARD         reduce using rule 6 (statement -> assignment NL .)
    BACKWARD        reduce using rule 6 (statement -> assignment NL .)
    LEFT            reduce using rule 6 (statement -> assignment NL .)
    RIGHT           reduce using rule 6 (statement -> assignment NL .)
    LOAD            reduce using rule 6 (statement -> assignment NL .)
    DROP            reduce using rule 6 (statement -> assignment NL .)
    LOOK            reduce using rule 6 (statement -> assignment NL .)
    TEST            reduce using rule 6 (statement -> assignment NL .)
    FUNCTION        reduce using rule 6 (statement -> assignment NL .)
    IDENT           reduce using rule 6 (statement -> assignment NL .)
    INT             reduce using rule 6 (statement -> assignment NL .)
    CELL            reduce using rule 6 (statement -> assignment NL .)
    BOOL            reduce using rule 6 (statement -> assignment NL .)
    VAR             reduce using rule 6 (statement -> assignment NL .)
    NL              reduce using rule 6 (statement -> assignment NL .)
    $end            reduce using rule 6 (statement -> assignment NL .)
    DONE            reduce using rule 6 (statement -> assignment NL .)
    FINISH          reduce using rule 6 (statement -> assignment NL .)


state 34

    (7) statement -> while NL .

    RETURN          reduce using rule 7 (statement -> while NL .)
    WHILE           reduce using rule 7 (statement -> while NL .)
    IF              reduce using rule 7 (statement -> while NL .)
    FORWARD         reduce using rule 7 (statement -> while NL .)
    BACKWARD        reduce using rule 7 (statement -> while NL .)
    LEFT            reduce using rule 7 (statement -> while NL .)
    RIGHT           reduce using rule 7 (statement -> while NL .)
    LOAD            reduce using rule 7 (statement -> while NL .)
    DROP            reduce using rule 7 (statement -> while NL .)
    LOOK            reduce using rule 7 (statement -> while NL .)
    TEST            reduce using rule 7 (statement -> while NL .)
    FUNCTION        reduce using rule 7 (statement -> while NL .)
    IDENT           reduce using rule 7 (statement -> while NL .)
    INT             reduce using rule 7 (statement -> while NL .)
    CELL            reduce using rule 7 (statement -> while NL .)
    BOOL            reduce using rule 7 (statement -> while NL .)
    VAR             reduce using rule 7 (statement -> while NL .)
    NL              reduce using rule 7 (statement -> while NL .)
    $end            reduce using rule 7 (statement -> while NL .)
    DONE            reduce using rule 7 (statement -> while NL .)
    FINISH          reduce using rule 7 (statement -> while NL .)


state 35

    (8) statement -> if NL .

    RETURN          reduce using rule 8 (statement -> if NL .)
    WHILE           reduce using rule 8 (statement -> if NL .)
    IF              reduce using rule 8 (statement -> if NL .)
    FORWARD         reduce using rule 8 (statement -> if NL .)
    BACKWARD        reduce using rule 8 (statement -> if NL .)
    LEFT            reduce using rule 8 (statement -> if NL .)
    RIGHT           reduce using rule 8 (statement -> if NL .)
    LOAD            reduce using rule 8 (statement -> if NL .)
    DROP            reduce using rule 8 (statement -> if NL .)
    LOOK            reduce using rule 8 (statement -> if NL .)
    TEST            reduce using rule 8 (statement -> if NL .)
    FUNCTION        reduce using rule 8 (statement -> if NL .)
    IDENT           reduce using rule 8 (statement -> if NL .)
    INT             reduce using rule 8 (statement -> if NL .)
    CELL            reduce using rule 8 (statement -> if NL .)
    BOOL            reduce using rule 8 (statement -> if NL .)
    VAR             reduce using rule 8 (statement -> if NL .)
    NL              reduce using rule 8 (statement -> if NL .)
    $end            reduce using rule 8 (statement -> if NL .)
    DONE            reduce using rule 8 (statement -> if NL .)
    FINISH          reduce using rule 8 (statement -> if NL .)


state 36

    (9) statement -> operator NL .

    RETURN          reduce using rule 9 (statement -> operator NL .)
    WHILE           reduce using rule 9 (statement -> operator NL .)
    IF              reduce using rule 9 (statement -> operator NL .)
    FORWARD         reduce using rule 9 (statement -> operator NL .)
    BACKWARD        reduce using rule 9 (statement -> operator NL .)
    LEFT            reduce using rule 9 (statement -> operator NL .)
    RIGHT           reduce using rule 9 (statement -> operator NL .)
    LOAD            reduce using rule 9 (statement -> operator NL .)
    DROP            reduce using rule 9 (statement -> operator NL .)
    LOOK            reduce using rule 9 (statement -> operator NL .)
    TEST            reduce using rule 9 (statement -> operator NL .)
    FUNCTION        reduce using rule 9 (statement -> operator NL .)
    IDENT           reduce using rule 9 (statement -> operator NL .)
    INT             reduce using rule 9 (statement -> operator NL .)
    CELL            reduce using rule 9 (statement -> operator NL .)
    BOOL            reduce using rule 9 (statement -> operator NL .)
    VAR             reduce using rule 9 (statement -> operator NL .)
    NL              reduce using rule 9 (statement -> operator NL .)
    $end            reduce using rule 9 (statement -> operator NL .)
    DONE            reduce using rule 9 (statement -> operator NL .)
    FINISH          reduce using rule 9 (statement -> operator NL .)


state 37

    (10) statement -> function NL .

    RETURN          reduce using rule 10 (statement -> function NL .)
    WHILE           reduce using rule 10 (statement -> function NL .)
    IF              reduce using rule 10 (statement -> function NL .)
    FORWARD         reduce using rule 10 (statement -> function NL .)
    BACKWARD        reduce using rule 10 (statement -> function NL .)
    LEFT            reduce using rule 10 (statement -> function NL .)
    RIGHT           reduce using rule 10 (statement -> function NL .)
    LOAD            reduce using rule 10 (statement -> function NL .)
    DROP            reduce using rule 10 (statement -> function NL .)
    LOOK            reduce using rule 10 (statement -> function NL .)
    TEST            reduce using rule 10 (statement -> function NL .)
    FUNCTION        reduce using rule 10 (statement -> function NL .)
    IDENT           reduce using rule 10 (statement -> function NL .)
    INT             reduce using rule 10 (statement -> function NL .)
    CELL            reduce using rule 10 (statement -> function NL .)
    BOOL            reduce using rule 10 (statement -> function NL .)
    VAR             reduce using rule 10 (statement -> function NL .)
    NL              reduce using rule 10 (statement -> function NL .)
    $end            reduce using rule 10 (statement -> function NL .)
    DONE            reduce using rule 10 (statement -> function NL .)
    FINISH          reduce using rule 10 (statement -> function NL .)


state 38

    (11) statement -> function_call NL .

    RETURN          reduce using rule 11 (statement -> function_call NL .)
    WHILE           reduce using rule 11 (statement -> function_call NL .)
    IF              reduce using rule 11 (statement -> function_call NL .)
    FORWARD         reduce using rule 11 (statement -> function_call NL .)
    BACKWARD        reduce using rule 11 (statement -> function_call NL .)
    LEFT            reduce using rule 11 (statement -> function_call NL .)
    RIGHT           reduce using rule 11 (statement -> function_call NL .)
    LOAD            reduce using rule 11 (statement -> function_call NL .)
    DROP            reduce using rule 11 (statement -> function_call NL .)
    LOOK            reduce using rule 11 (statement -> function_call NL .)
    TEST            reduce using rule 11 (statement -> function_call NL .)
    FUNCTION        reduce using rule 11 (statement -> function_call NL .)
    IDENT           reduce using rule 11 (statement -> function_call NL .)
    INT             reduce using rule 11 (statement -> function_call NL .)
    CELL            reduce using rule 11 (statement -> function_call NL .)
    BOOL            reduce using rule 11 (statement -> function_call NL .)
    VAR             reduce using rule 11 (statement -> function_call NL .)
    NL              reduce using rule 11 (statement -> function_call NL .)
    $end            reduce using rule 11 (statement -> function_call NL .)
    DONE            reduce using rule 11 (statement -> function_call NL .)
    FINISH          reduce using rule 11 (statement -> function_call NL .)


state 39

    (12) statement -> RETURN NL .

    RETURN          reduce using rule 12 (statement -> RETURN NL .)
    WHILE           reduce using rule 12 (statement -> RETURN NL .)
    IF              reduce using rule 12 (statement -> RETURN NL .)
    FORWARD         reduce using rule 12 (statement -> RETURN NL .)
    BACKWARD        reduce using rule 12 (statement -> RETURN NL .)
    LEFT            reduce using rule 12 (statement -> RETURN NL .)
    RIGHT           reduce using rule 12 (statement -> RETURN NL .)
    LOAD            reduce using rule 12 (statement -> RETURN NL .)
    DROP            reduce using rule 12 (statement -> RETURN NL .)
    LOOK            reduce using rule 12 (statement -> RETURN NL .)
    TEST            reduce using rule 12 (statement -> RETURN NL .)
    FUNCTION        reduce using rule 12 (statement -> RETURN NL .)
    IDENT           reduce using rule 12 (statement -> RETURN NL .)
    INT             reduce using rule 12 (statement -> RETURN NL .)
    CELL            reduce using rule 12 (statement -> RETURN NL .)
    BOOL            reduce using rule 12 (statement -> RETURN NL .)
    VAR             reduce using rule 12 (statement -> RETURN NL .)
    NL              reduce using rule 12 (statement -> RETURN NL .)
    $end            reduce using rule 12 (statement -> RETURN NL .)
    DONE            reduce using rule 12 (statement -> RETURN NL .)
    FINISH          reduce using rule 12 (statement -> RETURN NL .)


state 40

    (13) statement -> empty NL .

    RETURN          reduce using rule 13 (statement -> empty NL .)
    WHILE           reduce using rule 13 (statement -> empty NL .)
    IF              reduce using rule 13 (statement -> empty NL .)
    FORWARD         reduce using rule 13 (statement -> empty NL .)
    BACKWARD        reduce using rule 13 (statement -> empty NL .)
    LEFT            reduce using rule 13 (statement -> empty NL .)
    RIGHT           reduce using rule 13 (statement -> empty NL .)
    LOAD            reduce using rule 13 (statement -> empty NL .)
    DROP            reduce using rule 13 (statement -> empty NL .)
    LOOK            reduce using rule 13 (statement -> empty NL .)
    TEST            reduce using rule 13 (statement -> empty NL .)
    FUNCTION        reduce using rule 13 (statement -> empty NL .)
    IDENT           reduce using rule 13 (statement -> empty NL .)
    INT             reduce using rule 13 (statement -> empty NL .)
    CELL            reduce using rule 13 (statement -> empty NL .)
    BOOL            reduce using rule 13 (statement -> empty NL .)
    VAR             reduce using rule 13 (statement -> empty NL .)
    NL              reduce using rule 13 (statement -> empty NL .)
    $end            reduce using rule 13 (statement -> empty NL .)
    DONE            reduce using rule 13 (statement -> empty NL .)
    FINISH          reduce using rule 13 (statement -> empty NL .)


state 41

    (14) declaration_list -> type vars_list .

    NL              reduce using rule 14 (declaration_list -> type vars_list .)


state 42

    (19) vars_list -> IDENT . COMMA vars_list
    (21) vars_list -> IDENT .
    (24) variable -> IDENT . OBRACKET expression CBRACKET
    (25) variable -> IDENT .

    COMMA           shift and go to state 74
    NL              reduce using rule 21 (vars_list -> IDENT .)
    OBRACKET        shift and go to state 75
    ASSIGN          reduce using rule 25 (variable -> IDENT .)


state 43

    (20) vars_list -> assignment . COMMA vars_list
    (22) vars_list -> assignment .

    COMMA           shift and go to state 76
    NL              reduce using rule 22 (vars_list -> assignment .)


state 44

    (23) assignment -> variable ASSIGN . expression
    (26) expression -> . variable
    (27) expression -> . const
    (28) expression -> . al_expression
    (29) expression -> . function_call
    (30) expression -> . operator
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT
    (31) const -> . INF
    (32) const -> . MINUS_INF
    (33) const -> . NAN
    (34) const -> . TRUE
    (35) const -> . FALSE
    (36) const -> . UNDEF
    (37) const -> . EMPTY
    (38) const -> . WALL
    (39) const -> . BOX
    (40) const -> . EXIT
    (41) const -> . DECIMAL
    (42) const -> . HEXADECIMAL
    (43) al_expression -> . expression PLUS expression
    (44) al_expression -> . expression MINUS expression
    (45) al_expression -> . MINUS expression
    (46) al_expression -> . SHARP expression
    (47) al_expression -> . expression CARET expression
    (48) al_expression -> . expression GREATER expression
    (49) al_expression -> . expression LESS expression
    (50) al_expression -> . expression EQUAL expression
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST

    IDENT           shift and go to state 51
    INF             shift and go to state 52
    MINUS_INF       shift and go to state 53
    NAN             shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    UNDEF           shift and go to state 57
    EMPTY           shift and go to state 58
    WALL            shift and go to state 59
    BOX             shift and go to state 60
    EXIT            shift and go to state 61
    DECIMAL         shift and go to state 62
    HEXADECIMAL     shift and go to state 63
    MINUS           shift and go to state 64
    SHARP           shift and go to state 65
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24

    variable                       shift and go to state 46
    expression                     shift and go to state 77
    const                          shift and go to state 47
    al_expression                  shift and go to state 48
    function_call                  shift and go to state 49
    operator                       shift and go to state 50

state 45

    (60) while -> WHILE expression . DO stmt_list DONE
    (61) while -> WHILE expression . DO stmt_list FINISH stmt_list DONE
    (43) al_expression -> expression . PLUS expression
    (44) al_expression -> expression . MINUS expression
    (47) al_expression -> expression . CARET expression
    (48) al_expression -> expression . GREATER expression
    (49) al_expression -> expression . LESS expression
    (50) al_expression -> expression . EQUAL expression

    DO              shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    CARET           shift and go to state 81
    GREATER         shift and go to state 82
    LESS            shift and go to state 83
    EQUAL           shift and go to state 84


state 46

    (26) expression -> variable .

    DO              reduce using rule 26 (expression -> variable .)
    PLUS            reduce using rule 26 (expression -> variable .)
    MINUS           reduce using rule 26 (expression -> variable .)
    CARET           reduce using rule 26 (expression -> variable .)
    GREATER         reduce using rule 26 (expression -> variable .)
    LESS            reduce using rule 26 (expression -> variable .)
    EQUAL           reduce using rule 26 (expression -> variable .)
    NL              reduce using rule 26 (expression -> variable .)
    COMMA           reduce using rule 26 (expression -> variable .)
    CBRACKET        reduce using rule 26 (expression -> variable .)


state 47

    (27) expression -> const .

    DO              reduce using rule 27 (expression -> const .)
    PLUS            reduce using rule 27 (expression -> const .)
    MINUS           reduce using rule 27 (expression -> const .)
    CARET           reduce using rule 27 (expression -> const .)
    GREATER         reduce using rule 27 (expression -> const .)
    LESS            reduce using rule 27 (expression -> const .)
    EQUAL           reduce using rule 27 (expression -> const .)
    NL              reduce using rule 27 (expression -> const .)
    COMMA           reduce using rule 27 (expression -> const .)
    CBRACKET        reduce using rule 27 (expression -> const .)


state 48

    (28) expression -> al_expression .

    DO              reduce using rule 28 (expression -> al_expression .)
    PLUS            reduce using rule 28 (expression -> al_expression .)
    MINUS           reduce using rule 28 (expression -> al_expression .)
    CARET           reduce using rule 28 (expression -> al_expression .)
    GREATER         reduce using rule 28 (expression -> al_expression .)
    LESS            reduce using rule 28 (expression -> al_expression .)
    EQUAL           reduce using rule 28 (expression -> al_expression .)
    NL              reduce using rule 28 (expression -> al_expression .)
    COMMA           reduce using rule 28 (expression -> al_expression .)
    CBRACKET        reduce using rule 28 (expression -> al_expression .)


state 49

    (29) expression -> function_call .

    DO              reduce using rule 29 (expression -> function_call .)
    PLUS            reduce using rule 29 (expression -> function_call .)
    MINUS           reduce using rule 29 (expression -> function_call .)
    CARET           reduce using rule 29 (expression -> function_call .)
    GREATER         reduce using rule 29 (expression -> function_call .)
    LESS            reduce using rule 29 (expression -> function_call .)
    EQUAL           reduce using rule 29 (expression -> function_call .)
    NL              reduce using rule 29 (expression -> function_call .)
    COMMA           reduce using rule 29 (expression -> function_call .)
    CBRACKET        reduce using rule 29 (expression -> function_call .)


state 50

    (30) expression -> operator .

    DO              reduce using rule 30 (expression -> operator .)
    PLUS            reduce using rule 30 (expression -> operator .)
    MINUS           reduce using rule 30 (expression -> operator .)
    CARET           reduce using rule 30 (expression -> operator .)
    GREATER         reduce using rule 30 (expression -> operator .)
    LESS            reduce using rule 30 (expression -> operator .)
    EQUAL           reduce using rule 30 (expression -> operator .)
    NL              reduce using rule 30 (expression -> operator .)
    COMMA           reduce using rule 30 (expression -> operator .)
    CBRACKET        reduce using rule 30 (expression -> operator .)


state 51

    (24) variable -> IDENT . OBRACKET expression CBRACKET
    (25) variable -> IDENT .
    (51) function_call -> IDENT . OBRACKET variable CBRACKET

    OBRACKET        shift and go to state 85
    DO              reduce using rule 25 (variable -> IDENT .)
    PLUS            reduce using rule 25 (variable -> IDENT .)
    MINUS           reduce using rule 25 (variable -> IDENT .)
    CARET           reduce using rule 25 (variable -> IDENT .)
    GREATER         reduce using rule 25 (variable -> IDENT .)
    LESS            reduce using rule 25 (variable -> IDENT .)
    EQUAL           reduce using rule 25 (variable -> IDENT .)
    NL              reduce using rule 25 (variable -> IDENT .)
    COMMA           reduce using rule 25 (variable -> IDENT .)
    CBRACKET        reduce using rule 25 (variable -> IDENT .)


state 52

    (31) const -> INF .

    DO              reduce using rule 31 (const -> INF .)
    PLUS            reduce using rule 31 (const -> INF .)
    MINUS           reduce using rule 31 (const -> INF .)
    CARET           reduce using rule 31 (const -> INF .)
    GREATER         reduce using rule 31 (const -> INF .)
    LESS            reduce using rule 31 (const -> INF .)
    EQUAL           reduce using rule 31 (const -> INF .)
    NL              reduce using rule 31 (const -> INF .)
    COMMA           reduce using rule 31 (const -> INF .)
    CBRACKET        reduce using rule 31 (const -> INF .)


state 53

    (32) const -> MINUS_INF .

    DO              reduce using rule 32 (const -> MINUS_INF .)
    PLUS            reduce using rule 32 (const -> MINUS_INF .)
    MINUS           reduce using rule 32 (const -> MINUS_INF .)
    CARET           reduce using rule 32 (const -> MINUS_INF .)
    GREATER         reduce using rule 32 (const -> MINUS_INF .)
    LESS            reduce using rule 32 (const -> MINUS_INF .)
    EQUAL           reduce using rule 32 (const -> MINUS_INF .)
    NL              reduce using rule 32 (const -> MINUS_INF .)
    COMMA           reduce using rule 32 (const -> MINUS_INF .)
    CBRACKET        reduce using rule 32 (const -> MINUS_INF .)


state 54

    (33) const -> NAN .

    DO              reduce using rule 33 (const -> NAN .)
    PLUS            reduce using rule 33 (const -> NAN .)
    MINUS           reduce using rule 33 (const -> NAN .)
    CARET           reduce using rule 33 (const -> NAN .)
    GREATER         reduce using rule 33 (const -> NAN .)
    LESS            reduce using rule 33 (const -> NAN .)
    EQUAL           reduce using rule 33 (const -> NAN .)
    NL              reduce using rule 33 (const -> NAN .)
    COMMA           reduce using rule 33 (const -> NAN .)
    CBRACKET        reduce using rule 33 (const -> NAN .)


state 55

    (34) const -> TRUE .

    DO              reduce using rule 34 (const -> TRUE .)
    PLUS            reduce using rule 34 (const -> TRUE .)
    MINUS           reduce using rule 34 (const -> TRUE .)
    CARET           reduce using rule 34 (const -> TRUE .)
    GREATER         reduce using rule 34 (const -> TRUE .)
    LESS            reduce using rule 34 (const -> TRUE .)
    EQUAL           reduce using rule 34 (const -> TRUE .)
    NL              reduce using rule 34 (const -> TRUE .)
    COMMA           reduce using rule 34 (const -> TRUE .)
    CBRACKET        reduce using rule 34 (const -> TRUE .)


state 56

    (35) const -> FALSE .

    DO              reduce using rule 35 (const -> FALSE .)
    PLUS            reduce using rule 35 (const -> FALSE .)
    MINUS           reduce using rule 35 (const -> FALSE .)
    CARET           reduce using rule 35 (const -> FALSE .)
    GREATER         reduce using rule 35 (const -> FALSE .)
    LESS            reduce using rule 35 (const -> FALSE .)
    EQUAL           reduce using rule 35 (const -> FALSE .)
    NL              reduce using rule 35 (const -> FALSE .)
    COMMA           reduce using rule 35 (const -> FALSE .)
    CBRACKET        reduce using rule 35 (const -> FALSE .)


state 57

    (36) const -> UNDEF .

    DO              reduce using rule 36 (const -> UNDEF .)
    PLUS            reduce using rule 36 (const -> UNDEF .)
    MINUS           reduce using rule 36 (const -> UNDEF .)
    CARET           reduce using rule 36 (const -> UNDEF .)
    GREATER         reduce using rule 36 (const -> UNDEF .)
    LESS            reduce using rule 36 (const -> UNDEF .)
    EQUAL           reduce using rule 36 (const -> UNDEF .)
    NL              reduce using rule 36 (const -> UNDEF .)
    COMMA           reduce using rule 36 (const -> UNDEF .)
    CBRACKET        reduce using rule 36 (const -> UNDEF .)


state 58

    (37) const -> EMPTY .

    DO              reduce using rule 37 (const -> EMPTY .)
    PLUS            reduce using rule 37 (const -> EMPTY .)
    MINUS           reduce using rule 37 (const -> EMPTY .)
    CARET           reduce using rule 37 (const -> EMPTY .)
    GREATER         reduce using rule 37 (const -> EMPTY .)
    LESS            reduce using rule 37 (const -> EMPTY .)
    EQUAL           reduce using rule 37 (const -> EMPTY .)
    NL              reduce using rule 37 (const -> EMPTY .)
    COMMA           reduce using rule 37 (const -> EMPTY .)
    CBRACKET        reduce using rule 37 (const -> EMPTY .)


state 59

    (38) const -> WALL .

    DO              reduce using rule 38 (const -> WALL .)
    PLUS            reduce using rule 38 (const -> WALL .)
    MINUS           reduce using rule 38 (const -> WALL .)
    CARET           reduce using rule 38 (const -> WALL .)
    GREATER         reduce using rule 38 (const -> WALL .)
    LESS            reduce using rule 38 (const -> WALL .)
    EQUAL           reduce using rule 38 (const -> WALL .)
    NL              reduce using rule 38 (const -> WALL .)
    COMMA           reduce using rule 38 (const -> WALL .)
    CBRACKET        reduce using rule 38 (const -> WALL .)


state 60

    (39) const -> BOX .

    DO              reduce using rule 39 (const -> BOX .)
    PLUS            reduce using rule 39 (const -> BOX .)
    MINUS           reduce using rule 39 (const -> BOX .)
    CARET           reduce using rule 39 (const -> BOX .)
    GREATER         reduce using rule 39 (const -> BOX .)
    LESS            reduce using rule 39 (const -> BOX .)
    EQUAL           reduce using rule 39 (const -> BOX .)
    NL              reduce using rule 39 (const -> BOX .)
    COMMA           reduce using rule 39 (const -> BOX .)
    CBRACKET        reduce using rule 39 (const -> BOX .)


state 61

    (40) const -> EXIT .

    DO              reduce using rule 40 (const -> EXIT .)
    PLUS            reduce using rule 40 (const -> EXIT .)
    MINUS           reduce using rule 40 (const -> EXIT .)
    CARET           reduce using rule 40 (const -> EXIT .)
    GREATER         reduce using rule 40 (const -> EXIT .)
    LESS            reduce using rule 40 (const -> EXIT .)
    EQUAL           reduce using rule 40 (const -> EXIT .)
    NL              reduce using rule 40 (const -> EXIT .)
    COMMA           reduce using rule 40 (const -> EXIT .)
    CBRACKET        reduce using rule 40 (const -> EXIT .)


state 62

    (41) const -> DECIMAL .

    DO              reduce using rule 41 (const -> DECIMAL .)
    PLUS            reduce using rule 41 (const -> DECIMAL .)
    MINUS           reduce using rule 41 (const -> DECIMAL .)
    CARET           reduce using rule 41 (const -> DECIMAL .)
    GREATER         reduce using rule 41 (const -> DECIMAL .)
    LESS            reduce using rule 41 (const -> DECIMAL .)
    EQUAL           reduce using rule 41 (const -> DECIMAL .)
    NL              reduce using rule 41 (const -> DECIMAL .)
    COMMA           reduce using rule 41 (const -> DECIMAL .)
    CBRACKET        reduce using rule 41 (const -> DECIMAL .)


state 63

    (42) const -> HEXADECIMAL .

    DO              reduce using rule 42 (const -> HEXADECIMAL .)
    PLUS            reduce using rule 42 (const -> HEXADECIMAL .)
    MINUS           reduce using rule 42 (const -> HEXADECIMAL .)
    CARET           reduce using rule 42 (const -> HEXADECIMAL .)
    GREATER         reduce using rule 42 (const -> HEXADECIMAL .)
    LESS            reduce using rule 42 (const -> HEXADECIMAL .)
    EQUAL           reduce using rule 42 (const -> HEXADECIMAL .)
    NL              reduce using rule 42 (const -> HEXADECIMAL .)
    COMMA           reduce using rule 42 (const -> HEXADECIMAL .)
    CBRACKET        reduce using rule 42 (const -> HEXADECIMAL .)


state 64

    (45) al_expression -> MINUS . expression
    (26) expression -> . variable
    (27) expression -> . const
    (28) expression -> . al_expression
    (29) expression -> . function_call
    (30) expression -> . operator
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT
    (31) const -> . INF
    (32) const -> . MINUS_INF
    (33) const -> . NAN
    (34) const -> . TRUE
    (35) const -> . FALSE
    (36) const -> . UNDEF
    (37) const -> . EMPTY
    (38) const -> . WALL
    (39) const -> . BOX
    (40) const -> . EXIT
    (41) const -> . DECIMAL
    (42) const -> . HEXADECIMAL
    (43) al_expression -> . expression PLUS expression
    (44) al_expression -> . expression MINUS expression
    (45) al_expression -> . MINUS expression
    (46) al_expression -> . SHARP expression
    (47) al_expression -> . expression CARET expression
    (48) al_expression -> . expression GREATER expression
    (49) al_expression -> . expression LESS expression
    (50) al_expression -> . expression EQUAL expression
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST

    IDENT           shift and go to state 51
    INF             shift and go to state 52
    MINUS_INF       shift and go to state 53
    NAN             shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    UNDEF           shift and go to state 57
    EMPTY           shift and go to state 58
    WALL            shift and go to state 59
    BOX             shift and go to state 60
    EXIT            shift and go to state 61
    DECIMAL         shift and go to state 62
    HEXADECIMAL     shift and go to state 63
    MINUS           shift and go to state 64
    SHARP           shift and go to state 65
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24

    expression                     shift and go to state 86
    variable                       shift and go to state 46
    const                          shift and go to state 47
    al_expression                  shift and go to state 48
    function_call                  shift and go to state 49
    operator                       shift and go to state 50

state 65

    (46) al_expression -> SHARP . expression
    (26) expression -> . variable
    (27) expression -> . const
    (28) expression -> . al_expression
    (29) expression -> . function_call
    (30) expression -> . operator
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT
    (31) const -> . INF
    (32) const -> . MINUS_INF
    (33) const -> . NAN
    (34) const -> . TRUE
    (35) const -> . FALSE
    (36) const -> . UNDEF
    (37) const -> . EMPTY
    (38) const -> . WALL
    (39) const -> . BOX
    (40) const -> . EXIT
    (41) const -> . DECIMAL
    (42) const -> . HEXADECIMAL
    (43) al_expression -> . expression PLUS expression
    (44) al_expression -> . expression MINUS expression
    (45) al_expression -> . MINUS expression
    (46) al_expression -> . SHARP expression
    (47) al_expression -> . expression CARET expression
    (48) al_expression -> . expression GREATER expression
    (49) al_expression -> . expression LESS expression
    (50) al_expression -> . expression EQUAL expression
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST

    IDENT           shift and go to state 51
    INF             shift and go to state 52
    MINUS_INF       shift and go to state 53
    NAN             shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    UNDEF           shift and go to state 57
    EMPTY           shift and go to state 58
    WALL            shift and go to state 59
    BOX             shift and go to state 60
    EXIT            shift and go to state 61
    DECIMAL         shift and go to state 62
    HEXADECIMAL     shift and go to state 63
    MINUS           shift and go to state 64
    SHARP           shift and go to state 65
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24

    expression                     shift and go to state 87
    variable                       shift and go to state 46
    const                          shift and go to state 47
    al_expression                  shift and go to state 48
    function_call                  shift and go to state 49
    operator                       shift and go to state 50

state 66

    (62) if -> IF expression . DO stmt_list DONE
    (63) if -> IF expression . DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (64) if -> IF expression . DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> IF expression . DO stmt_list DONE NL ELUND DO stmt_list DONE
    (43) al_expression -> expression . PLUS expression
    (44) al_expression -> expression . MINUS expression
    (47) al_expression -> expression . CARET expression
    (48) al_expression -> expression . GREATER expression
    (49) al_expression -> expression . LESS expression
    (50) al_expression -> expression . EQUAL expression

    DO              shift and go to state 88
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    CARET           shift and go to state 81
    GREATER         shift and go to state 82
    LESS            shift and go to state 83
    EQUAL           shift and go to state 84


state 67

    (52) operator -> FORWARD expression .
    (43) al_expression -> expression . PLUS expression
    (44) al_expression -> expression . MINUS expression
    (47) al_expression -> expression . CARET expression
    (48) al_expression -> expression . GREATER expression
    (49) al_expression -> expression . LESS expression
    (50) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    NL              reduce using rule 52 (operator -> FORWARD expression .)
    DO              reduce using rule 52 (operator -> FORWARD expression .)
    COMMA           reduce using rule 52 (operator -> FORWARD expression .)
    CBRACKET        reduce using rule 52 (operator -> FORWARD expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    CARET           shift and go to state 81
    GREATER         shift and go to state 82
    LESS            shift and go to state 83
    EQUAL           shift and go to state 84

  ! PLUS            [ reduce using rule 52 (operator -> FORWARD expression .) ]
  ! MINUS           [ reduce using rule 52 (operator -> FORWARD expression .) ]
  ! CARET           [ reduce using rule 52 (operator -> FORWARD expression .) ]
  ! GREATER         [ reduce using rule 52 (operator -> FORWARD expression .) ]
  ! LESS            [ reduce using rule 52 (operator -> FORWARD expression .) ]
  ! EQUAL           [ reduce using rule 52 (operator -> FORWARD expression .) ]


state 68

    (53) operator -> BACKWARD expression .
    (43) al_expression -> expression . PLUS expression
    (44) al_expression -> expression . MINUS expression
    (47) al_expression -> expression . CARET expression
    (48) al_expression -> expression . GREATER expression
    (49) al_expression -> expression . LESS expression
    (50) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    NL              reduce using rule 53 (operator -> BACKWARD expression .)
    DO              reduce using rule 53 (operator -> BACKWARD expression .)
    COMMA           reduce using rule 53 (operator -> BACKWARD expression .)
    CBRACKET        reduce using rule 53 (operator -> BACKWARD expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    CARET           shift and go to state 81
    GREATER         shift and go to state 82
    LESS            shift and go to state 83
    EQUAL           shift and go to state 84

  ! PLUS            [ reduce using rule 53 (operator -> BACKWARD expression .) ]
  ! MINUS           [ reduce using rule 53 (operator -> BACKWARD expression .) ]
  ! CARET           [ reduce using rule 53 (operator -> BACKWARD expression .) ]
  ! GREATER         [ reduce using rule 53 (operator -> BACKWARD expression .) ]
  ! LESS            [ reduce using rule 53 (operator -> BACKWARD expression .) ]
  ! EQUAL           [ reduce using rule 53 (operator -> BACKWARD expression .) ]


state 69

    (56) operator -> LOAD expression .
    (43) al_expression -> expression . PLUS expression
    (44) al_expression -> expression . MINUS expression
    (47) al_expression -> expression . CARET expression
    (48) al_expression -> expression . GREATER expression
    (49) al_expression -> expression . LESS expression
    (50) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    NL              reduce using rule 56 (operator -> LOAD expression .)
    DO              reduce using rule 56 (operator -> LOAD expression .)
    COMMA           reduce using rule 56 (operator -> LOAD expression .)
    CBRACKET        reduce using rule 56 (operator -> LOAD expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    CARET           shift and go to state 81
    GREATER         shift and go to state 82
    LESS            shift and go to state 83
    EQUAL           shift and go to state 84

  ! PLUS            [ reduce using rule 56 (operator -> LOAD expression .) ]
  ! MINUS           [ reduce using rule 56 (operator -> LOAD expression .) ]
  ! CARET           [ reduce using rule 56 (operator -> LOAD expression .) ]
  ! GREATER         [ reduce using rule 56 (operator -> LOAD expression .) ]
  ! LESS            [ reduce using rule 56 (operator -> LOAD expression .) ]
  ! EQUAL           [ reduce using rule 56 (operator -> LOAD expression .) ]


state 70

    (57) operator -> DROP expression .
    (43) al_expression -> expression . PLUS expression
    (44) al_expression -> expression . MINUS expression
    (47) al_expression -> expression . CARET expression
    (48) al_expression -> expression . GREATER expression
    (49) al_expression -> expression . LESS expression
    (50) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    NL              reduce using rule 57 (operator -> DROP expression .)
    DO              reduce using rule 57 (operator -> DROP expression .)
    COMMA           reduce using rule 57 (operator -> DROP expression .)
    CBRACKET        reduce using rule 57 (operator -> DROP expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    CARET           shift and go to state 81
    GREATER         shift and go to state 82
    LESS            shift and go to state 83
    EQUAL           shift and go to state 84

  ! PLUS            [ reduce using rule 57 (operator -> DROP expression .) ]
  ! MINUS           [ reduce using rule 57 (operator -> DROP expression .) ]
  ! CARET           [ reduce using rule 57 (operator -> DROP expression .) ]
  ! GREATER         [ reduce using rule 57 (operator -> DROP expression .) ]
  ! LESS            [ reduce using rule 57 (operator -> DROP expression .) ]
  ! EQUAL           [ reduce using rule 57 (operator -> DROP expression .) ]


state 71

    (66) function -> FUNCTION OBRACKET . IDENT CBRACKET DO stmt_list DONE

    IDENT           shift and go to state 89


state 72

    (67) function -> FUNCTION IDENT . OBRACKET IDENT CBRACKET DO NL stmt_list DONE

    OBRACKET        shift and go to state 90


state 73

    (51) function_call -> IDENT OBRACKET . variable CBRACKET
    (24) variable -> IDENT OBRACKET . expression CBRACKET
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT
    (26) expression -> . variable
    (27) expression -> . const
    (28) expression -> . al_expression
    (29) expression -> . function_call
    (30) expression -> . operator
    (31) const -> . INF
    (32) const -> . MINUS_INF
    (33) const -> . NAN
    (34) const -> . TRUE
    (35) const -> . FALSE
    (36) const -> . UNDEF
    (37) const -> . EMPTY
    (38) const -> . WALL
    (39) const -> . BOX
    (40) const -> . EXIT
    (41) const -> . DECIMAL
    (42) const -> . HEXADECIMAL
    (43) al_expression -> . expression PLUS expression
    (44) al_expression -> . expression MINUS expression
    (45) al_expression -> . MINUS expression
    (46) al_expression -> . SHARP expression
    (47) al_expression -> . expression CARET expression
    (48) al_expression -> . expression GREATER expression
    (49) al_expression -> . expression LESS expression
    (50) al_expression -> . expression EQUAL expression
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST

    IDENT           shift and go to state 51
    INF             shift and go to state 52
    MINUS_INF       shift and go to state 53
    NAN             shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    UNDEF           shift and go to state 57
    EMPTY           shift and go to state 58
    WALL            shift and go to state 59
    BOX             shift and go to state 60
    EXIT            shift and go to state 61
    DECIMAL         shift and go to state 62
    HEXADECIMAL     shift and go to state 63
    MINUS           shift and go to state 64
    SHARP           shift and go to state 65
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24

    variable                       shift and go to state 91
    expression                     shift and go to state 92
    const                          shift and go to state 47
    al_expression                  shift and go to state 48
    function_call                  shift and go to state 49
    operator                       shift and go to state 50

state 74

    (19) vars_list -> IDENT COMMA . vars_list
    (19) vars_list -> . IDENT COMMA vars_list
    (20) vars_list -> . assignment COMMA vars_list
    (21) vars_list -> . IDENT
    (22) vars_list -> . assignment
    (23) assignment -> . variable ASSIGN expression
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT

    IDENT           shift and go to state 42

    vars_list                      shift and go to state 93
    assignment                     shift and go to state 43
    variable                       shift and go to state 14

state 75

    (24) variable -> IDENT OBRACKET . expression CBRACKET
    (26) expression -> . variable
    (27) expression -> . const
    (28) expression -> . al_expression
    (29) expression -> . function_call
    (30) expression -> . operator
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT
    (31) const -> . INF
    (32) const -> . MINUS_INF
    (33) const -> . NAN
    (34) const -> . TRUE
    (35) const -> . FALSE
    (36) const -> . UNDEF
    (37) const -> . EMPTY
    (38) const -> . WALL
    (39) const -> . BOX
    (40) const -> . EXIT
    (41) const -> . DECIMAL
    (42) const -> . HEXADECIMAL
    (43) al_expression -> . expression PLUS expression
    (44) al_expression -> . expression MINUS expression
    (45) al_expression -> . MINUS expression
    (46) al_expression -> . SHARP expression
    (47) al_expression -> . expression CARET expression
    (48) al_expression -> . expression GREATER expression
    (49) al_expression -> . expression LESS expression
    (50) al_expression -> . expression EQUAL expression
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST

    IDENT           shift and go to state 51
    INF             shift and go to state 52
    MINUS_INF       shift and go to state 53
    NAN             shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    UNDEF           shift and go to state 57
    EMPTY           shift and go to state 58
    WALL            shift and go to state 59
    BOX             shift and go to state 60
    EXIT            shift and go to state 61
    DECIMAL         shift and go to state 62
    HEXADECIMAL     shift and go to state 63
    MINUS           shift and go to state 64
    SHARP           shift and go to state 65
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24

    expression                     shift and go to state 92
    variable                       shift and go to state 46
    const                          shift and go to state 47
    al_expression                  shift and go to state 48
    function_call                  shift and go to state 49
    operator                       shift and go to state 50

state 76

    (20) vars_list -> assignment COMMA . vars_list
    (19) vars_list -> . IDENT COMMA vars_list
    (20) vars_list -> . assignment COMMA vars_list
    (21) vars_list -> . IDENT
    (22) vars_list -> . assignment
    (23) assignment -> . variable ASSIGN expression
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT

    IDENT           shift and go to state 42

    assignment                     shift and go to state 43
    vars_list                      shift and go to state 94
    variable                       shift and go to state 14

state 77

    (23) assignment -> variable ASSIGN expression .
    (43) al_expression -> expression . PLUS expression
    (44) al_expression -> expression . MINUS expression
    (47) al_expression -> expression . CARET expression
    (48) al_expression -> expression . GREATER expression
    (49) al_expression -> expression . LESS expression
    (50) al_expression -> expression . EQUAL expression

    NL              reduce using rule 23 (assignment -> variable ASSIGN expression .)
    COMMA           reduce using rule 23 (assignment -> variable ASSIGN expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    CARET           shift and go to state 81
    GREATER         shift and go to state 82
    LESS            shift and go to state 83
    EQUAL           shift and go to state 84


state 78

    (60) while -> WHILE expression DO . stmt_list DONE
    (61) while -> WHILE expression DO . stmt_list FINISH stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (60) while -> . WHILE expression DO stmt_list DONE
    (61) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (62) if -> . IF expression DO stmt_list DONE
    (63) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (64) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST
    (66) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (67) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    FUNCTION        shift and go to state 25
    IDENT           shift and go to state 26
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 27
    CELL            shift and go to state 28
    BOOL            shift and go to state 29
    VAR             shift and go to state 30

    stmt_list                      shift and go to state 95
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 79

    (43) al_expression -> expression PLUS . expression
    (26) expression -> . variable
    (27) expression -> . const
    (28) expression -> . al_expression
    (29) expression -> . function_call
    (30) expression -> . operator
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT
    (31) const -> . INF
    (32) const -> . MINUS_INF
    (33) const -> . NAN
    (34) const -> . TRUE
    (35) const -> . FALSE
    (36) const -> . UNDEF
    (37) const -> . EMPTY
    (38) const -> . WALL
    (39) const -> . BOX
    (40) const -> . EXIT
    (41) const -> . DECIMAL
    (42) const -> . HEXADECIMAL
    (43) al_expression -> . expression PLUS expression
    (44) al_expression -> . expression MINUS expression
    (45) al_expression -> . MINUS expression
    (46) al_expression -> . SHARP expression
    (47) al_expression -> . expression CARET expression
    (48) al_expression -> . expression GREATER expression
    (49) al_expression -> . expression LESS expression
    (50) al_expression -> . expression EQUAL expression
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST

    IDENT           shift and go to state 51
    INF             shift and go to state 52
    MINUS_INF       shift and go to state 53
    NAN             shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    UNDEF           shift and go to state 57
    EMPTY           shift and go to state 58
    WALL            shift and go to state 59
    BOX             shift and go to state 60
    EXIT            shift and go to state 61
    DECIMAL         shift and go to state 62
    HEXADECIMAL     shift and go to state 63
    MINUS           shift and go to state 64
    SHARP           shift and go to state 65
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24

    expression                     shift and go to state 96
    variable                       shift and go to state 46
    const                          shift and go to state 47
    al_expression                  shift and go to state 48
    function_call                  shift and go to state 49
    operator                       shift and go to state 50

state 80

    (44) al_expression -> expression MINUS . expression
    (26) expression -> . variable
    (27) expression -> . const
    (28) expression -> . al_expression
    (29) expression -> . function_call
    (30) expression -> . operator
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT
    (31) const -> . INF
    (32) const -> . MINUS_INF
    (33) const -> . NAN
    (34) const -> . TRUE
    (35) const -> . FALSE
    (36) const -> . UNDEF
    (37) const -> . EMPTY
    (38) const -> . WALL
    (39) const -> . BOX
    (40) const -> . EXIT
    (41) const -> . DECIMAL
    (42) const -> . HEXADECIMAL
    (43) al_expression -> . expression PLUS expression
    (44) al_expression -> . expression MINUS expression
    (45) al_expression -> . MINUS expression
    (46) al_expression -> . SHARP expression
    (47) al_expression -> . expression CARET expression
    (48) al_expression -> . expression GREATER expression
    (49) al_expression -> . expression LESS expression
    (50) al_expression -> . expression EQUAL expression
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST

    IDENT           shift and go to state 51
    INF             shift and go to state 52
    MINUS_INF       shift and go to state 53
    NAN             shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    UNDEF           shift and go to state 57
    EMPTY           shift and go to state 58
    WALL            shift and go to state 59
    BOX             shift and go to state 60
    EXIT            shift and go to state 61
    DECIMAL         shift and go to state 62
    HEXADECIMAL     shift and go to state 63
    MINUS           shift and go to state 64
    SHARP           shift and go to state 65
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24

    expression                     shift and go to state 97
    variable                       shift and go to state 46
    const                          shift and go to state 47
    al_expression                  shift and go to state 48
    function_call                  shift and go to state 49
    operator                       shift and go to state 50

state 81

    (47) al_expression -> expression CARET . expression
    (26) expression -> . variable
    (27) expression -> . const
    (28) expression -> . al_expression
    (29) expression -> . function_call
    (30) expression -> . operator
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT
    (31) const -> . INF
    (32) const -> . MINUS_INF
    (33) const -> . NAN
    (34) const -> . TRUE
    (35) const -> . FALSE
    (36) const -> . UNDEF
    (37) const -> . EMPTY
    (38) const -> . WALL
    (39) const -> . BOX
    (40) const -> . EXIT
    (41) const -> . DECIMAL
    (42) const -> . HEXADECIMAL
    (43) al_expression -> . expression PLUS expression
    (44) al_expression -> . expression MINUS expression
    (45) al_expression -> . MINUS expression
    (46) al_expression -> . SHARP expression
    (47) al_expression -> . expression CARET expression
    (48) al_expression -> . expression GREATER expression
    (49) al_expression -> . expression LESS expression
    (50) al_expression -> . expression EQUAL expression
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST

    IDENT           shift and go to state 51
    INF             shift and go to state 52
    MINUS_INF       shift and go to state 53
    NAN             shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    UNDEF           shift and go to state 57
    EMPTY           shift and go to state 58
    WALL            shift and go to state 59
    BOX             shift and go to state 60
    EXIT            shift and go to state 61
    DECIMAL         shift and go to state 62
    HEXADECIMAL     shift and go to state 63
    MINUS           shift and go to state 64
    SHARP           shift and go to state 65
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24

    expression                     shift and go to state 98
    variable                       shift and go to state 46
    const                          shift and go to state 47
    al_expression                  shift and go to state 48
    function_call                  shift and go to state 49
    operator                       shift and go to state 50

state 82

    (48) al_expression -> expression GREATER . expression
    (26) expression -> . variable
    (27) expression -> . const
    (28) expression -> . al_expression
    (29) expression -> . function_call
    (30) expression -> . operator
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT
    (31) const -> . INF
    (32) const -> . MINUS_INF
    (33) const -> . NAN
    (34) const -> . TRUE
    (35) const -> . FALSE
    (36) const -> . UNDEF
    (37) const -> . EMPTY
    (38) const -> . WALL
    (39) const -> . BOX
    (40) const -> . EXIT
    (41) const -> . DECIMAL
    (42) const -> . HEXADECIMAL
    (43) al_expression -> . expression PLUS expression
    (44) al_expression -> . expression MINUS expression
    (45) al_expression -> . MINUS expression
    (46) al_expression -> . SHARP expression
    (47) al_expression -> . expression CARET expression
    (48) al_expression -> . expression GREATER expression
    (49) al_expression -> . expression LESS expression
    (50) al_expression -> . expression EQUAL expression
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST

    IDENT           shift and go to state 51
    INF             shift and go to state 52
    MINUS_INF       shift and go to state 53
    NAN             shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    UNDEF           shift and go to state 57
    EMPTY           shift and go to state 58
    WALL            shift and go to state 59
    BOX             shift and go to state 60
    EXIT            shift and go to state 61
    DECIMAL         shift and go to state 62
    HEXADECIMAL     shift and go to state 63
    MINUS           shift and go to state 64
    SHARP           shift and go to state 65
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24

    expression                     shift and go to state 99
    variable                       shift and go to state 46
    const                          shift and go to state 47
    al_expression                  shift and go to state 48
    function_call                  shift and go to state 49
    operator                       shift and go to state 50

state 83

    (49) al_expression -> expression LESS . expression
    (26) expression -> . variable
    (27) expression -> . const
    (28) expression -> . al_expression
    (29) expression -> . function_call
    (30) expression -> . operator
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT
    (31) const -> . INF
    (32) const -> . MINUS_INF
    (33) const -> . NAN
    (34) const -> . TRUE
    (35) const -> . FALSE
    (36) const -> . UNDEF
    (37) const -> . EMPTY
    (38) const -> . WALL
    (39) const -> . BOX
    (40) const -> . EXIT
    (41) const -> . DECIMAL
    (42) const -> . HEXADECIMAL
    (43) al_expression -> . expression PLUS expression
    (44) al_expression -> . expression MINUS expression
    (45) al_expression -> . MINUS expression
    (46) al_expression -> . SHARP expression
    (47) al_expression -> . expression CARET expression
    (48) al_expression -> . expression GREATER expression
    (49) al_expression -> . expression LESS expression
    (50) al_expression -> . expression EQUAL expression
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST

    IDENT           shift and go to state 51
    INF             shift and go to state 52
    MINUS_INF       shift and go to state 53
    NAN             shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    UNDEF           shift and go to state 57
    EMPTY           shift and go to state 58
    WALL            shift and go to state 59
    BOX             shift and go to state 60
    EXIT            shift and go to state 61
    DECIMAL         shift and go to state 62
    HEXADECIMAL     shift and go to state 63
    MINUS           shift and go to state 64
    SHARP           shift and go to state 65
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24

    expression                     shift and go to state 100
    variable                       shift and go to state 46
    const                          shift and go to state 47
    al_expression                  shift and go to state 48
    function_call                  shift and go to state 49
    operator                       shift and go to state 50

state 84

    (50) al_expression -> expression EQUAL . expression
    (26) expression -> . variable
    (27) expression -> . const
    (28) expression -> . al_expression
    (29) expression -> . function_call
    (30) expression -> . operator
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT
    (31) const -> . INF
    (32) const -> . MINUS_INF
    (33) const -> . NAN
    (34) const -> . TRUE
    (35) const -> . FALSE
    (36) const -> . UNDEF
    (37) const -> . EMPTY
    (38) const -> . WALL
    (39) const -> . BOX
    (40) const -> . EXIT
    (41) const -> . DECIMAL
    (42) const -> . HEXADECIMAL
    (43) al_expression -> . expression PLUS expression
    (44) al_expression -> . expression MINUS expression
    (45) al_expression -> . MINUS expression
    (46) al_expression -> . SHARP expression
    (47) al_expression -> . expression CARET expression
    (48) al_expression -> . expression GREATER expression
    (49) al_expression -> . expression LESS expression
    (50) al_expression -> . expression EQUAL expression
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST

    IDENT           shift and go to state 51
    INF             shift and go to state 52
    MINUS_INF       shift and go to state 53
    NAN             shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    UNDEF           shift and go to state 57
    EMPTY           shift and go to state 58
    WALL            shift and go to state 59
    BOX             shift and go to state 60
    EXIT            shift and go to state 61
    DECIMAL         shift and go to state 62
    HEXADECIMAL     shift and go to state 63
    MINUS           shift and go to state 64
    SHARP           shift and go to state 65
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24

    expression                     shift and go to state 101
    variable                       shift and go to state 46
    const                          shift and go to state 47
    al_expression                  shift and go to state 48
    function_call                  shift and go to state 49
    operator                       shift and go to state 50

state 85

    (24) variable -> IDENT OBRACKET . expression CBRACKET
    (51) function_call -> IDENT OBRACKET . variable CBRACKET
    (26) expression -> . variable
    (27) expression -> . const
    (28) expression -> . al_expression
    (29) expression -> . function_call
    (30) expression -> . operator
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT
    (31) const -> . INF
    (32) const -> . MINUS_INF
    (33) const -> . NAN
    (34) const -> . TRUE
    (35) const -> . FALSE
    (36) const -> . UNDEF
    (37) const -> . EMPTY
    (38) const -> . WALL
    (39) const -> . BOX
    (40) const -> . EXIT
    (41) const -> . DECIMAL
    (42) const -> . HEXADECIMAL
    (43) al_expression -> . expression PLUS expression
    (44) al_expression -> . expression MINUS expression
    (45) al_expression -> . MINUS expression
    (46) al_expression -> . SHARP expression
    (47) al_expression -> . expression CARET expression
    (48) al_expression -> . expression GREATER expression
    (49) al_expression -> . expression LESS expression
    (50) al_expression -> . expression EQUAL expression
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST

    IDENT           shift and go to state 51
    INF             shift and go to state 52
    MINUS_INF       shift and go to state 53
    NAN             shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    UNDEF           shift and go to state 57
    EMPTY           shift and go to state 58
    WALL            shift and go to state 59
    BOX             shift and go to state 60
    EXIT            shift and go to state 61
    DECIMAL         shift and go to state 62
    HEXADECIMAL     shift and go to state 63
    MINUS           shift and go to state 64
    SHARP           shift and go to state 65
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24

    expression                     shift and go to state 92
    variable                       shift and go to state 91
    const                          shift and go to state 47
    al_expression                  shift and go to state 48
    function_call                  shift and go to state 49
    operator                       shift and go to state 50

state 86

    (45) al_expression -> MINUS expression .
    (43) al_expression -> expression . PLUS expression
    (44) al_expression -> expression . MINUS expression
    (47) al_expression -> expression . CARET expression
    (48) al_expression -> expression . GREATER expression
    (49) al_expression -> expression . LESS expression
    (50) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 45 (al_expression -> MINUS expression .)
    NL              reduce using rule 45 (al_expression -> MINUS expression .)
    COMMA           reduce using rule 45 (al_expression -> MINUS expression .)
    CBRACKET        reduce using rule 45 (al_expression -> MINUS expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    CARET           shift and go to state 81
    GREATER         shift and go to state 82
    LESS            shift and go to state 83
    EQUAL           shift and go to state 84

  ! PLUS            [ reduce using rule 45 (al_expression -> MINUS expression .) ]
  ! MINUS           [ reduce using rule 45 (al_expression -> MINUS expression .) ]
  ! CARET           [ reduce using rule 45 (al_expression -> MINUS expression .) ]
  ! GREATER         [ reduce using rule 45 (al_expression -> MINUS expression .) ]
  ! LESS            [ reduce using rule 45 (al_expression -> MINUS expression .) ]
  ! EQUAL           [ reduce using rule 45 (al_expression -> MINUS expression .) ]


state 87

    (46) al_expression -> SHARP expression .
    (43) al_expression -> expression . PLUS expression
    (44) al_expression -> expression . MINUS expression
    (47) al_expression -> expression . CARET expression
    (48) al_expression -> expression . GREATER expression
    (49) al_expression -> expression . LESS expression
    (50) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 46 (al_expression -> SHARP expression .)
    NL              reduce using rule 46 (al_expression -> SHARP expression .)
    COMMA           reduce using rule 46 (al_expression -> SHARP expression .)
    CBRACKET        reduce using rule 46 (al_expression -> SHARP expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    CARET           shift and go to state 81
    GREATER         shift and go to state 82
    LESS            shift and go to state 83
    EQUAL           shift and go to state 84

  ! PLUS            [ reduce using rule 46 (al_expression -> SHARP expression .) ]
  ! MINUS           [ reduce using rule 46 (al_expression -> SHARP expression .) ]
  ! CARET           [ reduce using rule 46 (al_expression -> SHARP expression .) ]
  ! GREATER         [ reduce using rule 46 (al_expression -> SHARP expression .) ]
  ! LESS            [ reduce using rule 46 (al_expression -> SHARP expression .) ]
  ! EQUAL           [ reduce using rule 46 (al_expression -> SHARP expression .) ]


state 88

    (62) if -> IF expression DO . stmt_list DONE
    (63) if -> IF expression DO . stmt_list DONE NL ELDEF DO stmt_list DONE
    (64) if -> IF expression DO . stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> IF expression DO . stmt_list DONE NL ELUND DO stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (60) while -> . WHILE expression DO stmt_list DONE
    (61) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (62) if -> . IF expression DO stmt_list DONE
    (63) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (64) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST
    (66) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (67) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    FUNCTION        shift and go to state 25
    IDENT           shift and go to state 26
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 27
    CELL            shift and go to state 28
    BOOL            shift and go to state 29
    VAR             shift and go to state 30

    stmt_list                      shift and go to state 102
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 89

    (66) function -> FUNCTION OBRACKET IDENT . CBRACKET DO stmt_list DONE

    CBRACKET        shift and go to state 103


state 90

    (67) function -> FUNCTION IDENT OBRACKET . IDENT CBRACKET DO NL stmt_list DONE

    IDENT           shift and go to state 104


state 91

    (51) function_call -> IDENT OBRACKET variable . CBRACKET
    (26) expression -> variable .

  ! shift/reduce conflict for CBRACKET resolved as shift
    CBRACKET        shift and go to state 105
    PLUS            reduce using rule 26 (expression -> variable .)
    MINUS           reduce using rule 26 (expression -> variable .)
    CARET           reduce using rule 26 (expression -> variable .)
    GREATER         reduce using rule 26 (expression -> variable .)
    LESS            reduce using rule 26 (expression -> variable .)
    EQUAL           reduce using rule 26 (expression -> variable .)

  ! CBRACKET        [ reduce using rule 26 (expression -> variable .) ]


state 92

    (24) variable -> IDENT OBRACKET expression . CBRACKET
    (43) al_expression -> expression . PLUS expression
    (44) al_expression -> expression . MINUS expression
    (47) al_expression -> expression . CARET expression
    (48) al_expression -> expression . GREATER expression
    (49) al_expression -> expression . LESS expression
    (50) al_expression -> expression . EQUAL expression

    CBRACKET        shift and go to state 106
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    CARET           shift and go to state 81
    GREATER         shift and go to state 82
    LESS            shift and go to state 83
    EQUAL           shift and go to state 84


state 93

    (19) vars_list -> IDENT COMMA vars_list .

    NL              reduce using rule 19 (vars_list -> IDENT COMMA vars_list .)


state 94

    (20) vars_list -> assignment COMMA vars_list .

    NL              reduce using rule 20 (vars_list -> assignment COMMA vars_list .)


state 95

    (60) while -> WHILE expression DO stmt_list . DONE
    (61) while -> WHILE expression DO stmt_list . FINISH stmt_list DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (60) while -> . WHILE expression DO stmt_list DONE
    (61) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (62) if -> . IF expression DO stmt_list DONE
    (63) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (64) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST
    (66) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (67) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT

    DONE            shift and go to state 107
    FINISH          shift and go to state 108
    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    FUNCTION        shift and go to state 25
    IDENT           shift and go to state 26
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 27
    CELL            shift and go to state 28
    BOOL            shift and go to state 29
    VAR             shift and go to state 30

    statement                      shift and go to state 31
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 96

    (43) al_expression -> expression PLUS expression .
    (43) al_expression -> expression . PLUS expression
    (44) al_expression -> expression . MINUS expression
    (47) al_expression -> expression . CARET expression
    (48) al_expression -> expression . GREATER expression
    (49) al_expression -> expression . LESS expression
    (50) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 43 (al_expression -> expression PLUS expression .)
    NL              reduce using rule 43 (al_expression -> expression PLUS expression .)
    COMMA           reduce using rule 43 (al_expression -> expression PLUS expression .)
    CBRACKET        reduce using rule 43 (al_expression -> expression PLUS expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    CARET           shift and go to state 81
    GREATER         shift and go to state 82
    LESS            shift and go to state 83
    EQUAL           shift and go to state 84

  ! PLUS            [ reduce using rule 43 (al_expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 43 (al_expression -> expression PLUS expression .) ]
  ! CARET           [ reduce using rule 43 (al_expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 43 (al_expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 43 (al_expression -> expression PLUS expression .) ]
  ! EQUAL           [ reduce using rule 43 (al_expression -> expression PLUS expression .) ]


state 97

    (44) al_expression -> expression MINUS expression .
    (43) al_expression -> expression . PLUS expression
    (44) al_expression -> expression . MINUS expression
    (47) al_expression -> expression . CARET expression
    (48) al_expression -> expression . GREATER expression
    (49) al_expression -> expression . LESS expression
    (50) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 44 (al_expression -> expression MINUS expression .)
    NL              reduce using rule 44 (al_expression -> expression MINUS expression .)
    COMMA           reduce using rule 44 (al_expression -> expression MINUS expression .)
    CBRACKET        reduce using rule 44 (al_expression -> expression MINUS expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    CARET           shift and go to state 81
    GREATER         shift and go to state 82
    LESS            shift and go to state 83
    EQUAL           shift and go to state 84

  ! PLUS            [ reduce using rule 44 (al_expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 44 (al_expression -> expression MINUS expression .) ]
  ! CARET           [ reduce using rule 44 (al_expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 44 (al_expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 44 (al_expression -> expression MINUS expression .) ]
  ! EQUAL           [ reduce using rule 44 (al_expression -> expression MINUS expression .) ]


state 98

    (47) al_expression -> expression CARET expression .
    (43) al_expression -> expression . PLUS expression
    (44) al_expression -> expression . MINUS expression
    (47) al_expression -> expression . CARET expression
    (48) al_expression -> expression . GREATER expression
    (49) al_expression -> expression . LESS expression
    (50) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 47 (al_expression -> expression CARET expression .)
    NL              reduce using rule 47 (al_expression -> expression CARET expression .)
    COMMA           reduce using rule 47 (al_expression -> expression CARET expression .)
    CBRACKET        reduce using rule 47 (al_expression -> expression CARET expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    CARET           shift and go to state 81
    GREATER         shift and go to state 82
    LESS            shift and go to state 83
    EQUAL           shift and go to state 84

  ! PLUS            [ reduce using rule 47 (al_expression -> expression CARET expression .) ]
  ! MINUS           [ reduce using rule 47 (al_expression -> expression CARET expression .) ]
  ! CARET           [ reduce using rule 47 (al_expression -> expression CARET expression .) ]
  ! GREATER         [ reduce using rule 47 (al_expression -> expression CARET expression .) ]
  ! LESS            [ reduce using rule 47 (al_expression -> expression CARET expression .) ]
  ! EQUAL           [ reduce using rule 47 (al_expression -> expression CARET expression .) ]


state 99

    (48) al_expression -> expression GREATER expression .
    (43) al_expression -> expression . PLUS expression
    (44) al_expression -> expression . MINUS expression
    (47) al_expression -> expression . CARET expression
    (48) al_expression -> expression . GREATER expression
    (49) al_expression -> expression . LESS expression
    (50) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 48 (al_expression -> expression GREATER expression .)
    NL              reduce using rule 48 (al_expression -> expression GREATER expression .)
    COMMA           reduce using rule 48 (al_expression -> expression GREATER expression .)
    CBRACKET        reduce using rule 48 (al_expression -> expression GREATER expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    CARET           shift and go to state 81
    GREATER         shift and go to state 82
    LESS            shift and go to state 83
    EQUAL           shift and go to state 84

  ! PLUS            [ reduce using rule 48 (al_expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 48 (al_expression -> expression GREATER expression .) ]
  ! CARET           [ reduce using rule 48 (al_expression -> expression GREATER expression .) ]
  ! GREATER         [ reduce using rule 48 (al_expression -> expression GREATER expression .) ]
  ! LESS            [ reduce using rule 48 (al_expression -> expression GREATER expression .) ]
  ! EQUAL           [ reduce using rule 48 (al_expression -> expression GREATER expression .) ]


state 100

    (49) al_expression -> expression LESS expression .
    (43) al_expression -> expression . PLUS expression
    (44) al_expression -> expression . MINUS expression
    (47) al_expression -> expression . CARET expression
    (48) al_expression -> expression . GREATER expression
    (49) al_expression -> expression . LESS expression
    (50) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 49 (al_expression -> expression LESS expression .)
    NL              reduce using rule 49 (al_expression -> expression LESS expression .)
    COMMA           reduce using rule 49 (al_expression -> expression LESS expression .)
    CBRACKET        reduce using rule 49 (al_expression -> expression LESS expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    CARET           shift and go to state 81
    GREATER         shift and go to state 82
    LESS            shift and go to state 83
    EQUAL           shift and go to state 84

  ! PLUS            [ reduce using rule 49 (al_expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 49 (al_expression -> expression LESS expression .) ]
  ! CARET           [ reduce using rule 49 (al_expression -> expression LESS expression .) ]
  ! GREATER         [ reduce using rule 49 (al_expression -> expression LESS expression .) ]
  ! LESS            [ reduce using rule 49 (al_expression -> expression LESS expression .) ]
  ! EQUAL           [ reduce using rule 49 (al_expression -> expression LESS expression .) ]


state 101

    (50) al_expression -> expression EQUAL expression .
    (43) al_expression -> expression . PLUS expression
    (44) al_expression -> expression . MINUS expression
    (47) al_expression -> expression . CARET expression
    (48) al_expression -> expression . GREATER expression
    (49) al_expression -> expression . LESS expression
    (50) al_expression -> expression . EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    DO              reduce using rule 50 (al_expression -> expression EQUAL expression .)
    NL              reduce using rule 50 (al_expression -> expression EQUAL expression .)
    COMMA           reduce using rule 50 (al_expression -> expression EQUAL expression .)
    CBRACKET        reduce using rule 50 (al_expression -> expression EQUAL expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    CARET           shift and go to state 81
    GREATER         shift and go to state 82
    LESS            shift and go to state 83
    EQUAL           shift and go to state 84

  ! PLUS            [ reduce using rule 50 (al_expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 50 (al_expression -> expression EQUAL expression .) ]
  ! CARET           [ reduce using rule 50 (al_expression -> expression EQUAL expression .) ]
  ! GREATER         [ reduce using rule 50 (al_expression -> expression EQUAL expression .) ]
  ! LESS            [ reduce using rule 50 (al_expression -> expression EQUAL expression .) ]
  ! EQUAL           [ reduce using rule 50 (al_expression -> expression EQUAL expression .) ]


state 102

    (62) if -> IF expression DO stmt_list . DONE
    (63) if -> IF expression DO stmt_list . DONE NL ELDEF DO stmt_list DONE
    (64) if -> IF expression DO stmt_list . DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> IF expression DO stmt_list . DONE NL ELUND DO stmt_list DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (60) while -> . WHILE expression DO stmt_list DONE
    (61) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (62) if -> . IF expression DO stmt_list DONE
    (63) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (64) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST
    (66) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (67) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT

    DONE            shift and go to state 109
    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    FUNCTION        shift and go to state 25
    IDENT           shift and go to state 26
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 27
    CELL            shift and go to state 28
    BOOL            shift and go to state 29
    VAR             shift and go to state 30

    statement                      shift and go to state 31
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 103

    (66) function -> FUNCTION OBRACKET IDENT CBRACKET . DO stmt_list DONE

    DO              shift and go to state 110


state 104

    (67) function -> FUNCTION IDENT OBRACKET IDENT . CBRACKET DO NL stmt_list DONE

    CBRACKET        shift and go to state 111


state 105

    (51) function_call -> IDENT OBRACKET variable CBRACKET .

    NL              reduce using rule 51 (function_call -> IDENT OBRACKET variable CBRACKET .)
    DO              reduce using rule 51 (function_call -> IDENT OBRACKET variable CBRACKET .)
    PLUS            reduce using rule 51 (function_call -> IDENT OBRACKET variable CBRACKET .)
    MINUS           reduce using rule 51 (function_call -> IDENT OBRACKET variable CBRACKET .)
    CARET           reduce using rule 51 (function_call -> IDENT OBRACKET variable CBRACKET .)
    GREATER         reduce using rule 51 (function_call -> IDENT OBRACKET variable CBRACKET .)
    LESS            reduce using rule 51 (function_call -> IDENT OBRACKET variable CBRACKET .)
    EQUAL           reduce using rule 51 (function_call -> IDENT OBRACKET variable CBRACKET .)
    COMMA           reduce using rule 51 (function_call -> IDENT OBRACKET variable CBRACKET .)
    CBRACKET        reduce using rule 51 (function_call -> IDENT OBRACKET variable CBRACKET .)


state 106

    (24) variable -> IDENT OBRACKET expression CBRACKET .

    ASSIGN          reduce using rule 24 (variable -> IDENT OBRACKET expression CBRACKET .)
    DO              reduce using rule 24 (variable -> IDENT OBRACKET expression CBRACKET .)
    PLUS            reduce using rule 24 (variable -> IDENT OBRACKET expression CBRACKET .)
    MINUS           reduce using rule 24 (variable -> IDENT OBRACKET expression CBRACKET .)
    CARET           reduce using rule 24 (variable -> IDENT OBRACKET expression CBRACKET .)
    GREATER         reduce using rule 24 (variable -> IDENT OBRACKET expression CBRACKET .)
    LESS            reduce using rule 24 (variable -> IDENT OBRACKET expression CBRACKET .)
    EQUAL           reduce using rule 24 (variable -> IDENT OBRACKET expression CBRACKET .)
    NL              reduce using rule 24 (variable -> IDENT OBRACKET expression CBRACKET .)
    COMMA           reduce using rule 24 (variable -> IDENT OBRACKET expression CBRACKET .)
    CBRACKET        reduce using rule 24 (variable -> IDENT OBRACKET expression CBRACKET .)


state 107

    (60) while -> WHILE expression DO stmt_list DONE .

    NL              reduce using rule 60 (while -> WHILE expression DO stmt_list DONE .)


state 108

    (61) while -> WHILE expression DO stmt_list FINISH . stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (60) while -> . WHILE expression DO stmt_list DONE
    (61) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (62) if -> . IF expression DO stmt_list DONE
    (63) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (64) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST
    (66) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (67) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    FUNCTION        shift and go to state 25
    IDENT           shift and go to state 26
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 27
    CELL            shift and go to state 28
    BOOL            shift and go to state 29
    VAR             shift and go to state 30

    stmt_list                      shift and go to state 112
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 109

    (62) if -> IF expression DO stmt_list DONE .
    (63) if -> IF expression DO stmt_list DONE . NL ELDEF DO stmt_list DONE
    (64) if -> IF expression DO stmt_list DONE . NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> IF expression DO stmt_list DONE . NL ELUND DO stmt_list DONE

  ! shift/reduce conflict for NL resolved as shift
    NL              shift and go to state 113

  ! NL              [ reduce using rule 62 (if -> IF expression DO stmt_list DONE .) ]


state 110

    (66) function -> FUNCTION OBRACKET IDENT CBRACKET DO . stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (60) while -> . WHILE expression DO stmt_list DONE
    (61) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (62) if -> . IF expression DO stmt_list DONE
    (63) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (64) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST
    (66) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (67) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    FUNCTION        shift and go to state 25
    IDENT           shift and go to state 26
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 27
    CELL            shift and go to state 28
    BOOL            shift and go to state 29
    VAR             shift and go to state 30

    stmt_list                      shift and go to state 114
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 111

    (67) function -> FUNCTION IDENT OBRACKET IDENT CBRACKET . DO NL stmt_list DONE

    DO              shift and go to state 115


state 112

    (61) while -> WHILE expression DO stmt_list FINISH stmt_list . DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (60) while -> . WHILE expression DO stmt_list DONE
    (61) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (62) if -> . IF expression DO stmt_list DONE
    (63) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (64) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST
    (66) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (67) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT

    DONE            shift and go to state 116
    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    FUNCTION        shift and go to state 25
    IDENT           shift and go to state 26
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 27
    CELL            shift and go to state 28
    BOOL            shift and go to state 29
    VAR             shift and go to state 30

    statement                      shift and go to state 31
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 113

    (63) if -> IF expression DO stmt_list DONE NL . ELDEF DO stmt_list DONE
    (64) if -> IF expression DO stmt_list DONE NL . ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> IF expression DO stmt_list DONE NL . ELUND DO stmt_list DONE

    ELDEF           shift and go to state 117
    ELUND           shift and go to state 118


state 114

    (66) function -> FUNCTION OBRACKET IDENT CBRACKET DO stmt_list . DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (60) while -> . WHILE expression DO stmt_list DONE
    (61) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (62) if -> . IF expression DO stmt_list DONE
    (63) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (64) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST
    (66) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (67) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT

    DONE            shift and go to state 119
    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    FUNCTION        shift and go to state 25
    IDENT           shift and go to state 26
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 27
    CELL            shift and go to state 28
    BOOL            shift and go to state 29
    VAR             shift and go to state 30

    statement                      shift and go to state 31
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 115

    (67) function -> FUNCTION IDENT OBRACKET IDENT CBRACKET DO . NL stmt_list DONE

    NL              shift and go to state 120


state 116

    (61) while -> WHILE expression DO stmt_list FINISH stmt_list DONE .

    NL              reduce using rule 61 (while -> WHILE expression DO stmt_list FINISH stmt_list DONE .)


state 117

    (63) if -> IF expression DO stmt_list DONE NL ELDEF . DO stmt_list DONE
    (64) if -> IF expression DO stmt_list DONE NL ELDEF . DO stmt_list DONE NL ELUND DO stmt_list DONE

    DO              shift and go to state 121


state 118

    (65) if -> IF expression DO stmt_list DONE NL ELUND . DO stmt_list DONE

    DO              shift and go to state 122


state 119

    (66) function -> FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE .

    NL              reduce using rule 66 (function -> FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE .)


state 120

    (67) function -> FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL . stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (60) while -> . WHILE expression DO stmt_list DONE
    (61) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (62) if -> . IF expression DO stmt_list DONE
    (63) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (64) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST
    (66) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (67) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    FUNCTION        shift and go to state 25
    IDENT           shift and go to state 26
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 27
    CELL            shift and go to state 28
    BOOL            shift and go to state 29
    VAR             shift and go to state 30

    stmt_list                      shift and go to state 123
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 121

    (63) if -> IF expression DO stmt_list DONE NL ELDEF DO . stmt_list DONE
    (64) if -> IF expression DO stmt_list DONE NL ELDEF DO . stmt_list DONE NL ELUND DO stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (60) while -> . WHILE expression DO stmt_list DONE
    (61) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (62) if -> . IF expression DO stmt_list DONE
    (63) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (64) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST
    (66) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (67) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    FUNCTION        shift and go to state 25
    IDENT           shift and go to state 26
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 27
    CELL            shift and go to state 28
    BOOL            shift and go to state 29
    VAR             shift and go to state 30

    stmt_list                      shift and go to state 124
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 122

    (65) if -> IF expression DO stmt_list DONE NL ELUND DO . stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (60) while -> . WHILE expression DO stmt_list DONE
    (61) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (62) if -> . IF expression DO stmt_list DONE
    (63) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (64) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST
    (66) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (67) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    FUNCTION        shift and go to state 25
    IDENT           shift and go to state 26
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 27
    CELL            shift and go to state 28
    BOOL            shift and go to state 29
    VAR             shift and go to state 30

    stmt_list                      shift and go to state 125
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 123

    (67) function -> FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list . DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (60) while -> . WHILE expression DO stmt_list DONE
    (61) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (62) if -> . IF expression DO stmt_list DONE
    (63) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (64) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST
    (66) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (67) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT

    DONE            shift and go to state 126
    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    FUNCTION        shift and go to state 25
    IDENT           shift and go to state 26
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 27
    CELL            shift and go to state 28
    BOOL            shift and go to state 29
    VAR             shift and go to state 30

    statement                      shift and go to state 31
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 124

    (63) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list . DONE
    (64) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list . DONE NL ELUND DO stmt_list DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (60) while -> . WHILE expression DO stmt_list DONE
    (61) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (62) if -> . IF expression DO stmt_list DONE
    (63) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (64) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST
    (66) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (67) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT

    DONE            shift and go to state 127
    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    FUNCTION        shift and go to state 25
    IDENT           shift and go to state 26
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 27
    CELL            shift and go to state 28
    BOOL            shift and go to state 29
    VAR             shift and go to state 30

    statement                      shift and go to state 31
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 125

    (65) if -> IF expression DO stmt_list DONE NL ELUND DO stmt_list . DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (60) while -> . WHILE expression DO stmt_list DONE
    (61) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (62) if -> . IF expression DO stmt_list DONE
    (63) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (64) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST
    (66) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (67) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT

    DONE            shift and go to state 128
    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    FUNCTION        shift and go to state 25
    IDENT           shift and go to state 26
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 27
    CELL            shift and go to state 28
    BOOL            shift and go to state 29
    VAR             shift and go to state 30

    statement                      shift and go to state 31
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 126

    (67) function -> FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE .

    NL              reduce using rule 67 (function -> FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE .)


state 127

    (63) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE .
    (64) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE . NL ELUND DO stmt_list DONE

  ! shift/reduce conflict for NL resolved as shift
    NL              shift and go to state 129

  ! NL              [ reduce using rule 63 (if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE .) ]


state 128

    (65) if -> IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE .

    NL              reduce using rule 65 (if -> IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE .)


state 129

    (64) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL . ELUND DO stmt_list DONE

    ELUND           shift and go to state 130


state 130

    (64) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND . DO stmt_list DONE

    DO              shift and go to state 131


state 131

    (64) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO . stmt_list DONE
    (3) stmt_list -> . stmt_list statement
    (4) stmt_list -> . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (60) while -> . WHILE expression DO stmt_list DONE
    (61) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (62) if -> . IF expression DO stmt_list DONE
    (63) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (64) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST
    (66) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (67) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT

    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    FUNCTION        shift and go to state 25
    IDENT           shift and go to state 26
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 27
    CELL            shift and go to state 28
    BOOL            shift and go to state 29
    VAR             shift and go to state 30

    stmt_list                      shift and go to state 132
    statement                      shift and go to state 3
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 132

    (64) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list . DONE
    (3) stmt_list -> stmt_list . statement
    (5) statement -> . declaration_list NL
    (6) statement -> . assignment NL
    (7) statement -> . while NL
    (8) statement -> . if NL
    (9) statement -> . operator NL
    (10) statement -> . function NL
    (11) statement -> . function_call NL
    (12) statement -> . RETURN NL
    (13) statement -> . empty NL
    (14) declaration_list -> . type vars_list
    (23) assignment -> . variable ASSIGN expression
    (60) while -> . WHILE expression DO stmt_list DONE
    (61) while -> . WHILE expression DO stmt_list FINISH stmt_list DONE
    (62) if -> . IF expression DO stmt_list DONE
    (63) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE
    (64) if -> . IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE
    (65) if -> . IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE
    (52) operator -> . FORWARD expression
    (53) operator -> . BACKWARD expression
    (54) operator -> . LEFT
    (55) operator -> . RIGHT
    (56) operator -> . LOAD expression
    (57) operator -> . DROP expression
    (58) operator -> . LOOK
    (59) operator -> . TEST
    (66) function -> . FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE
    (67) function -> . FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE
    (51) function_call -> . IDENT OBRACKET variable CBRACKET
    (2) empty -> .
    (15) type -> . INT
    (16) type -> . CELL
    (17) type -> . BOOL
    (18) type -> . VAR
    (24) variable -> . IDENT OBRACKET expression CBRACKET
    (25) variable -> . IDENT

    DONE            shift and go to state 133
    RETURN          shift and go to state 11
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    FORWARD         shift and go to state 17
    BACKWARD        shift and go to state 18
    LEFT            shift and go to state 19
    RIGHT           shift and go to state 20
    LOAD            shift and go to state 21
    DROP            shift and go to state 22
    LOOK            shift and go to state 23
    TEST            shift and go to state 24
    FUNCTION        shift and go to state 25
    IDENT           shift and go to state 26
    NL              reduce using rule 2 (empty -> .)
    INT             shift and go to state 27
    CELL            shift and go to state 28
    BOOL            shift and go to state 29
    VAR             shift and go to state 30

    statement                      shift and go to state 31
    declaration_list               shift and go to state 4
    assignment                     shift and go to state 5
    while                          shift and go to state 6
    if                             shift and go to state 7
    operator                       shift and go to state 8
    function                       shift and go to state 9
    function_call                  shift and go to state 10
    empty                          shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 133

    (64) if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE .

    NL              reduce using rule 64 (if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for CARET in state 67 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 67 resolved as shift
WARNING: shift/reduce conflict for LESS in state 67 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for CARET in state 68 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 68 resolved as shift
WARNING: shift/reduce conflict for LESS in state 68 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for CARET in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS in state 69 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for CARET in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 70 resolved as shift
WARNING: shift/reduce conflict for LESS in state 70 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 86 resolved as shift
WARNING: shift/reduce conflict for CARET in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 86 resolved as shift
WARNING: shift/reduce conflict for LESS in state 86 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 87 resolved as shift
WARNING: shift/reduce conflict for CARET in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 87 resolved as shift
WARNING: shift/reduce conflict for LESS in state 87 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for CBRACKET in state 91 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 96 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 96 resolved as shift
WARNING: shift/reduce conflict for CARET in state 96 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 96 resolved as shift
WARNING: shift/reduce conflict for LESS in state 96 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for CARET in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 97 resolved as shift
WARNING: shift/reduce conflict for LESS in state 97 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for CARET in state 98 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 98 resolved as shift
WARNING: shift/reduce conflict for LESS in state 98 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for CARET in state 99 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 99 resolved as shift
WARNING: shift/reduce conflict for LESS in state 99 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for CARET in state 100 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 100 resolved as shift
WARNING: shift/reduce conflict for LESS in state 100 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for CARET in state 101 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 101 resolved as shift
WARNING: shift/reduce conflict for LESS in state 101 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for NL in state 109 resolved as shift
WARNING: shift/reduce conflict for NL in state 127 resolved as shift
