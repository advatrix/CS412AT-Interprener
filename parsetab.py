
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BACKWARD BOOL BOX CARET CBRACKET CELL COMMA CSQBRACKET DECIMAL DO DONE DROP ELDEF ELUND EMPTY EQUAL EXIT FALSE FINISH FORWARD FUNCTION GREATER HEXADECIMAL IDENT IF INF INT LEFT LESS LOAD LOOK MINUS MINUS_INF NAN NL OBRACKET OSQBRACKET PLUS RETURN RIGHT SHARP SIZEOF TEST TRUE UNDEF VAR WALL WHILEprogram : stmt_listempty : stmt_list : stmt_list statement\n        | statementstatement : declaration_list NL\n        | assignment NL\n        | while NL\n        | if NL\n        | operator NL\n        | function NL\n        | function_call NL\n        | RETURN NL\n        | empty NL\n        statement : err_list NLstatement : err_listdeclaration_list : type vars_listtype : INT\n        | CELL\n        | BOOL\n        | VAR\n        type : err_listerr_list : err_list error\n        | errorvars_list : IDENT COMMA vars_listvars_list : assignment COMMA vars_listvars_list : IDENTvars_list : assignmentassignment : variable ASSIGN expression\n        | variable ASSIGN arrayarray : OSQBRACKET expr_list CSQBRACKETexpr_list : expr_list COMMA expression\n        | expressionvariable : IDENT OBRACKET expression CBRACKET\n        | IDENTexpression : variable\n        | const\n        | al_expression\n        | function_call\n        | operatorconst : INF\n        | MINUS_INF\n        | NAN\n        | TRUE\n        | FALSE\n        | UNDEF\n        | EMPTY\n        | WALL\n        | BOX\n        | EXIT\n        | DECIMAL\n        | HEXADECIMALal_expression : expression PLUS expression\n        | expression MINUS expression\n        | MINUS expression\n        | SHARP expression\n        | expression CARET expression\n        | expression GREATER expression\n        | expression LESS expression\n        | expression EQUAL expressionfunction_call : IDENT OBRACKET variable CBRACKEToperator : FORWARD expression\n        | BACKWARD expression\n        | LEFT\n        | RIGHT\n        | LOAD expression\n        | DROP expression\n        | LOOK\n        | TEST\n        | SIZEOF variablewhile : WHILE expression DO stmt_list DONE\n        | WHILE expression DO stmt_list FINISH stmt_list DONEif : IF expression DO stmt_list DONE \n        | IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE\n        | IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE\n        | IF expression DO stmt_list DONE NL ELUND DO stmt_list DONEfunction : FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE \n        | FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE'
    
_lr_action_items = {'RETURN':([0,2,3,13,29,34,35,36,37,38,39,40,41,42,43,44,45,87,97,106,113,121,123,126,128,134,135,136,137,138,139,145,146,],[11,11,-4,-15,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'WHILE':([0,2,3,13,29,34,35,36,37,38,39,40,41,42,43,44,45,87,97,106,113,121,123,126,128,134,135,136,137,138,139,145,146,],[16,16,-4,-15,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'IF':([0,2,3,13,29,34,35,36,37,38,39,40,41,42,43,44,45,87,97,106,113,121,123,126,128,134,135,136,137,138,139,145,146,],[17,17,-4,-15,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'FORWARD':([0,2,3,13,16,17,18,19,22,23,29,34,35,36,37,38,39,40,41,42,43,44,45,49,69,70,80,82,86,87,88,89,90,91,92,93,94,97,106,113,119,121,123,126,128,134,135,136,137,138,139,145,146,],[18,18,-4,-15,18,18,18,18,18,18,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'BACKWARD':([0,2,3,13,16,17,18,19,22,23,29,34,35,36,37,38,39,40,41,42,43,44,45,49,69,70,80,82,86,87,88,89,90,91,92,93,94,97,106,113,119,121,123,126,128,134,135,136,137,138,139,145,146,],[19,19,-4,-15,19,19,19,19,19,19,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'LEFT':([0,2,3,13,16,17,18,19,22,23,29,34,35,36,37,38,39,40,41,42,43,44,45,49,69,70,80,82,86,87,88,89,90,91,92,93,94,97,106,113,119,121,123,126,128,134,135,136,137,138,139,145,146,],[20,20,-4,-15,20,20,20,20,20,20,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'RIGHT':([0,2,3,13,16,17,18,19,22,23,29,34,35,36,37,38,39,40,41,42,43,44,45,49,69,70,80,82,86,87,88,89,90,91,92,93,94,97,106,113,119,121,123,126,128,134,135,136,137,138,139,145,146,],[21,21,-4,-15,21,21,21,21,21,21,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'LOAD':([0,2,3,13,16,17,18,19,22,23,29,34,35,36,37,38,39,40,41,42,43,44,45,49,69,70,80,82,86,87,88,89,90,91,92,93,94,97,106,113,119,121,123,126,128,134,135,136,137,138,139,145,146,],[22,22,-4,-15,22,22,22,22,22,22,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'DROP':([0,2,3,13,16,17,18,19,22,23,29,34,35,36,37,38,39,40,41,42,43,44,45,49,69,70,80,82,86,87,88,89,90,91,92,93,94,97,106,113,119,121,123,126,128,134,135,136,137,138,139,145,146,],[23,23,-4,-15,23,23,23,23,23,23,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'LOOK':([0,2,3,13,16,17,18,19,22,23,29,34,35,36,37,38,39,40,41,42,43,44,45,49,69,70,80,82,86,87,88,89,90,91,92,93,94,97,106,113,119,121,123,126,128,134,135,136,137,138,139,145,146,],[24,24,-4,-15,24,24,24,24,24,24,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'TEST':([0,2,3,13,16,17,18,19,22,23,29,34,35,36,37,38,39,40,41,42,43,44,45,49,69,70,80,82,86,87,88,89,90,91,92,93,94,97,106,113,119,121,123,126,128,134,135,136,137,138,139,145,146,],[25,25,-4,-15,25,25,25,25,25,25,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'SIZEOF':([0,2,3,13,16,17,18,19,22,23,29,34,35,36,37,38,39,40,41,42,43,44,45,49,69,70,80,82,86,87,88,89,90,91,92,93,94,97,106,113,119,121,123,126,128,134,135,136,137,138,139,145,146,],[26,26,-4,-15,26,26,26,26,26,26,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'FUNCTION':([0,2,3,13,29,34,35,36,37,38,39,40,41,42,43,44,45,87,97,106,113,121,123,126,128,134,135,136,137,138,139,145,146,],[27,27,-4,-15,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'IDENT':([0,2,3,13,14,16,17,18,19,22,23,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,69,70,78,80,81,82,83,86,87,88,89,90,91,92,93,94,97,99,106,113,119,121,123,126,128,134,135,136,137,138,139,145,146,],[28,28,-4,-15,47,56,56,56,56,56,56,77,79,-23,-17,-18,-19,-20,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,56,56,56,98,56,47,56,47,56,28,56,56,56,56,56,56,56,28,115,28,28,56,28,28,28,28,28,28,28,28,28,28,28,28,]),'NL':([0,2,3,4,5,6,7,8,9,10,11,12,13,20,21,24,25,29,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,73,74,75,76,77,84,85,87,95,96,97,102,103,106,107,108,109,110,111,112,113,116,117,118,120,121,122,123,126,128,129,130,133,134,135,136,137,138,139,140,141,142,145,146,147,],[-2,-2,-4,35,36,37,38,39,40,41,42,43,44,-63,-64,-67,-68,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,-16,-26,-27,-35,-36,-37,-38,-39,-34,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-61,-62,-65,-66,-69,-34,-28,-29,-2,-54,-55,-2,-24,-25,-2,-52,-53,-56,-57,-58,-59,-2,-60,-33,-30,-70,-2,127,-2,-2,-2,134,-71,-76,-2,-2,-2,-2,-2,-2,-77,143,-75,-2,-2,-74,]),'error':([0,2,3,13,29,34,35,36,37,38,39,40,41,42,43,44,45,87,97,106,113,121,123,126,128,134,135,136,137,138,139,145,146,],[29,29,-4,45,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'INT':([0,2,3,13,29,34,35,36,37,38,39,40,41,42,43,44,45,87,97,106,113,121,123,126,128,134,135,136,137,138,139,145,146,],[30,30,-4,-15,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'CELL':([0,2,3,13,29,34,35,36,37,38,39,40,41,42,43,44,45,87,97,106,113,121,123,126,128,134,135,136,137,138,139,145,146,],[31,31,-4,-15,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'BOOL':([0,2,3,13,29,34,35,36,37,38,39,40,41,42,43,44,45,87,97,106,113,121,123,126,128,134,135,136,137,138,139,145,146,],[32,32,-4,-15,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'VAR':([0,2,3,13,29,34,35,36,37,38,39,40,41,42,43,44,45,87,97,106,113,121,123,126,128,134,135,136,137,138,139,145,146,],[33,33,-4,-15,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'$end':([1,2,3,13,29,34,35,36,37,38,39,40,41,42,43,44,45,],[0,-1,-4,-15,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,]),'DONE':([3,13,29,34,35,36,37,38,39,40,41,42,43,44,45,106,113,126,128,137,138,139,146,],[-4,-15,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,120,122,130,133,140,141,142,147,]),'FINISH':([3,13,29,34,35,36,37,38,39,40,41,42,43,44,45,106,],[-4,-15,-23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,121,]),'ASSIGN':([15,28,47,117,],[49,-34,-34,-33,]),'INF':([16,17,18,19,22,23,49,69,70,80,82,86,88,89,90,91,92,93,94,119,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'MINUS_INF':([16,17,18,19,22,23,49,69,70,80,82,86,88,89,90,91,92,93,94,119,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'NAN':([16,17,18,19,22,23,49,69,70,80,82,86,88,89,90,91,92,93,94,119,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'TRUE':([16,17,18,19,22,23,49,69,70,80,82,86,88,89,90,91,92,93,94,119,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'FALSE':([16,17,18,19,22,23,49,69,70,80,82,86,88,89,90,91,92,93,94,119,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'UNDEF':([16,17,18,19,22,23,49,69,70,80,82,86,88,89,90,91,92,93,94,119,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'EMPTY':([16,17,18,19,22,23,49,69,70,80,82,86,88,89,90,91,92,93,94,119,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'WALL':([16,17,18,19,22,23,49,69,70,80,82,86,88,89,90,91,92,93,94,119,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'BOX':([16,17,18,19,22,23,49,69,70,80,82,86,88,89,90,91,92,93,94,119,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'EXIT':([16,17,18,19,22,23,49,69,70,80,82,86,88,89,90,91,92,93,94,119,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'DECIMAL':([16,17,18,19,22,23,49,69,70,80,82,86,88,89,90,91,92,93,94,119,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'HEXADECIMAL':([16,17,18,19,22,23,49,69,70,80,82,86,88,89,90,91,92,93,94,119,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'MINUS':([16,17,18,19,20,21,22,23,24,25,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,82,84,86,88,89,90,91,92,93,94,95,96,100,101,105,107,108,109,110,111,112,116,117,119,125,],[69,69,69,69,-63,-64,69,69,-67,-68,69,89,-35,-36,-37,-38,-39,-34,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,69,69,89,89,89,89,89,-69,-34,69,69,89,69,69,69,69,69,69,69,69,89,89,-35,89,89,89,89,89,89,89,89,-60,-33,69,89,]),'SHARP':([16,17,18,19,22,23,49,69,70,80,82,86,88,89,90,91,92,93,94,119,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'DO':([20,21,24,25,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,73,74,75,76,77,95,96,107,108,109,110,111,112,114,116,117,124,131,132,144,],[-63,-64,-67,-68,87,-35,-36,-37,-38,-39,-34,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,97,-61,-62,-65,-66,-69,-34,-54,-55,-52,-53,-56,-57,-58,-59,123,-60,-33,129,135,136,145,]),'PLUS':([20,21,24,25,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,73,74,75,76,77,84,95,96,100,101,105,107,108,109,110,111,112,116,117,125,],[-63,-64,-67,-68,88,-35,-36,-37,-38,-39,-34,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,88,88,88,88,88,-69,-34,88,88,88,-35,88,88,88,88,88,88,88,88,-60,-33,88,]),'CARET':([20,21,24,25,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,73,74,75,76,77,84,95,96,100,101,105,107,108,109,110,111,112,116,117,125,],[-63,-64,-67,-68,90,-35,-36,-37,-38,-39,-34,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,90,90,90,90,90,-69,-34,90,90,90,-35,90,90,90,90,90,90,90,90,-60,-33,90,]),'GREATER':([20,21,24,25,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,73,74,75,76,77,84,95,96,100,101,105,107,108,109,110,111,112,116,117,125,],[-63,-64,-67,-68,91,-35,-36,-37,-38,-39,-34,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,91,91,91,91,91,-69,-34,91,91,91,-35,91,91,91,91,91,91,91,91,-60,-33,91,]),'LESS':([20,21,24,25,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,73,74,75,76,77,84,95,96,100,101,105,107,108,109,110,111,112,116,117,125,],[-63,-64,-67,-68,92,-35,-36,-37,-38,-39,-34,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,92,92,92,92,92,-69,-34,92,92,92,-35,92,92,92,92,92,92,92,92,-60,-33,92,]),'EQUAL':([20,21,24,25,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,73,74,75,76,77,84,95,96,100,101,105,107,108,109,110,111,112,116,117,125,],[-63,-64,-67,-68,93,-35,-36,-37,-38,-39,-34,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,93,93,93,93,93,-69,-34,93,93,93,-35,93,93,93,93,93,93,93,93,-60,-33,93,]),'COMMA':([20,21,24,25,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,73,74,75,76,77,84,85,95,96,104,105,107,108,109,110,111,112,116,117,118,125,],[-63,-64,-67,-68,81,83,-35,-36,-37,-38,-39,-34,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-61,-62,-65,-66,-69,-34,-28,-29,-54,-55,119,-32,-52,-53,-56,-57,-58,-59,-60,-33,-30,-31,]),'CBRACKET':([20,21,24,25,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,73,74,75,76,77,95,96,98,100,101,107,108,109,110,111,112,115,116,117,],[-63,-64,-67,-68,-35,-36,-37,-38,-39,-34,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-61,-62,-65,-66,-69,-34,-54,-55,114,116,117,-52,-53,-56,-57,-58,-59,124,-60,-33,]),'CSQBRACKET':([20,21,24,25,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,73,74,75,76,77,95,96,104,105,107,108,109,110,111,112,116,117,125,],[-63,-64,-67,-68,-35,-36,-37,-38,-39,-34,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-61,-62,-65,-66,-69,-34,-54,-55,118,-32,-52,-53,-56,-57,-58,-59,-60,-33,-31,]),'OBRACKET':([27,28,47,56,77,79,],[78,80,82,94,82,99,]),'OSQBRACKET':([49,],[86,]),'ELDEF':([127,],[131,]),'ELUND':([127,143,],[132,144,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,87,97,121,123,134,135,136,145,],[2,106,113,126,128,137,138,139,146,]),'statement':([0,2,87,97,106,113,121,123,126,128,134,135,136,137,138,139,145,146,],[3,34,3,3,34,34,3,3,34,34,3,3,3,34,34,34,3,34,]),'declaration_list':([0,2,87,97,106,113,121,123,126,128,134,135,136,137,138,139,145,146,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,14,81,83,87,97,106,113,121,123,126,128,134,135,136,137,138,139,145,146,],[5,5,48,48,48,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'while':([0,2,87,97,106,113,121,123,126,128,134,135,136,137,138,139,145,146,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'if':([0,2,87,97,106,113,121,123,126,128,134,135,136,137,138,139,145,146,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'operator':([0,2,16,17,18,19,22,23,49,69,70,80,82,86,87,88,89,90,91,92,93,94,97,106,113,119,121,123,126,128,134,135,136,137,138,139,145,146,],[8,8,55,55,55,55,55,55,55,55,55,55,55,55,8,55,55,55,55,55,55,55,8,8,8,55,8,8,8,8,8,8,8,8,8,8,8,8,]),'function':([0,2,87,97,106,113,121,123,126,128,134,135,136,137,138,139,145,146,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'function_call':([0,2,16,17,18,19,22,23,49,69,70,80,82,86,87,88,89,90,91,92,93,94,97,106,113,119,121,123,126,128,134,135,136,137,138,139,145,146,],[10,10,54,54,54,54,54,54,54,54,54,54,54,54,10,54,54,54,54,54,54,54,10,10,10,54,10,10,10,10,10,10,10,10,10,10,10,10,]),'empty':([0,2,87,97,106,113,121,123,126,128,134,135,136,137,138,139,145,146,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'err_list':([0,2,87,97,106,113,121,123,126,128,134,135,136,137,138,139,145,146,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'type':([0,2,87,97,106,113,121,123,126,128,134,135,136,137,138,139,145,146,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'variable':([0,2,14,16,17,18,19,22,23,26,49,69,70,80,81,82,83,86,87,88,89,90,91,92,93,94,97,106,113,119,121,123,126,128,134,135,136,137,138,139,145,146,],[15,15,15,51,51,51,51,51,51,76,51,51,51,100,15,51,15,51,15,51,51,51,51,51,51,100,15,15,15,51,15,15,15,15,15,15,15,15,15,15,15,15,]),'vars_list':([14,81,83,],[46,102,103,]),'expression':([16,17,18,19,22,23,49,69,70,80,82,86,88,89,90,91,92,93,94,119,],[50,71,72,73,74,75,84,95,96,101,101,105,107,108,109,110,111,112,101,125,]),'const':([16,17,18,19,22,23,49,69,70,80,82,86,88,89,90,91,92,93,94,119,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'al_expression':([16,17,18,19,22,23,49,69,70,80,82,86,88,89,90,91,92,93,94,119,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'array':([49,],[85,]),'expr_list':([86,],[104,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_program','parser.py',91),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',95),
  ('stmt_list -> stmt_list statement','stmt_list',2,'p_stmt_list','parser.py',99),
  ('stmt_list -> statement','stmt_list',1,'p_stmt_list','parser.py',100),
  ('statement -> declaration_list NL','statement',2,'p_statement','parser.py',107),
  ('statement -> assignment NL','statement',2,'p_statement','parser.py',108),
  ('statement -> while NL','statement',2,'p_statement','parser.py',109),
  ('statement -> if NL','statement',2,'p_statement','parser.py',110),
  ('statement -> operator NL','statement',2,'p_statement','parser.py',111),
  ('statement -> function NL','statement',2,'p_statement','parser.py',112),
  ('statement -> function_call NL','statement',2,'p_statement','parser.py',113),
  ('statement -> RETURN NL','statement',2,'p_statement','parser.py',114),
  ('statement -> empty NL','statement',2,'p_statement','parser.py',115),
  ('statement -> err_list NL','statement',2,'p_statement_error','parser.py',120),
  ('statement -> err_list','statement',1,'p_statement_error_no_nl','parser.py',125),
  ('declaration_list -> type vars_list','declaration_list',2,'p_declaration_list','parser.py',130),
  ('type -> INT','type',1,'p_type','parser.py',134),
  ('type -> CELL','type',1,'p_type','parser.py',135),
  ('type -> BOOL','type',1,'p_type','parser.py',136),
  ('type -> VAR','type',1,'p_type','parser.py',137),
  ('type -> err_list','type',1,'p_type_error','parser.py',142),
  ('err_list -> err_list error','err_list',2,'p_err_list','parser.py',147),
  ('err_list -> error','err_list',1,'p_err_list','parser.py',148),
  ('vars_list -> IDENT COMMA vars_list','vars_list',3,'p_vars_list_icv','parser.py',155),
  ('vars_list -> assignment COMMA vars_list','vars_list',3,'p_vars_list_acv','parser.py',160),
  ('vars_list -> IDENT','vars_list',1,'p_vars_list_ident','parser.py',164),
  ('vars_list -> assignment','vars_list',1,'p_vars_list','parser.py',168),
  ('assignment -> variable ASSIGN expression','assignment',3,'p_assignment','parser.py',172),
  ('assignment -> variable ASSIGN array','assignment',3,'p_assignment','parser.py',173),
  ('array -> OSQBRACKET expr_list CSQBRACKET','array',3,'p_array','parser.py',177),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expr_list','parser.py',181),
  ('expr_list -> expression','expr_list',1,'p_expr_list','parser.py',182),
  ('variable -> IDENT OBRACKET expression CBRACKET','variable',4,'p_variable','parser.py',189),
  ('variable -> IDENT','variable',1,'p_variable','parser.py',190),
  ('expression -> variable','expression',1,'p_expression','parser.py',197),
  ('expression -> const','expression',1,'p_expression','parser.py',198),
  ('expression -> al_expression','expression',1,'p_expression','parser.py',199),
  ('expression -> function_call','expression',1,'p_expression','parser.py',200),
  ('expression -> operator','expression',1,'p_expression','parser.py',201),
  ('const -> INF','const',1,'p_const','parser.py',205),
  ('const -> MINUS_INF','const',1,'p_const','parser.py',206),
  ('const -> NAN','const',1,'p_const','parser.py',207),
  ('const -> TRUE','const',1,'p_const','parser.py',208),
  ('const -> FALSE','const',1,'p_const','parser.py',209),
  ('const -> UNDEF','const',1,'p_const','parser.py',210),
  ('const -> EMPTY','const',1,'p_const','parser.py',211),
  ('const -> WALL','const',1,'p_const','parser.py',212),
  ('const -> BOX','const',1,'p_const','parser.py',213),
  ('const -> EXIT','const',1,'p_const','parser.py',214),
  ('const -> DECIMAL','const',1,'p_const','parser.py',215),
  ('const -> HEXADECIMAL','const',1,'p_const','parser.py',216),
  ('al_expression -> expression PLUS expression','al_expression',3,'p_al_expression','parser.py',220),
  ('al_expression -> expression MINUS expression','al_expression',3,'p_al_expression','parser.py',221),
  ('al_expression -> MINUS expression','al_expression',2,'p_al_expression','parser.py',222),
  ('al_expression -> SHARP expression','al_expression',2,'p_al_expression','parser.py',223),
  ('al_expression -> expression CARET expression','al_expression',3,'p_al_expression','parser.py',224),
  ('al_expression -> expression GREATER expression','al_expression',3,'p_al_expression','parser.py',225),
  ('al_expression -> expression LESS expression','al_expression',3,'p_al_expression','parser.py',226),
  ('al_expression -> expression EQUAL expression','al_expression',3,'p_al_expression','parser.py',227),
  ('function_call -> IDENT OBRACKET variable CBRACKET','function_call',4,'p_function_call','parser.py',234),
  ('operator -> FORWARD expression','operator',2,'p_operator','parser.py',238),
  ('operator -> BACKWARD expression','operator',2,'p_operator','parser.py',239),
  ('operator -> LEFT','operator',1,'p_operator','parser.py',240),
  ('operator -> RIGHT','operator',1,'p_operator','parser.py',241),
  ('operator -> LOAD expression','operator',2,'p_operator','parser.py',242),
  ('operator -> DROP expression','operator',2,'p_operator','parser.py',243),
  ('operator -> LOOK','operator',1,'p_operator','parser.py',244),
  ('operator -> TEST','operator',1,'p_operator','parser.py',245),
  ('operator -> SIZEOF variable','operator',2,'p_operator','parser.py',246),
  ('while -> WHILE expression DO stmt_list DONE','while',5,'p_while','parser.py',253),
  ('while -> WHILE expression DO stmt_list FINISH stmt_list DONE','while',7,'p_while','parser.py',254),
  ('if -> IF expression DO stmt_list DONE','if',5,'p_if','parser.py',263),
  ('if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE','if',10,'p_if','parser.py',264),
  ('if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE','if',15,'p_if','parser.py',265),
  ('if -> IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE','if',10,'p_if','parser.py',266),
  ('function -> FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE','function',7,'p_function','parser.py',283),
  ('function -> FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE','function',9,'p_function','parser.py',284),
]
