
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BACKWARD BOOL BOX CARET CBRACKET CELL COMMA DECIMAL DO DONE DROP ELDEF ELUND EMPTY EQUAL EXIT FALSE FINISH FORWARD FUNCTION GREATER HEXADECIMAL IDENT IF INF INT LEFT LESS LOAD LOOK MINUS MINUS_INF NAN NL OBRACKET PLUS RETURN RIGHT SHARP TEST TRUE UNDEF VAR WALL WHILEprogram : stmt_listempty : stmt_list : stmt_list statement\n        | statementstatement : declaration_list NL\n        | assignment NL\n        | while NL\n        | if NL\n        | operator NL\n        | function NL\n        | function_call NL\n        | RETURN NL\n        | empty NL\n        declaration_list : type vars_listtype : INT\n        | CELL\n        | BOOL\n        | VAR\n        vars_list : IDENT COMMA vars_list\n        | assignment COMMA vars_list\n        | IDENT\n        | assignmentassignment : variable ASSIGN expressionvariable : IDENT OBRACKET expression CBRACKET\n        | IDENTexpression : variable\n        | const\n        | al_expression\n        | function_call\n        | operatorconst : INF\n        | MINUS_INF\n        | NAN\n        | TRUE\n        | FALSE\n        | UNDEF\n        | EMPTY\n        | WALL\n        | BOX\n        | EXIT\n        | DECIMAL\n        | HEXADECIMALal_expression : expression PLUS expression\n        | expression MINUS expression\n        | MINUS expression\n        | SHARP expression\n        | expression CARET expression\n        | expression GREATER expression\n        | expression LESS expression\n        | expression EQUAL expressionfunction_call : IDENT OBRACKET variable CBRACKEToperator : FORWARD expression\n        | BACKWARD expression\n        | LEFT\n        | RIGHT\n        | LOAD expression\n        | DROP expression\n        | LOOK\n        | TESTwhile : WHILE expression DO stmt_list DONE\n        | WHILE expression DO stmt_list FINISH stmt_list DONEif : IF expression DO stmt_list DONE \n        | IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE\n        | IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE\n        | IF expression DO stmt_list DONE NL ELUND DO stmt_list DONEfunction : FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE \n        | FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE'
    
_lr_action_items = {'RETURN':([0,2,3,31,32,33,34,35,36,37,38,39,40,78,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[11,11,-4,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'WHILE':([0,2,3,31,32,33,34,35,36,37,38,39,40,78,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[15,15,-4,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'IF':([0,2,3,31,32,33,34,35,36,37,38,39,40,78,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[16,16,-4,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'FORWARD':([0,2,3,15,16,17,18,21,22,31,32,33,34,35,36,37,38,39,40,44,64,65,73,75,78,79,80,81,82,83,84,85,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[17,17,-4,17,17,17,17,17,17,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'BACKWARD':([0,2,3,15,16,17,18,21,22,31,32,33,34,35,36,37,38,39,40,44,64,65,73,75,78,79,80,81,82,83,84,85,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[18,18,-4,18,18,18,18,18,18,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'LEFT':([0,2,3,15,16,17,18,21,22,31,32,33,34,35,36,37,38,39,40,44,64,65,73,75,78,79,80,81,82,83,84,85,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[19,19,-4,19,19,19,19,19,19,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'RIGHT':([0,2,3,15,16,17,18,21,22,31,32,33,34,35,36,37,38,39,40,44,64,65,73,75,78,79,80,81,82,83,84,85,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[20,20,-4,20,20,20,20,20,20,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'LOAD':([0,2,3,15,16,17,18,21,22,31,32,33,34,35,36,37,38,39,40,44,64,65,73,75,78,79,80,81,82,83,84,85,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[21,21,-4,21,21,21,21,21,21,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'DROP':([0,2,3,15,16,17,18,21,22,31,32,33,34,35,36,37,38,39,40,44,64,65,73,75,78,79,80,81,82,83,84,85,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[22,22,-4,22,22,22,22,22,22,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'LOOK':([0,2,3,15,16,17,18,21,22,31,32,33,34,35,36,37,38,39,40,44,64,65,73,75,78,79,80,81,82,83,84,85,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[23,23,-4,23,23,23,23,23,23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'TEST':([0,2,3,15,16,17,18,21,22,31,32,33,34,35,36,37,38,39,40,44,64,65,73,75,78,79,80,81,82,83,84,85,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[24,24,-4,24,24,24,24,24,24,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'FUNCTION':([0,2,3,31,32,33,34,35,36,37,38,39,40,78,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[25,25,-4,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'IDENT':([0,2,3,13,15,16,17,18,21,22,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,64,65,71,73,74,75,76,78,79,80,81,82,83,84,85,88,90,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[26,26,-4,42,51,51,51,51,51,51,72,-15,-16,-17,-18,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,51,51,51,89,51,42,51,42,26,51,51,51,51,51,51,51,26,104,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'NL':([0,2,3,4,5,6,7,8,9,10,11,12,19,20,23,24,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,67,68,69,70,77,78,86,87,88,93,94,95,96,97,98,99,100,101,102,105,106,107,108,109,110,112,114,115,116,119,120,121,122,123,124,125,126,127,128,131,132,133,],[-2,-2,-4,32,33,34,35,36,37,38,39,40,-54,-55,-58,-59,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-21,-22,-26,-27,-28,-29,-30,-25,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-52,-53,-56,-57,-23,-2,-45,-46,-2,-19,-20,-2,-43,-44,-47,-48,-49,-50,-2,-51,-24,-60,-2,113,-2,-2,-2,120,-61,-66,-2,-2,-2,-2,-2,-2,-67,129,-65,-2,-2,-64,]),'INT':([0,2,3,31,32,33,34,35,36,37,38,39,40,78,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[27,27,-4,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'CELL':([0,2,3,31,32,33,34,35,36,37,38,39,40,78,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[28,28,-4,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'BOOL':([0,2,3,31,32,33,34,35,36,37,38,39,40,78,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[29,29,-4,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'VAR':([0,2,3,31,32,33,34,35,36,37,38,39,40,78,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[30,30,-4,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'$end':([1,2,3,31,32,33,34,35,36,37,38,39,40,],[0,-1,-4,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,]),'DONE':([3,31,32,33,34,35,36,37,38,39,40,95,102,112,114,123,124,125,132,],[-4,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,107,109,116,119,126,127,128,133,]),'FINISH':([3,31,32,33,34,35,36,37,38,39,40,95,],[-4,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,108,]),'ASSIGN':([14,26,42,106,],[44,-25,-25,-24,]),'INF':([15,16,17,18,21,22,44,64,65,73,75,79,80,81,82,83,84,85,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'MINUS_INF':([15,16,17,18,21,22,44,64,65,73,75,79,80,81,82,83,84,85,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'NAN':([15,16,17,18,21,22,44,64,65,73,75,79,80,81,82,83,84,85,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'TRUE':([15,16,17,18,21,22,44,64,65,73,75,79,80,81,82,83,84,85,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'FALSE':([15,16,17,18,21,22,44,64,65,73,75,79,80,81,82,83,84,85,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'UNDEF':([15,16,17,18,21,22,44,64,65,73,75,79,80,81,82,83,84,85,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'EMPTY':([15,16,17,18,21,22,44,64,65,73,75,79,80,81,82,83,84,85,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'WALL':([15,16,17,18,21,22,44,64,65,73,75,79,80,81,82,83,84,85,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'BOX':([15,16,17,18,21,22,44,64,65,73,75,79,80,81,82,83,84,85,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'EXIT':([15,16,17,18,21,22,44,64,65,73,75,79,80,81,82,83,84,85,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'DECIMAL':([15,16,17,18,21,22,44,64,65,73,75,79,80,81,82,83,84,85,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'HEXADECIMAL':([15,16,17,18,21,22,44,64,65,73,75,79,80,81,82,83,84,85,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'MINUS':([15,16,17,18,19,20,21,22,23,24,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,75,77,79,80,81,82,83,84,85,86,87,91,92,96,97,98,99,100,101,105,106,],[64,64,64,64,-54,-55,64,64,-58,-59,64,80,-26,-27,-28,-29,-30,-25,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,64,64,80,80,80,80,80,64,64,80,64,64,64,64,64,64,64,80,80,-26,80,80,80,80,80,80,80,-51,-24,]),'SHARP':([15,16,17,18,21,22,44,64,65,73,75,79,80,81,82,83,84,85,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'DO':([19,20,23,24,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,67,68,69,70,86,87,96,97,98,99,100,101,103,105,106,111,117,118,130,],[-54,-55,-58,-59,78,-26,-27,-28,-29,-30,-25,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,88,-52,-53,-56,-57,-45,-46,-43,-44,-47,-48,-49,-50,110,-51,-24,115,121,122,131,]),'PLUS':([19,20,23,24,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,67,68,69,70,77,86,87,91,92,96,97,98,99,100,101,105,106,],[-54,-55,-58,-59,79,-26,-27,-28,-29,-30,-25,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,79,79,79,79,79,79,79,79,-26,79,79,79,79,79,79,79,-51,-24,]),'CARET':([19,20,23,24,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,67,68,69,70,77,86,87,91,92,96,97,98,99,100,101,105,106,],[-54,-55,-58,-59,81,-26,-27,-28,-29,-30,-25,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,81,81,81,81,81,81,81,81,-26,81,81,81,81,81,81,81,-51,-24,]),'GREATER':([19,20,23,24,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,67,68,69,70,77,86,87,91,92,96,97,98,99,100,101,105,106,],[-54,-55,-58,-59,82,-26,-27,-28,-29,-30,-25,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,82,82,82,82,82,82,82,82,-26,82,82,82,82,82,82,82,-51,-24,]),'LESS':([19,20,23,24,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,67,68,69,70,77,86,87,91,92,96,97,98,99,100,101,105,106,],[-54,-55,-58,-59,83,-26,-27,-28,-29,-30,-25,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,83,83,83,83,83,83,83,83,-26,83,83,83,83,83,83,83,-51,-24,]),'EQUAL':([19,20,23,24,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,67,68,69,70,77,86,87,91,92,96,97,98,99,100,101,105,106,],[-54,-55,-58,-59,84,-26,-27,-28,-29,-30,-25,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,84,84,84,84,84,84,84,84,-26,84,84,84,84,84,84,84,-51,-24,]),'COMMA':([19,20,23,24,42,43,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,67,68,69,70,77,86,87,96,97,98,99,100,101,105,106,],[-54,-55,-58,-59,74,76,-26,-27,-28,-29,-30,-25,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-52,-53,-56,-57,-23,-45,-46,-43,-44,-47,-48,-49,-50,-51,-24,]),'CBRACKET':([19,20,23,24,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,67,68,69,70,86,87,89,91,92,96,97,98,99,100,101,104,105,106,],[-54,-55,-58,-59,-26,-27,-28,-29,-30,-25,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-52,-53,-56,-57,-45,-46,103,105,106,-43,-44,-47,-48,-49,-50,111,-51,-24,]),'OBRACKET':([25,26,42,51,72,],[71,73,75,85,90,]),'ELDEF':([113,],[117,]),'ELUND':([113,129,],[118,130,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,78,88,108,110,120,121,122,131,],[2,95,102,112,114,123,124,125,132,]),'statement':([0,2,78,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[3,31,3,3,31,31,3,3,31,31,3,3,3,31,31,31,3,31,]),'declaration_list':([0,2,78,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'assignment':([0,2,13,74,76,78,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[5,5,43,43,43,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'while':([0,2,78,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'if':([0,2,78,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'operator':([0,2,15,16,17,18,21,22,44,64,65,73,75,78,79,80,81,82,83,84,85,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[8,8,50,50,50,50,50,50,50,50,50,50,50,8,50,50,50,50,50,50,50,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'function':([0,2,78,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'function_call':([0,2,15,16,17,18,21,22,44,64,65,73,75,78,79,80,81,82,83,84,85,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[10,10,49,49,49,49,49,49,49,49,49,49,49,10,49,49,49,49,49,49,49,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'empty':([0,2,78,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'type':([0,2,78,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'variable':([0,2,13,15,16,17,18,21,22,44,64,65,73,74,75,76,78,79,80,81,82,83,84,85,88,95,102,108,110,112,114,120,121,122,123,124,125,131,132,],[14,14,14,46,46,46,46,46,46,46,46,46,91,14,46,14,14,46,46,46,46,46,46,91,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'vars_list':([13,74,76,],[41,93,94,]),'expression':([15,16,17,18,21,22,44,64,65,73,75,79,80,81,82,83,84,85,],[45,66,67,68,69,70,77,86,87,92,92,96,97,98,99,100,101,92,]),'const':([15,16,17,18,21,22,44,64,65,73,75,79,80,81,82,83,84,85,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'al_expression':([15,16,17,18,21,22,44,64,65,73,75,79,80,81,82,83,84,85,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_program','parser.py',41),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',45),
  ('stmt_list -> stmt_list statement','stmt_list',2,'p_stmt_list','parser.py',49),
  ('stmt_list -> statement','stmt_list',1,'p_stmt_list','parser.py',50),
  ('statement -> declaration_list NL','statement',2,'p_statement','parser.py',57),
  ('statement -> assignment NL','statement',2,'p_statement','parser.py',58),
  ('statement -> while NL','statement',2,'p_statement','parser.py',59),
  ('statement -> if NL','statement',2,'p_statement','parser.py',60),
  ('statement -> operator NL','statement',2,'p_statement','parser.py',61),
  ('statement -> function NL','statement',2,'p_statement','parser.py',62),
  ('statement -> function_call NL','statement',2,'p_statement','parser.py',63),
  ('statement -> RETURN NL','statement',2,'p_statement','parser.py',64),
  ('statement -> empty NL','statement',2,'p_statement','parser.py',65),
  ('declaration_list -> type vars_list','declaration_list',2,'p_declaration_list','parser.py',70),
  ('type -> INT','type',1,'p_type','parser.py',74),
  ('type -> CELL','type',1,'p_type','parser.py',75),
  ('type -> BOOL','type',1,'p_type','parser.py',76),
  ('type -> VAR','type',1,'p_type','parser.py',77),
  ('vars_list -> IDENT COMMA vars_list','vars_list',3,'p_vars_list','parser.py',82),
  ('vars_list -> assignment COMMA vars_list','vars_list',3,'p_vars_list','parser.py',83),
  ('vars_list -> IDENT','vars_list',1,'p_vars_list','parser.py',84),
  ('vars_list -> assignment','vars_list',1,'p_vars_list','parser.py',85),
  ('assignment -> variable ASSIGN expression','assignment',3,'p_assignment','parser.py',92),
  ('variable -> IDENT OBRACKET expression CBRACKET','variable',4,'p_variable','parser.py',96),
  ('variable -> IDENT','variable',1,'p_variable','parser.py',97),
  ('expression -> variable','expression',1,'p_expression','parser.py',104),
  ('expression -> const','expression',1,'p_expression','parser.py',105),
  ('expression -> al_expression','expression',1,'p_expression','parser.py',106),
  ('expression -> function_call','expression',1,'p_expression','parser.py',107),
  ('expression -> operator','expression',1,'p_expression','parser.py',108),
  ('const -> INF','const',1,'p_const','parser.py',112),
  ('const -> MINUS_INF','const',1,'p_const','parser.py',113),
  ('const -> NAN','const',1,'p_const','parser.py',114),
  ('const -> TRUE','const',1,'p_const','parser.py',115),
  ('const -> FALSE','const',1,'p_const','parser.py',116),
  ('const -> UNDEF','const',1,'p_const','parser.py',117),
  ('const -> EMPTY','const',1,'p_const','parser.py',118),
  ('const -> WALL','const',1,'p_const','parser.py',119),
  ('const -> BOX','const',1,'p_const','parser.py',120),
  ('const -> EXIT','const',1,'p_const','parser.py',121),
  ('const -> DECIMAL','const',1,'p_const','parser.py',122),
  ('const -> HEXADECIMAL','const',1,'p_const','parser.py',123),
  ('al_expression -> expression PLUS expression','al_expression',3,'p_al_expression','parser.py',127),
  ('al_expression -> expression MINUS expression','al_expression',3,'p_al_expression','parser.py',128),
  ('al_expression -> MINUS expression','al_expression',2,'p_al_expression','parser.py',129),
  ('al_expression -> SHARP expression','al_expression',2,'p_al_expression','parser.py',130),
  ('al_expression -> expression CARET expression','al_expression',3,'p_al_expression','parser.py',131),
  ('al_expression -> expression GREATER expression','al_expression',3,'p_al_expression','parser.py',132),
  ('al_expression -> expression LESS expression','al_expression',3,'p_al_expression','parser.py',133),
  ('al_expression -> expression EQUAL expression','al_expression',3,'p_al_expression','parser.py',134),
  ('function_call -> IDENT OBRACKET variable CBRACKET','function_call',4,'p_function_call','parser.py',141),
  ('operator -> FORWARD expression','operator',2,'p_operator','parser.py',145),
  ('operator -> BACKWARD expression','operator',2,'p_operator','parser.py',146),
  ('operator -> LEFT','operator',1,'p_operator','parser.py',147),
  ('operator -> RIGHT','operator',1,'p_operator','parser.py',148),
  ('operator -> LOAD expression','operator',2,'p_operator','parser.py',149),
  ('operator -> DROP expression','operator',2,'p_operator','parser.py',150),
  ('operator -> LOOK','operator',1,'p_operator','parser.py',151),
  ('operator -> TEST','operator',1,'p_operator','parser.py',152),
  ('while -> WHILE expression DO stmt_list DONE','while',5,'p_while','parser.py',159),
  ('while -> WHILE expression DO stmt_list FINISH stmt_list DONE','while',7,'p_while','parser.py',160),
  ('if -> IF expression DO stmt_list DONE','if',5,'p_if','parser.py',167),
  ('if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE','if',10,'p_if','parser.py',168),
  ('if -> IF expression DO stmt_list DONE NL ELDEF DO stmt_list DONE NL ELUND DO stmt_list DONE','if',15,'p_if','parser.py',169),
  ('if -> IF expression DO stmt_list DONE NL ELUND DO stmt_list DONE','if',10,'p_if','parser.py',170),
  ('function -> FUNCTION OBRACKET IDENT CBRACKET DO stmt_list DONE','function',7,'p_function','parser.py',183),
  ('function -> FUNCTION IDENT OBRACKET IDENT CBRACKET DO NL stmt_list DONE','function',9,'p_function','parser.py',184),
]
